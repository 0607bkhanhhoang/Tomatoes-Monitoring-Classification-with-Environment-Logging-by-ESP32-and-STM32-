
ARM_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af4c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001610  0800b060  0800b060  0000c060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c670  0800c670  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c670  0800c670  0000d670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c678  0800c678  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c678  0800c678  0000d678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c67c  0800c67c  0000d67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c680  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  200001d8  0800c858  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  0800c858  0000e5b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e64  00000000  00000000  0000e201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002deb  00000000  00000000  00022065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  00024e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fdc  00000000  00000000  00026290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a35f  00000000  00000000  0002726c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000180de  00000000  00000000  000415cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095b83  00000000  00000000  000596a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef22c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ad4  00000000  00000000  000ef270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000f5d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b044 	.word	0x0800b044

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800b044 	.word	0x0800b044

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_f2uiz>:
 8000d84:	0042      	lsls	r2, r0, #1
 8000d86:	d20e      	bcs.n	8000da6 <__aeabi_f2uiz+0x22>
 8000d88:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d8c:	d30b      	bcc.n	8000da6 <__aeabi_f2uiz+0x22>
 8000d8e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d96:	d409      	bmi.n	8000dac <__aeabi_f2uiz+0x28>
 8000d98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000da0:	fa23 f002 	lsr.w	r0, r3, r2
 8000da4:	4770      	bx	lr
 8000da6:	f04f 0000 	mov.w	r0, #0
 8000daa:	4770      	bx	lr
 8000dac:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000db0:	d101      	bne.n	8000db6 <__aeabi_f2uiz+0x32>
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	d102      	bne.n	8000dbc <__aeabi_f2uiz+0x38>
 8000db6:	f04f 30ff 	mov.w	r0, #4294967295
 8000dba:	4770      	bx	lr
 8000dbc:	f04f 0000 	mov.w	r0, #0
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <__aeabi_d2lz>:
 8000dc4:	b538      	push	{r3, r4, r5, lr}
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2300      	movs	r3, #0
 8000dca:	4604      	mov	r4, r0
 8000dcc:	460d      	mov	r5, r1
 8000dce:	f7ff fdf5 	bl	80009bc <__aeabi_dcmplt>
 8000dd2:	b928      	cbnz	r0, 8000de0 <__aeabi_d2lz+0x1c>
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	4629      	mov	r1, r5
 8000dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ddc:	f000 b80a 	b.w	8000df4 <__aeabi_d2ulz>
 8000de0:	4620      	mov	r0, r4
 8000de2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000de6:	f000 f805 	bl	8000df4 <__aeabi_d2ulz>
 8000dea:	4240      	negs	r0, r0
 8000dec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df0:	bd38      	pop	{r3, r4, r5, pc}
 8000df2:	bf00      	nop

08000df4 <__aeabi_d2ulz>:
 8000df4:	b5d0      	push	{r4, r6, r7, lr}
 8000df6:	2200      	movs	r2, #0
 8000df8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <__aeabi_d2ulz+0x34>)
 8000dfa:	4606      	mov	r6, r0
 8000dfc:	460f      	mov	r7, r1
 8000dfe:	f7ff fb6b 	bl	80004d8 <__aeabi_dmul>
 8000e02:	f7ff fe41 	bl	8000a88 <__aeabi_d2uiz>
 8000e06:	4604      	mov	r4, r0
 8000e08:	f7ff faec 	bl	80003e4 <__aeabi_ui2d>
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	4b07      	ldr	r3, [pc, #28]	@ (8000e2c <__aeabi_d2ulz+0x38>)
 8000e10:	f7ff fb62 	bl	80004d8 <__aeabi_dmul>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	4630      	mov	r0, r6
 8000e1a:	4639      	mov	r1, r7
 8000e1c:	f7ff f9a4 	bl	8000168 <__aeabi_dsub>
 8000e20:	f7ff fe32 	bl	8000a88 <__aeabi_d2uiz>
 8000e24:	4621      	mov	r1, r4
 8000e26:	bdd0      	pop	{r4, r6, r7, pc}
 8000e28:	3df00000 	.word	0x3df00000
 8000e2c:	41f00000 	.word	0x41f00000

08000e30 <ILI9341_DrawHollowCircle>:
	us *= (SystemCoreClock / 1000000);
	while (us--);
}

void ILI9341_DrawHollowCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b089      	sub	sp, #36	@ 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4604      	mov	r4, r0
 8000e38:	4608      	mov	r0, r1
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4623      	mov	r3, r4
 8000e40:	80fb      	strh	r3, [r7, #6]
 8000e42:	4603      	mov	r3, r0
 8000e44:	80bb      	strh	r3, [r7, #4]
 8000e46:	460b      	mov	r3, r1
 8000e48:	807b      	strh	r3, [r7, #2]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	803b      	strh	r3, [r7, #0]
	int x = radius-1;
 8000e4e:	887b      	ldrh	r3, [r7, #2]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	61fb      	str	r3, [r7, #28]
	int y = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61bb      	str	r3, [r7, #24]
	int dx = 1;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
	int dy = 1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	613b      	str	r3, [r7, #16]
	int err = dx - (radius << 1);
 8000e60:	887b      	ldrh	r3, [r7, #2]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	697a      	ldr	r2, [r7, #20]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	60fb      	str	r3, [r7, #12]

	while (x >= y)
 8000e6a:	e08d      	b.n	8000f88 <ILI9341_DrawHollowCircle+0x158>
	{
		ILI9341_DrawPixel(X + x, Y + y, color);
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	4413      	add	r3, r2
 8000e74:	b298      	uxth	r0, r3
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	88bb      	ldrh	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	883a      	ldrh	r2, [r7, #0]
 8000e82:	4619      	mov	r1, r3
 8000e84:	f000 fc74 	bl	8001770 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y + x, color);
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	4413      	add	r3, r2
 8000e90:	b298      	uxth	r0, r3
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	88bb      	ldrh	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	883a      	ldrh	r2, [r7, #0]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f000 fc66 	bl	8001770 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y + x, color);
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	b298      	uxth	r0, r3
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	88bb      	ldrh	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	883a      	ldrh	r2, [r7, #0]
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f000 fc58 	bl	8001770 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y + y, color);
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	88fa      	ldrh	r2, [r7, #6]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	b298      	uxth	r0, r3
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	88bb      	ldrh	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	883a      	ldrh	r2, [r7, #0]
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f000 fc4a 	bl	8001770 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y - y, color);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	88fa      	ldrh	r2, [r7, #6]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	b298      	uxth	r0, r3
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	88ba      	ldrh	r2, [r7, #4]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	883a      	ldrh	r2, [r7, #0]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f000 fc3c 	bl	8001770 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y - x, color);
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	88fa      	ldrh	r2, [r7, #6]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	b298      	uxth	r0, r3
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	88ba      	ldrh	r2, [r7, #4]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	883a      	ldrh	r2, [r7, #0]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f000 fc2e 	bl	8001770 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y - x, color);
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	b298      	uxth	r0, r3
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	88ba      	ldrh	r2, [r7, #4]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	883a      	ldrh	r2, [r7, #0]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f000 fc20 	bl	8001770 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + x, Y - y, color);
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	4413      	add	r3, r2
 8000f38:	b298      	uxth	r0, r3
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	88ba      	ldrh	r2, [r7, #4]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	883a      	ldrh	r2, [r7, #0]
 8000f46:	4619      	mov	r1, r3
 8000f48:	f000 fc12 	bl	8001770 <ILI9341_DrawPixel>

		if (err <= 0)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	dc09      	bgt.n	8000f66 <ILI9341_DrawHollowCircle+0x136>
		{
			y++;
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	3301      	adds	r3, #1
 8000f56:	61bb      	str	r3, [r7, #24]
			err += dy;
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
			dy += 2;
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	3302      	adds	r3, #2
 8000f64:	613b      	str	r3, [r7, #16]
		}

		if (err > 0)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	dd0d      	ble.n	8000f88 <ILI9341_DrawHollowCircle+0x158>
		{
			x--;
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	61fb      	str	r3, [r7, #28]
			dx += 2;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3302      	adds	r3, #2
 8000f76:	617b      	str	r3, [r7, #20]
			err += (-radius << 1) + dx;
 8000f78:	887b      	ldrh	r3, [r7, #2]
 8000f7a:	425b      	negs	r3, r3
 8000f7c:	005a      	lsls	r2, r3, #1
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	4413      	add	r3, r2
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	4413      	add	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]
	while (x >= y)
 8000f88:	69fa      	ldr	r2, [r7, #28]
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	f6bf af6d 	bge.w	8000e6c <ILI9341_DrawHollowCircle+0x3c>
		}
	}
}
 8000f92:	bf00      	nop
 8000f94:	bf00      	nop
 8000f96:	3724      	adds	r7, #36	@ 0x24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd90      	pop	{r4, r7, pc}

08000f9c <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000f9c:	b590      	push	{r4, r7, lr}
 8000f9e:	b08d      	sub	sp, #52	@ 0x34
 8000fa0:	af02      	add	r7, sp, #8
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4603      	mov	r3, r0
 8000faa:	73fb      	strb	r3, [r7, #15]
 8000fac:	460b      	mov	r3, r1
 8000fae:	81bb      	strh	r3, [r7, #12]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	2b1e      	cmp	r3, #30
 8000fb8:	d964      	bls.n	8001084 <ILI9341_DrawChar+0xe8>
 8000fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	db60      	blt.n	8001084 <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	3303      	adds	r3, #3
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	3b20      	subs	r3, #32
 8000fe4:	7ffa      	ldrb	r2, [r7, #31]
 8000fe6:	fb02 f303 	mul.w	r3, r2, r3
 8000fea:	3304      	adds	r3, #4
 8000fec:	68ba      	ldr	r2, [r7, #8]
 8000fee:	4413      	add	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000ff2:	7fbb      	ldrb	r3, [r7, #30]
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	7f7b      	ldrb	r3, [r7, #29]
 8000ff8:	b29c      	uxth	r4, r3
 8000ffa:	88f9      	ldrh	r1, [r7, #6]
 8000ffc:	89b8      	ldrh	r0, [r7, #12]
 8000ffe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	4623      	mov	r3, r4
 8001004:	f000 fc1a 	bl	800183c <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8001008:	2300      	movs	r3, #0
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24
 800100c:	e035      	b.n	800107a <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
 8001012:	e02b      	b.n	800106c <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8001014:	7f3b      	ldrb	r3, [r7, #28]
 8001016:	6a3a      	ldr	r2, [r7, #32]
 8001018:	fb03 f202 	mul.w	r2, r3, r2
 800101c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101e:	10db      	asrs	r3, r3, #3
 8001020:	f003 031f 	and.w	r3, r3, #31
 8001024:	4413      	add	r3, r2
 8001026:	3301      	adds	r3, #1
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4413      	add	r3, r2
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8001030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	2201      	movs	r2, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 800103e:	7dfa      	ldrb	r2, [r7, #23]
 8001040:	7dbb      	ldrb	r3, [r7, #22]
 8001042:	4013      	ands	r3, r2
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00d      	beq.n	8001066 <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	b29a      	uxth	r2, r3
 800104e:	89bb      	ldrh	r3, [r7, #12]
 8001050:	4413      	add	r3, r2
 8001052:	b298      	uxth	r0, r3
 8001054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001056:	b29a      	uxth	r2, r3
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	4413      	add	r3, r2
 800105c:	b29b      	uxth	r3, r3
 800105e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8001060:	4619      	mov	r1, r3
 8001062:	f000 fb85 	bl	8001770 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8001066:	6a3b      	ldr	r3, [r7, #32]
 8001068:	3301      	adds	r3, #1
 800106a:	623b      	str	r3, [r7, #32]
 800106c:	7fbb      	ldrb	r3, [r7, #30]
 800106e:	6a3a      	ldr	r2, [r7, #32]
 8001070:	429a      	cmp	r2, r3
 8001072:	dbcf      	blt.n	8001014 <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 8001074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001076:	3301      	adds	r3, #1
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
 800107a:	7f7b      	ldrb	r3, [r7, #29]
 800107c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800107e:	429a      	cmp	r2, r3
 8001080:	dbc5      	blt.n	800100e <ILI9341_DrawChar+0x72>
 8001082:	e000      	b.n	8001086 <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 8001084:	bf00      	nop
			}
		}
	}
}
 8001086:	372c      	adds	r7, #44	@ 0x2c
 8001088:	46bd      	mov	sp, r7
 800108a:	bd90      	pop	{r4, r7, pc}

0800108c <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	@ 0x28
 8001090:	af02      	add	r7, sp, #8
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	4611      	mov	r1, r2
 8001098:	461a      	mov	r2, r3
 800109a:	460b      	mov	r3, r1
 800109c:	80fb      	strh	r3, [r7, #6]
 800109e:	4613      	mov	r3, r2
 80010a0:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	3301      	adds	r3, #1
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	77bb      	strb	r3, [r7, #30]

	while (*str)
 80010b0:	e02d      	b.n	800110e <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	7818      	ldrb	r0, [r3, #0]
 80010b6:	88b9      	ldrh	r1, [r7, #4]
 80010b8:	88fa      	ldrh	r2, [r7, #6]
 80010ba:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	460b      	mov	r3, r1
 80010c4:	68b9      	ldr	r1, [r7, #8]
 80010c6:	f7ff ff69 	bl	8000f9c <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	3b20      	subs	r3, #32
 80010d0:	7ffa      	ldrb	r2, [r7, #31]
 80010d2:	fb02 f303 	mul.w	r3, r2, r3
 80010d6:	3304      	adds	r3, #4
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	4413      	add	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	1c9a      	adds	r2, r3, #2
 80010e8:	7fbb      	ldrb	r3, [r7, #30]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	da07      	bge.n	80010fe <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 80010ee:	7dfb      	ldrb	r3, [r7, #23]
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	4413      	add	r3, r2
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	3302      	adds	r3, #2
 80010fa:	80fb      	strh	r3, [r7, #6]
 80010fc:	e004      	b.n	8001108 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 80010fe:	7fbb      	ldrb	r3, [r7, #30]
 8001100:	b29a      	uxth	r2, r3
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	4413      	add	r3, r2
 8001106:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	3301      	adds	r3, #1
 800110c:	60fb      	str	r3, [r7, #12]
	while (*str)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1cd      	bne.n	80010b2 <ILI9341_DrawText+0x26>
	}
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	3720      	adds	r7, #32
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a06      	ldr	r2, [pc, #24]	@ (8001144 <HAL_SPI_TxCpltCallback+0x24>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d104      	bne.n	800113a <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	2108      	movs	r1, #8
 8001134:	4804      	ldr	r0, [pc, #16]	@ (8001148 <HAL_SPI_TxCpltCallback+0x28>)
 8001136:	f002 fdcc 	bl	8003cd2 <HAL_GPIO_WritePin>
  }
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000027c 	.word	0x2000027c
 8001148:	40010800 	.word	0x40010800

0800114c <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001156:	bf00      	nop
 8001158:	4b08      	ldr	r3, [pc, #32]	@ (800117c <ILI9341_SPI_Tx+0x30>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b02      	cmp	r3, #2
 8001164:	d1f8      	bne.n	8001158 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	2201      	movs	r2, #1
 800116a:	4619      	mov	r1, r3
 800116c:	4803      	ldr	r0, [pc, #12]	@ (800117c <ILI9341_SPI_Tx+0x30>)
 800116e:	f004 f8f3 	bl	8005358 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2000027c 	.word	0x2000027c

08001180 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800118c:	bf00      	nop
 800118e:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <ILI9341_SPI_TxBuffer+0x30>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b02      	cmp	r3, #2
 800119a:	d1f8      	bne.n	800118e <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 800119c:	887b      	ldrh	r3, [r7, #2]
 800119e:	461a      	mov	r2, r3
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	4803      	ldr	r0, [pc, #12]	@ (80011b0 <ILI9341_SPI_TxBuffer+0x30>)
 80011a4:	f004 f8d8 	bl	8005358 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	2000027c 	.word	0x2000027c

080011b4 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 80011be:	2200      	movs	r2, #0
 80011c0:	2110      	movs	r1, #16
 80011c2:	4808      	ldr	r0, [pc, #32]	@ (80011e4 <ILI9341_WriteCommand+0x30>)
 80011c4:	f002 fd85 	bl	8003cd2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80011c8:	2200      	movs	r2, #0
 80011ca:	2108      	movs	r1, #8
 80011cc:	4805      	ldr	r0, [pc, #20]	@ (80011e4 <ILI9341_WriteCommand+0x30>)
 80011ce:	f002 fd80 	bl	8003cd2 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ffb9 	bl	800114c <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40010800 	.word	0x40010800

080011e8 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80011f2:	2201      	movs	r2, #1
 80011f4:	2110      	movs	r1, #16
 80011f6:	4808      	ldr	r0, [pc, #32]	@ (8001218 <ILI9341_WriteData+0x30>)
 80011f8:	f002 fd6b 	bl	8003cd2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80011fc:	2200      	movs	r2, #0
 80011fe:	2108      	movs	r1, #8
 8001200:	4805      	ldr	r0, [pc, #20]	@ (8001218 <ILI9341_WriteData+0x30>)
 8001202:	f002 fd66 	bl	8003cd2 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff9f 	bl	800114c <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40010800 	.word	0x40010800

0800121c <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001228:	2201      	movs	r2, #1
 800122a:	2110      	movs	r1, #16
 800122c:	4808      	ldr	r0, [pc, #32]	@ (8001250 <ILI9341_WriteBuffer+0x34>)
 800122e:	f002 fd50 	bl	8003cd2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001232:	2200      	movs	r2, #0
 8001234:	2108      	movs	r1, #8
 8001236:	4806      	ldr	r0, [pc, #24]	@ (8001250 <ILI9341_WriteBuffer+0x34>)
 8001238:	f002 fd4b 	bl	8003cd2 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 800123c:	887b      	ldrh	r3, [r7, #2]
 800123e:	4619      	mov	r1, r3
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff9d 	bl	8001180 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40010800 	.word	0x40010800

08001254 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	4604      	mov	r4, r0
 800125c:	4608      	mov	r0, r1
 800125e:	4611      	mov	r1, r2
 8001260:	461a      	mov	r2, r3
 8001262:	4623      	mov	r3, r4
 8001264:	80fb      	strh	r3, [r7, #6]
 8001266:	4603      	mov	r3, r0
 8001268:	80bb      	strh	r3, [r7, #4]
 800126a:	460b      	mov	r3, r1
 800126c:	807b      	strh	r3, [r7, #2]
 800126e:	4613      	mov	r3, r2
 8001270:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	b29b      	uxth	r3, r3
 8001278:	b2db      	uxtb	r3, r3
 800127a:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	b29b      	uxth	r3, r3
 8001288:	b2db      	uxtb	r3, r3
 800128a:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 800128c:	887b      	ldrh	r3, [r7, #2]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8001292:	202a      	movs	r0, #42	@ 0x2a
 8001294:	f7ff ff8e 	bl	80011b4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	2104      	movs	r1, #4
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ffbc 	bl	800121c <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80012a4:	88bb      	ldrh	r3, [r7, #4]
 80012a6:	0a1b      	lsrs	r3, r3, #8
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 80012ae:	88bb      	ldrh	r3, [r7, #4]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 80012b4:	883b      	ldrh	r3, [r7, #0]
 80012b6:	0a1b      	lsrs	r3, r3, #8
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 80012be:	883b      	ldrh	r3, [r7, #0]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 80012c4:	202b      	movs	r0, #43	@ 0x2b
 80012c6:	f7ff ff75 	bl	80011b4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	2104      	movs	r1, #4
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ffa3 	bl	800121c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 80012d6:	202c      	movs	r0, #44	@ 0x2c
 80012d8:	f7ff ff6c 	bl	80011b4 <ILI9341_WriteCommand>
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd90      	pop	{r4, r7, pc}

080012e4 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 80012e8:	2200      	movs	r2, #0
 80012ea:	2140      	movs	r1, #64	@ 0x40
 80012ec:	480c      	ldr	r0, [pc, #48]	@ (8001320 <ILI9341_Reset+0x3c>)
 80012ee:	f002 fcf0 	bl	8003cd2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80012f2:	200a      	movs	r0, #10
 80012f4:	f001 fc64 	bl	8002bc0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 80012f8:	2200      	movs	r2, #0
 80012fa:	2108      	movs	r1, #8
 80012fc:	4808      	ldr	r0, [pc, #32]	@ (8001320 <ILI9341_Reset+0x3c>)
 80012fe:	f002 fce8 	bl	8003cd2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001302:	200a      	movs	r0, #10
 8001304:	f001 fc5c 	bl	8002bc0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001308:	2201      	movs	r2, #1
 800130a:	2140      	movs	r1, #64	@ 0x40
 800130c:	4804      	ldr	r0, [pc, #16]	@ (8001320 <ILI9341_Reset+0x3c>)
 800130e:	f002 fce0 	bl	8003cd2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8001312:	2201      	movs	r2, #1
 8001314:	2108      	movs	r1, #8
 8001316:	4802      	ldr	r0, [pc, #8]	@ (8001320 <ILI9341_Reset+0x3c>)
 8001318:	f002 fcdb 	bl	8003cd2 <HAL_GPIO_WritePin>
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40010800 	.word	0x40010800

08001324 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001328:	2201      	movs	r2, #1
 800132a:	2140      	movs	r1, #64	@ 0x40
 800132c:	4802      	ldr	r0, [pc, #8]	@ (8001338 <ILI9341_Enable+0x14>)
 800132e:	f002 fcd0 	bl	8003cd2 <HAL_GPIO_WritePin>
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40010800 	.word	0x40010800

0800133c <ILI9341_Init>:

void ILI9341_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8001340:	f7ff fff0 	bl	8001324 <ILI9341_Enable>
	ILI9341_Reset();
 8001344:	f7ff ffce 	bl	80012e4 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8001348:	2001      	movs	r0, #1
 800134a:	f7ff ff33 	bl	80011b4 <ILI9341_WriteCommand>
	HAL_Delay(10);
 800134e:	200a      	movs	r0, #10
 8001350:	f001 fc36 	bl	8002bc0 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8001354:	20cb      	movs	r0, #203	@ 0xcb
 8001356:	f7ff ff2d 	bl	80011b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 800135a:	2039      	movs	r0, #57	@ 0x39
 800135c:	f7ff ff44 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8001360:	202c      	movs	r0, #44	@ 0x2c
 8001362:	f7ff ff41 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff ff3e 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 800136c:	2034      	movs	r0, #52	@ 0x34
 800136e:	f7ff ff3b 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8001372:	2002      	movs	r0, #2
 8001374:	f7ff ff38 	bl	80011e8 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8001378:	20cf      	movs	r0, #207	@ 0xcf
 800137a:	f7ff ff1b 	bl	80011b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800137e:	2000      	movs	r0, #0
 8001380:	f7ff ff32 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001384:	20c1      	movs	r0, #193	@ 0xc1
 8001386:	f7ff ff2f 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 800138a:	2030      	movs	r0, #48	@ 0x30
 800138c:	f7ff ff2c 	bl	80011e8 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8001390:	20e8      	movs	r0, #232	@ 0xe8
 8001392:	f7ff ff0f 	bl	80011b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8001396:	2085      	movs	r0, #133	@ 0x85
 8001398:	f7ff ff26 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800139c:	2000      	movs	r0, #0
 800139e:	f7ff ff23 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80013a2:	2078      	movs	r0, #120	@ 0x78
 80013a4:	f7ff ff20 	bl	80011e8 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80013a8:	20ea      	movs	r0, #234	@ 0xea
 80013aa:	f7ff ff03 	bl	80011b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80013ae:	2000      	movs	r0, #0
 80013b0:	f7ff ff1a 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80013b4:	2000      	movs	r0, #0
 80013b6:	f7ff ff17 	bl	80011e8 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 80013ba:	20ed      	movs	r0, #237	@ 0xed
 80013bc:	f7ff fefa 	bl	80011b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 80013c0:	2064      	movs	r0, #100	@ 0x64
 80013c2:	f7ff ff11 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80013c6:	2003      	movs	r0, #3
 80013c8:	f7ff ff0e 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 80013cc:	2012      	movs	r0, #18
 80013ce:	f7ff ff0b 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 80013d2:	2081      	movs	r0, #129	@ 0x81
 80013d4:	f7ff ff08 	bl	80011e8 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 80013d8:	20f7      	movs	r0, #247	@ 0xf7
 80013da:	f7ff feeb 	bl	80011b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 80013de:	2020      	movs	r0, #32
 80013e0:	f7ff ff02 	bl	80011e8 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 80013e4:	20c0      	movs	r0, #192	@ 0xc0
 80013e6:	f7ff fee5 	bl	80011b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 80013ea:	2023      	movs	r0, #35	@ 0x23
 80013ec:	f7ff fefc 	bl	80011e8 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 80013f0:	20c1      	movs	r0, #193	@ 0xc1
 80013f2:	f7ff fedf 	bl	80011b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 80013f6:	2010      	movs	r0, #16
 80013f8:	f7ff fef6 	bl	80011e8 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 80013fc:	20c5      	movs	r0, #197	@ 0xc5
 80013fe:	f7ff fed9 	bl	80011b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8001402:	203e      	movs	r0, #62	@ 0x3e
 8001404:	f7ff fef0 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8001408:	2028      	movs	r0, #40	@ 0x28
 800140a:	f7ff feed 	bl	80011e8 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 800140e:	20c7      	movs	r0, #199	@ 0xc7
 8001410:	f7ff fed0 	bl	80011b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8001414:	2086      	movs	r0, #134	@ 0x86
 8001416:	f7ff fee7 	bl	80011e8 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 800141a:	2036      	movs	r0, #54	@ 0x36
 800141c:	f7ff feca 	bl	80011b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8001420:	2048      	movs	r0, #72	@ 0x48
 8001422:	f7ff fee1 	bl	80011e8 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8001426:	203a      	movs	r0, #58	@ 0x3a
 8001428:	f7ff fec4 	bl	80011b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 800142c:	2055      	movs	r0, #85	@ 0x55
 800142e:	f7ff fedb 	bl	80011e8 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8001432:	20b1      	movs	r0, #177	@ 0xb1
 8001434:	f7ff febe 	bl	80011b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001438:	2000      	movs	r0, #0
 800143a:	f7ff fed5 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 800143e:	2018      	movs	r0, #24
 8001440:	f7ff fed2 	bl	80011e8 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8001444:	20b6      	movs	r0, #182	@ 0xb6
 8001446:	f7ff feb5 	bl	80011b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 800144a:	2008      	movs	r0, #8
 800144c:	f7ff fecc 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8001450:	2082      	movs	r0, #130	@ 0x82
 8001452:	f7ff fec9 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8001456:	2027      	movs	r0, #39	@ 0x27
 8001458:	f7ff fec6 	bl	80011e8 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 800145c:	20f2      	movs	r0, #242	@ 0xf2
 800145e:	f7ff fea9 	bl	80011b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001462:	2000      	movs	r0, #0
 8001464:	f7ff fec0 	bl	80011e8 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8001468:	2026      	movs	r0, #38	@ 0x26
 800146a:	f7ff fea3 	bl	80011b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 800146e:	2001      	movs	r0, #1
 8001470:	f7ff feba 	bl	80011e8 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8001474:	20e0      	movs	r0, #224	@ 0xe0
 8001476:	f7ff fe9d 	bl	80011b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 800147a:	200f      	movs	r0, #15
 800147c:	f7ff feb4 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001480:	2031      	movs	r0, #49	@ 0x31
 8001482:	f7ff feb1 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8001486:	202b      	movs	r0, #43	@ 0x2b
 8001488:	f7ff feae 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 800148c:	200c      	movs	r0, #12
 800148e:	f7ff feab 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001492:	200e      	movs	r0, #14
 8001494:	f7ff fea8 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001498:	2008      	movs	r0, #8
 800149a:	f7ff fea5 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 800149e:	204e      	movs	r0, #78	@ 0x4e
 80014a0:	f7ff fea2 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 80014a4:	20f1      	movs	r0, #241	@ 0xf1
 80014a6:	f7ff fe9f 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 80014aa:	2037      	movs	r0, #55	@ 0x37
 80014ac:	f7ff fe9c 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80014b0:	2007      	movs	r0, #7
 80014b2:	f7ff fe99 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 80014b6:	2010      	movs	r0, #16
 80014b8:	f7ff fe96 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80014bc:	2003      	movs	r0, #3
 80014be:	f7ff fe93 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80014c2:	200e      	movs	r0, #14
 80014c4:	f7ff fe90 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 80014c8:	2009      	movs	r0, #9
 80014ca:	f7ff fe8d 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80014ce:	2000      	movs	r0, #0
 80014d0:	f7ff fe8a 	bl	80011e8 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 80014d4:	20e1      	movs	r0, #225	@ 0xe1
 80014d6:	f7ff fe6d 	bl	80011b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff fe84 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80014e0:	200e      	movs	r0, #14
 80014e2:	f7ff fe81 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 80014e6:	2014      	movs	r0, #20
 80014e8:	f7ff fe7e 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80014ec:	2003      	movs	r0, #3
 80014ee:	f7ff fe7b 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 80014f2:	2011      	movs	r0, #17
 80014f4:	f7ff fe78 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80014f8:	2007      	movs	r0, #7
 80014fa:	f7ff fe75 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80014fe:	2031      	movs	r0, #49	@ 0x31
 8001500:	f7ff fe72 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001504:	20c1      	movs	r0, #193	@ 0xc1
 8001506:	f7ff fe6f 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 800150a:	2048      	movs	r0, #72	@ 0x48
 800150c:	f7ff fe6c 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001510:	2008      	movs	r0, #8
 8001512:	f7ff fe69 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001516:	200f      	movs	r0, #15
 8001518:	f7ff fe66 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 800151c:	200c      	movs	r0, #12
 800151e:	f7ff fe63 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001522:	2031      	movs	r0, #49	@ 0x31
 8001524:	f7ff fe60 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8001528:	2036      	movs	r0, #54	@ 0x36
 800152a:	f7ff fe5d 	bl	80011e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800152e:	200f      	movs	r0, #15
 8001530:	f7ff fe5a 	bl	80011e8 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8001534:	2011      	movs	r0, #17
 8001536:	f7ff fe3d 	bl	80011b4 <ILI9341_WriteCommand>
	HAL_Delay(100);
 800153a:	2064      	movs	r0, #100	@ 0x64
 800153c:	f001 fb40 	bl	8002bc0 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8001540:	2029      	movs	r0, #41	@ 0x29
 8001542:	f7ff fe37 	bl	80011b4 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8001546:	2000      	movs	r0, #0
 8001548:	f000 f802 	bl	8001550 <ILI9341_SetRotation>
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}

08001550 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 800155a:	2036      	movs	r0, #54	@ 0x36
 800155c:	f7ff fe2a 	bl	80011b4 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8001560:	2001      	movs	r0, #1
 8001562:	f001 fb2d 	bl	8002bc0 <HAL_Delay>

	switch(rotation)
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	2b03      	cmp	r3, #3
 800156a:	d837      	bhi.n	80015dc <ILI9341_SetRotation+0x8c>
 800156c:	a201      	add	r2, pc, #4	@ (adr r2, 8001574 <ILI9341_SetRotation+0x24>)
 800156e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001572:	bf00      	nop
 8001574:	08001585 	.word	0x08001585
 8001578:	0800159b 	.word	0x0800159b
 800157c:	080015b1 	.word	0x080015b1
 8001580:	080015c7 	.word	0x080015c7
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8001584:	2048      	movs	r0, #72	@ 0x48
 8001586:	f7ff fe2f 	bl	80011e8 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 800158a:	4b17      	ldr	r3, [pc, #92]	@ (80015e8 <ILI9341_SetRotation+0x98>)
 800158c:	22f0      	movs	r2, #240	@ 0xf0
 800158e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001590:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <ILI9341_SetRotation+0x9c>)
 8001592:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001596:	801a      	strh	r2, [r3, #0]
		break;
 8001598:	e021      	b.n	80015de <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 800159a:	2028      	movs	r0, #40	@ 0x28
 800159c:	f7ff fe24 	bl	80011e8 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80015a0:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <ILI9341_SetRotation+0x98>)
 80015a2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80015a6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80015a8:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <ILI9341_SetRotation+0x9c>)
 80015aa:	22f0      	movs	r2, #240	@ 0xf0
 80015ac:	801a      	strh	r2, [r3, #0]
		break;
 80015ae:	e016      	b.n	80015de <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 80015b0:	2088      	movs	r0, #136	@ 0x88
 80015b2:	f7ff fe19 	bl	80011e8 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 80015b6:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <ILI9341_SetRotation+0x98>)
 80015b8:	22f0      	movs	r2, #240	@ 0xf0
 80015ba:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80015bc:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <ILI9341_SetRotation+0x9c>)
 80015be:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80015c2:	801a      	strh	r2, [r3, #0]
		break;
 80015c4:	e00b      	b.n	80015de <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 80015c6:	20e8      	movs	r0, #232	@ 0xe8
 80015c8:	f7ff fe0e 	bl	80011e8 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80015cc:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <ILI9341_SetRotation+0x98>)
 80015ce:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80015d2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80015d4:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <ILI9341_SetRotation+0x9c>)
 80015d6:	22f0      	movs	r2, #240	@ 0xf0
 80015d8:	801a      	strh	r2, [r3, #0]
		break;
 80015da:	e000      	b.n	80015de <ILI9341_SetRotation+0x8e>
	default:
		break;
 80015dc:	bf00      	nop
	}
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000002 	.word	0x20000002
 80015ec:	20000000 	.word	0x20000000

080015f0 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 80015f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015f4:	b08d      	sub	sp, #52	@ 0x34
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	6039      	str	r1, [r7, #0]
 80015fc:	80fb      	strh	r3, [r7, #6]
 80015fe:	466b      	mov	r3, sp
 8001600:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800160e:	d202      	bcs.n	8001616 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001614:	e002      	b.n	800161c <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8001616:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800161a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800161c:	2201      	movs	r2, #1
 800161e:	2110      	movs	r1, #16
 8001620:	483e      	ldr	r0, [pc, #248]	@ (800171c <ILI9341_DrawColorBurst+0x12c>)
 8001622:	f002 fb56 	bl	8003cd2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	2108      	movs	r1, #8
 800162a:	483c      	ldr	r0, [pc, #240]	@ (800171c <ILI9341_DrawColorBurst+0x12c>)
 800162c:	f002 fb51 	bl	8003cd2 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8001630:	88fb      	ldrh	r3, [r7, #6]
 8001632:	0a1b      	lsrs	r3, r3, #8
 8001634:	b29b      	uxth	r3, r3
 8001636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 800163a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800163c:	460b      	mov	r3, r1
 800163e:	3b01      	subs	r3, #1
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	2300      	movs	r3, #0
 8001644:	4688      	mov	r8, r1
 8001646:	4699      	mov	r9, r3
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001654:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001658:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800165c:	2300      	movs	r3, #0
 800165e:	460c      	mov	r4, r1
 8001660:	461d      	mov	r5, r3
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	00eb      	lsls	r3, r5, #3
 800166c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001670:	00e2      	lsls	r2, r4, #3
 8001672:	1dcb      	adds	r3, r1, #7
 8001674:	08db      	lsrs	r3, r3, #3
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	ebad 0d03 	sub.w	sp, sp, r3
 800167c:	466b      	mov	r3, sp
 800167e:	3300      	adds	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001682:	2300      	movs	r3, #0
 8001684:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001686:	e00e      	b.n	80016a6 <ILI9341_DrawColorBurst+0xb6>
	{
		BurstBuffer[j] = chifted;
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800168c:	4413      	add	r3, r2
 800168e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001692:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8001694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001696:	3301      	adds	r3, #1
 8001698:	88fa      	ldrh	r2, [r7, #6]
 800169a:	b2d1      	uxtb	r1, r2
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 80016a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016a2:	3302      	adds	r3, #2
 80016a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d3ec      	bcc.n	8001688 <ILI9341_DrawColorBurst+0x98>
	}

	uint32_t SendingSize = size * 2;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016bc:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80016c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80016c8:	fb01 f202 	mul.w	r2, r1, r2
 80016cc:	1a9b      	subs	r3, r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d010      	beq.n	80016f8 <ILI9341_DrawColorBurst+0x108>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80016da:	e009      	b.n	80016f0 <ILI9341_DrawColorBurst+0x100>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 80016dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016de:	b29a      	uxth	r2, r3
 80016e0:	230a      	movs	r3, #10
 80016e2:	69b9      	ldr	r1, [r7, #24]
 80016e4:	480e      	ldr	r0, [pc, #56]	@ (8001720 <ILI9341_DrawColorBurst+0x130>)
 80016e6:	f003 fcf3 	bl	80050d0 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 80016ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ec:	3301      	adds	r3, #1
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80016f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d3f1      	bcc.n	80016dc <ILI9341_DrawColorBurst+0xec>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	230a      	movs	r3, #10
 80016fe:	69b9      	ldr	r1, [r7, #24]
 8001700:	4807      	ldr	r0, [pc, #28]	@ (8001720 <ILI9341_DrawColorBurst+0x130>)
 8001702:	f003 fce5 	bl	80050d0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001706:	2201      	movs	r2, #1
 8001708:	2108      	movs	r1, #8
 800170a:	4804      	ldr	r0, [pc, #16]	@ (800171c <ILI9341_DrawColorBurst+0x12c>)
 800170c:	f002 fae1 	bl	8003cd2 <HAL_GPIO_WritePin>
 8001710:	46b5      	mov	sp, r6
}
 8001712:	bf00      	nop
 8001714:	3734      	adds	r7, #52	@ 0x34
 8001716:	46bd      	mov	sp, r7
 8001718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800171c:	40010800 	.word	0x40010800
 8001720:	2000027c 	.word	0x2000027c

08001724 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 800172e:	4b0e      	ldr	r3, [pc, #56]	@ (8001768 <ILI9341_FillScreen+0x44>)
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	b29a      	uxth	r2, r3
 8001734:	4b0d      	ldr	r3, [pc, #52]	@ (800176c <ILI9341_FillScreen+0x48>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	b29b      	uxth	r3, r3
 800173a:	2100      	movs	r1, #0
 800173c:	2000      	movs	r0, #0
 800173e:	f7ff fd89 	bl	8001254 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8001742:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <ILI9341_FillScreen+0x44>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	b29b      	uxth	r3, r3
 8001748:	461a      	mov	r2, r3
 800174a:	4b08      	ldr	r3, [pc, #32]	@ (800176c <ILI9341_FillScreen+0x48>)
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	b29b      	uxth	r3, r3
 8001750:	fb02 f303 	mul.w	r3, r2, r3
 8001754:	461a      	mov	r2, r3
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	4611      	mov	r1, r2
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ff48 	bl	80015f0 <ILI9341_DrawColorBurst>
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000002 	.word	0x20000002
 800176c:	20000000 	.word	0x20000000

08001770 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	80fb      	strh	r3, [r7, #6]
 800177a:	460b      	mov	r3, r1
 800177c:	80bb      	strh	r3, [r7, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001782:	4b2c      	ldr	r3, [pc, #176]	@ (8001834 <ILI9341_DrawPixel+0xc4>)
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	b29b      	uxth	r3, r3
 8001788:	88fa      	ldrh	r2, [r7, #6]
 800178a:	429a      	cmp	r2, r3
 800178c:	d24d      	bcs.n	800182a <ILI9341_DrawPixel+0xba>
 800178e:	4b2a      	ldr	r3, [pc, #168]	@ (8001838 <ILI9341_DrawPixel+0xc8>)
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	b29b      	uxth	r3, r3
 8001794:	88ba      	ldrh	r2, [r7, #4]
 8001796:	429a      	cmp	r2, r3
 8001798:	d247      	bcs.n	800182a <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	0a1b      	lsrs	r3, r3, #8
 800179e:	b29b      	uxth	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	753b      	strb	r3, [r7, #20]
 80017a4:	88fb      	ldrh	r3, [r7, #6]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	757b      	strb	r3, [r7, #21]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	3301      	adds	r3, #1
 80017ae:	121b      	asrs	r3, r3, #8
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	75bb      	strb	r3, [r7, #22]
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	3301      	adds	r3, #1
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 80017be:	88bb      	ldrh	r3, [r7, #4]
 80017c0:	0a1b      	lsrs	r3, r3, #8
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	743b      	strb	r3, [r7, #16]
 80017c8:	88bb      	ldrh	r3, [r7, #4]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	747b      	strb	r3, [r7, #17]
 80017ce:	88bb      	ldrh	r3, [r7, #4]
 80017d0:	3301      	adds	r3, #1
 80017d2:	121b      	asrs	r3, r3, #8
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	74bb      	strb	r3, [r7, #18]
 80017d8:	88bb      	ldrh	r3, [r7, #4]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	3301      	adds	r3, #1
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 80017e2:	887b      	ldrh	r3, [r7, #2]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	733b      	strb	r3, [r7, #12]
 80017ec:	887b      	ldrh	r3, [r7, #2]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 80017f2:	202a      	movs	r0, #42	@ 0x2a
 80017f4:	f7ff fcde 	bl	80011b4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	2104      	movs	r1, #4
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fd0c 	bl	800121c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001804:	202b      	movs	r0, #43	@ 0x2b
 8001806:	f7ff fcd5 	bl	80011b4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 800180a:	f107 0310 	add.w	r3, r7, #16
 800180e:	2104      	movs	r1, #4
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fd03 	bl	800121c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8001816:	202c      	movs	r0, #44	@ 0x2c
 8001818:	f7ff fccc 	bl	80011b4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	2102      	movs	r1, #2
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fcfa 	bl	800121c <ILI9341_WriteBuffer>
 8001828:	e000      	b.n	800182c <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800182a:	bf00      	nop
}
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000002 	.word	0x20000002
 8001838:	20000000 	.word	0x20000000

0800183c <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4604      	mov	r4, r0
 8001844:	4608      	mov	r0, r1
 8001846:	4611      	mov	r1, r2
 8001848:	461a      	mov	r2, r3
 800184a:	4623      	mov	r3, r4
 800184c:	80fb      	strh	r3, [r7, #6]
 800184e:	4603      	mov	r3, r0
 8001850:	80bb      	strh	r3, [r7, #4]
 8001852:	460b      	mov	r3, r1
 8001854:	807b      	strh	r3, [r7, #2]
 8001856:	4613      	mov	r3, r2
 8001858:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800185a:	4b24      	ldr	r3, [pc, #144]	@ (80018ec <ILI9341_DrawRectangle+0xb0>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	b29b      	uxth	r3, r3
 8001860:	88fa      	ldrh	r2, [r7, #6]
 8001862:	429a      	cmp	r2, r3
 8001864:	d23d      	bcs.n	80018e2 <ILI9341_DrawRectangle+0xa6>
 8001866:	4b22      	ldr	r3, [pc, #136]	@ (80018f0 <ILI9341_DrawRectangle+0xb4>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	b29b      	uxth	r3, r3
 800186c:	88ba      	ldrh	r2, [r7, #4]
 800186e:	429a      	cmp	r2, r3
 8001870:	d237      	bcs.n	80018e2 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8001872:	88fa      	ldrh	r2, [r7, #6]
 8001874:	887b      	ldrh	r3, [r7, #2]
 8001876:	4413      	add	r3, r2
 8001878:	4a1c      	ldr	r2, [pc, #112]	@ (80018ec <ILI9341_DrawRectangle+0xb0>)
 800187a:	8812      	ldrh	r2, [r2, #0]
 800187c:	b292      	uxth	r2, r2
 800187e:	4293      	cmp	r3, r2
 8001880:	dd05      	ble.n	800188e <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8001882:	4b1a      	ldr	r3, [pc, #104]	@ (80018ec <ILI9341_DrawRectangle+0xb0>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	b29a      	uxth	r2, r3
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 800188e:	88ba      	ldrh	r2, [r7, #4]
 8001890:	883b      	ldrh	r3, [r7, #0]
 8001892:	4413      	add	r3, r2
 8001894:	4a16      	ldr	r2, [pc, #88]	@ (80018f0 <ILI9341_DrawRectangle+0xb4>)
 8001896:	8812      	ldrh	r2, [r2, #0]
 8001898:	b292      	uxth	r2, r2
 800189a:	4293      	cmp	r3, r2
 800189c:	dd05      	ble.n	80018aa <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 800189e:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <ILI9341_DrawRectangle+0xb4>)
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	88bb      	ldrh	r3, [r7, #4]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 80018aa:	88fa      	ldrh	r2, [r7, #6]
 80018ac:	887b      	ldrh	r3, [r7, #2]
 80018ae:	4413      	add	r3, r2
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	3b01      	subs	r3, #1
 80018b4:	b29c      	uxth	r4, r3
 80018b6:	88ba      	ldrh	r2, [r7, #4]
 80018b8:	883b      	ldrh	r3, [r7, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	b29b      	uxth	r3, r3
 80018be:	3b01      	subs	r3, #1
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	88b9      	ldrh	r1, [r7, #4]
 80018c4:	88f8      	ldrh	r0, [r7, #6]
 80018c6:	4622      	mov	r2, r4
 80018c8:	f7ff fcc4 	bl	8001254 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 80018cc:	883b      	ldrh	r3, [r7, #0]
 80018ce:	887a      	ldrh	r2, [r7, #2]
 80018d0:	fb02 f303 	mul.w	r3, r2, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	8b3b      	ldrh	r3, [r7, #24]
 80018d8:	4611      	mov	r1, r2
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fe88 	bl	80015f0 <ILI9341_DrawColorBurst>
 80018e0:	e000      	b.n	80018e4 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80018e2:	bf00      	nop
}
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd90      	pop	{r4, r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000002 	.word	0x20000002
 80018f0:	20000000 	.word	0x20000000

080018f4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to your setup

void lcd_send_cmd (char cmd)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	f023 030f 	bic.w	r3, r3, #15
 8001904:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	f043 030c 	orr.w	r3, r3, #12
 8001912:	b2db      	uxtb	r3, r3
 8001914:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	f043 0308 	orr.w	r3, r3, #8
 800191c:	b2db      	uxtb	r3, r3
 800191e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001920:	7bbb      	ldrb	r3, [r7, #14]
 8001922:	f043 030c 	orr.w	r3, r3, #12
 8001926:	b2db      	uxtb	r3, r3
 8001928:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800192a:	7bbb      	ldrb	r3, [r7, #14]
 800192c:	f043 0308 	orr.w	r3, r3, #8
 8001930:	b2db      	uxtb	r3, r3
 8001932:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001934:	f107 0208 	add.w	r2, r7, #8
 8001938:	2364      	movs	r3, #100	@ 0x64
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	2304      	movs	r3, #4
 800193e:	214e      	movs	r1, #78	@ 0x4e
 8001940:	4803      	ldr	r0, [pc, #12]	@ (8001950 <lcd_send_cmd+0x5c>)
 8001942:	f002 fb23 	bl	8003f8c <HAL_I2C_Master_Transmit>
}
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000228 	.word	0x20000228

08001954 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af02      	add	r7, sp, #8
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	f023 030f 	bic.w	r3, r3, #15
 8001964:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	011b      	lsls	r3, r3, #4
 800196a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800196c:	7bfb      	ldrb	r3, [r7, #15]
 800196e:	f043 030d 	orr.w	r3, r3, #13
 8001972:	b2db      	uxtb	r3, r3
 8001974:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	f043 0309 	orr.w	r3, r3, #9
 800197c:	b2db      	uxtb	r3, r3
 800197e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001980:	7bbb      	ldrb	r3, [r7, #14]
 8001982:	f043 030d 	orr.w	r3, r3, #13
 8001986:	b2db      	uxtb	r3, r3
 8001988:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800198a:	7bbb      	ldrb	r3, [r7, #14]
 800198c:	f043 0309 	orr.w	r3, r3, #9
 8001990:	b2db      	uxtb	r3, r3
 8001992:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001994:	f107 0208 	add.w	r2, r7, #8
 8001998:	2364      	movs	r3, #100	@ 0x64
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2304      	movs	r3, #4
 800199e:	214e      	movs	r1, #78	@ 0x4e
 80019a0:	4803      	ldr	r0, [pc, #12]	@ (80019b0 <lcd_send_data+0x5c>)
 80019a2:	f002 faf3 	bl	8003f8c <HAL_I2C_Master_Transmit>
}
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000228 	.word	0x20000228

080019b4 <lcd_clear>:

void lcd_clear (void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 80019b8:	2001      	movs	r0, #1
 80019ba:	f7ff ff9b 	bl	80018f4 <lcd_send_cmd>
	HAL_Delay(10);
 80019be:	200a      	movs	r0, #10
 80019c0:	f001 f8fe 	bl	8002bc0 <HAL_Delay>
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
    switch (row)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <lcd_put_cur+0x18>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d005      	beq.n	80019ea <lcd_put_cur+0x22>
 80019de:	e009      	b.n	80019f4 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019e6:	603b      	str	r3, [r7, #0]
            break;
 80019e8:	e004      	b.n	80019f4 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80019f0:	603b      	str	r3, [r7, #0]
            break;
 80019f2:	bf00      	nop
    }

    lcd_send_cmd (col);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff7b 	bl	80018f4 <lcd_send_cmd>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <lcd_init>:


void lcd_init (void)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001a0a:	2032      	movs	r0, #50	@ 0x32
 8001a0c:	f001 f8d8 	bl	8002bc0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001a10:	2030      	movs	r0, #48	@ 0x30
 8001a12:	f7ff ff6f 	bl	80018f4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001a16:	2005      	movs	r0, #5
 8001a18:	f001 f8d2 	bl	8002bc0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001a1c:	2030      	movs	r0, #48	@ 0x30
 8001a1e:	f7ff ff69 	bl	80018f4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001a22:	2001      	movs	r0, #1
 8001a24:	f001 f8cc 	bl	8002bc0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001a28:	2030      	movs	r0, #48	@ 0x30
 8001a2a:	f7ff ff63 	bl	80018f4 <lcd_send_cmd>
	HAL_Delay(10);
 8001a2e:	200a      	movs	r0, #10
 8001a30:	f001 f8c6 	bl	8002bc0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001a34:	2020      	movs	r0, #32
 8001a36:	f7ff ff5d 	bl	80018f4 <lcd_send_cmd>
	HAL_Delay(10);
 8001a3a:	200a      	movs	r0, #10
 8001a3c:	f001 f8c0 	bl	8002bc0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001a40:	2028      	movs	r0, #40	@ 0x28
 8001a42:	f7ff ff57 	bl	80018f4 <lcd_send_cmd>
	HAL_Delay(1);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f001 f8ba 	bl	8002bc0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001a4c:	2008      	movs	r0, #8
 8001a4e:	f7ff ff51 	bl	80018f4 <lcd_send_cmd>
	HAL_Delay(1);
 8001a52:	2001      	movs	r0, #1
 8001a54:	f001 f8b4 	bl	8002bc0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f7ff ff4b 	bl	80018f4 <lcd_send_cmd>
	HAL_Delay(1);
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f001 f8ae 	bl	8002bc0 <HAL_Delay>
	HAL_Delay(1);
 8001a64:	2001      	movs	r0, #1
 8001a66:	f001 f8ab 	bl	8002bc0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001a6a:	2006      	movs	r0, #6
 8001a6c:	f7ff ff42 	bl	80018f4 <lcd_send_cmd>
	HAL_Delay(1);
 8001a70:	2001      	movs	r0, #1
 8001a72:	f001 f8a5 	bl	8002bc0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001a76:	200c      	movs	r0, #12
 8001a78:	f7ff ff3c 	bl	80018f4 <lcd_send_cmd>
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001a88:	e006      	b.n	8001a98 <lcd_send_string+0x18>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ff5e 	bl	8001954 <lcd_send_data>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f4      	bne.n	8001a8a <lcd_send_string+0xa>
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay (uint16_t time)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001ab6:	4b08      	ldr	r3, [pc, #32]	@ (8001ad8 <delay+0x2c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2200      	movs	r2, #0
 8001abc:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8001abe:	bf00      	nop
 8001ac0:	4b05      	ldr	r3, [pc, #20]	@ (8001ad8 <delay+0x2c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d3f9      	bcc.n	8001ac0 <delay+0x14>
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	20000318 	.word	0x20000318

08001adc <Display_Soil>:

void Display_Soil (float soil)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	char str[20] = {0};
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
	lcd_put_cur(1, 4);
 8001af6:	2104      	movs	r1, #4
 8001af8:	2001      	movs	r0, #1
 8001afa:	f7ff ff65 	bl	80019c8 <lcd_put_cur>

	sprintf (str, "M:%.1f ", soil);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7fe fc92 	bl	8000428 <__aeabi_f2d>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	f107 000c 	add.w	r0, r7, #12
 8001b0c:	4905      	ldr	r1, [pc, #20]	@ (8001b24 <Display_Soil+0x48>)
 8001b0e:	f005 fe6d 	bl	80077ec <siprintf>
	lcd_send_string(str);
 8001b12:	f107 030c 	add.w	r3, r7, #12
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ffb2 	bl	8001a80 <lcd_send_string>
}
 8001b1c:	bf00      	nop
 8001b1e:	3720      	adds	r7, #32
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	0800b060 	.word	0x0800b060

08001b28 <Display_Temp>:

void Display_Temp (float Temp)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	char str[20] = {0};
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	f107 0310 	add.w	r3, r7, #16
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
	lcd_put_cur(0, 0);
 8001b42:	2100      	movs	r1, #0
 8001b44:	2000      	movs	r0, #0
 8001b46:	f7ff ff3f 	bl	80019c8 <lcd_put_cur>

	sprintf (str, "T:%.1f ", Temp);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7fe fc6c 	bl	8000428 <__aeabi_f2d>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	f107 000c 	add.w	r0, r7, #12
 8001b58:	4905      	ldr	r1, [pc, #20]	@ (8001b70 <Display_Temp+0x48>)
 8001b5a:	f005 fe47 	bl	80077ec <siprintf>
	lcd_send_string(str);
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff ff8c 	bl	8001a80 <lcd_send_string>
}
 8001b68:	bf00      	nop
 8001b6a:	3720      	adds	r7, #32
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	0800b068 	.word	0x0800b068

08001b74 <Display_Rh>:

void Display_Rh (float Rh)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	char str[20] = {0};
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	f107 0310 	add.w	r3, r7, #16
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
	lcd_put_cur(0, 8);
 8001b8e:	2108      	movs	r1, #8
 8001b90:	2000      	movs	r0, #0
 8001b92:	f7ff ff19 	bl	80019c8 <lcd_put_cur>

	sprintf (str, "H:%.1f ", Rh);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7fe fc46 	bl	8000428 <__aeabi_f2d>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	f107 000c 	add.w	r0, r7, #12
 8001ba4:	4905      	ldr	r1, [pc, #20]	@ (8001bbc <Display_Rh+0x48>)
 8001ba6:	f005 fe21 	bl	80077ec <siprintf>
	lcd_send_string(str);
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff ff66 	bl	8001a80 <lcd_send_string>
}
 8001bb4:	bf00      	nop
 8001bb6:	3720      	adds	r7, #32
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	0800b070 	.word	0x0800b070

08001bc0 <Set_Pin_Output>:
uint8_t temp = 0;
uint8_t humid = 0;
uint8_t soilvalue = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0308 	add.w	r3, r7, #8
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001bda:	887b      	ldrh	r3, [r7, #2]
 8001bdc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bde:	2301      	movs	r3, #1
 8001be0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2302      	movs	r3, #2
 8001be4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001be6:	f107 0308 	add.w	r3, r7, #8
 8001bea:	4619      	mov	r1, r3
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f001 fed5 	bl	800399c <HAL_GPIO_Init>
}
 8001bf2:	bf00      	nop
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	460b      	mov	r3, r1
 8001c04:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c06:	f107 0308 	add.w	r3, r7, #8
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]
 8001c12:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001c14:	887b      	ldrh	r3, [r7, #2]
 8001c16:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001c20:	f107 0308 	add.w	r3, r7, #8
 8001c24:	4619      	mov	r1, r3
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f001 feb8 	bl	800399c <HAL_GPIO_Init>
}
 8001c2c:	bf00      	nop
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <DHT11_Start>:

#define DHT11_PORT GPIOA
#define DHT11_PIN GPIO_PIN_1

void DHT11_Start (void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8001c38:	2102      	movs	r1, #2
 8001c3a:	480d      	ldr	r0, [pc, #52]	@ (8001c70 <DHT11_Start+0x3c>)
 8001c3c:	f7ff ffc0 	bl	8001bc0 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001c40:	2200      	movs	r2, #0
 8001c42:	2102      	movs	r1, #2
 8001c44:	480a      	ldr	r0, [pc, #40]	@ (8001c70 <DHT11_Start+0x3c>)
 8001c46:	f002 f844 	bl	8003cd2 <HAL_GPIO_WritePin>
	delay (18000);   // wait for 18ms
 8001c4a:	f244 6050 	movw	r0, #18000	@ 0x4650
 8001c4e:	f7ff ff2d 	bl	8001aac <delay>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001c52:	2201      	movs	r2, #1
 8001c54:	2102      	movs	r1, #2
 8001c56:	4806      	ldr	r0, [pc, #24]	@ (8001c70 <DHT11_Start+0x3c>)
 8001c58:	f002 f83b 	bl	8003cd2 <HAL_GPIO_WritePin>
	delay (20);   // wait for 20us
 8001c5c:	2014      	movs	r0, #20
 8001c5e:	f7ff ff25 	bl	8001aac <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8001c62:	2102      	movs	r1, #2
 8001c64:	4802      	ldr	r0, [pc, #8]	@ (8001c70 <DHT11_Start+0x3c>)
 8001c66:	f7ff ffc8 	bl	8001bfa <Set_Pin_Input>
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40010800 	.word	0x40010800

08001c74 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8001c7e:	2028      	movs	r0, #40	@ 0x28
 8001c80:	f7ff ff14 	bl	8001aac <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001c84:	2102      	movs	r1, #2
 8001c86:	4811      	ldr	r0, [pc, #68]	@ (8001ccc <DHT11_Check_Response+0x58>)
 8001c88:	f002 f80c 	bl	8003ca4 <HAL_GPIO_ReadPin>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10e      	bne.n	8001cb0 <DHT11_Check_Response+0x3c>
	{
		delay (80);
 8001c92:	2050      	movs	r0, #80	@ 0x50
 8001c94:	f7ff ff0a 	bl	8001aac <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001c98:	2102      	movs	r1, #2
 8001c9a:	480c      	ldr	r0, [pc, #48]	@ (8001ccc <DHT11_Check_Response+0x58>)
 8001c9c:	f002 f802 	bl	8003ca4 <HAL_GPIO_ReadPin>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <DHT11_Check_Response+0x38>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	71fb      	strb	r3, [r7, #7]
 8001caa:	e001      	b.n	8001cb0 <DHT11_Check_Response+0x3c>
		else Response = 0; // 255
 8001cac:	2300      	movs	r3, #0
 8001cae:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8001cb0:	bf00      	nop
 8001cb2:	2102      	movs	r1, #2
 8001cb4:	4805      	ldr	r0, [pc, #20]	@ (8001ccc <DHT11_Check_Response+0x58>)
 8001cb6:	f001 fff5 	bl	8003ca4 <HAL_GPIO_ReadPin>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1f8      	bne.n	8001cb2 <DHT11_Check_Response+0x3e>

	return Response;
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40010800 	.word	0x40010800

08001cd0 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	71bb      	strb	r3, [r7, #6]
 8001cda:	e037      	b.n	8001d4c <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8001cdc:	bf00      	nop
 8001cde:	2102      	movs	r1, #2
 8001ce0:	481e      	ldr	r0, [pc, #120]	@ (8001d5c <DHT11_Read+0x8c>)
 8001ce2:	f001 ffdf 	bl	8003ca4 <HAL_GPIO_ReadPin>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0f8      	beq.n	8001cde <DHT11_Read+0xe>
		delay (40);   // wait for 40 us
 8001cec:	2028      	movs	r0, #40	@ 0x28
 8001cee:	f7ff fedd 	bl	8001aac <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001cf2:	2102      	movs	r1, #2
 8001cf4:	4819      	ldr	r0, [pc, #100]	@ (8001d5c <DHT11_Read+0x8c>)
 8001cf6:	f001 ffd5 	bl	8003ca4 <HAL_GPIO_ReadPin>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10e      	bne.n	8001d1e <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001d00:	79bb      	ldrb	r3, [r7, #6]
 8001d02:	f1c3 0307 	rsb	r3, r3, #7
 8001d06:	2201      	movs	r2, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	b25b      	sxtb	r3, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	b25a      	sxtb	r2, r3
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	4013      	ands	r3, r2
 8001d18:	b25b      	sxtb	r3, r3
 8001d1a:	71fb      	strb	r3, [r7, #7]
 8001d1c:	e00b      	b.n	8001d36 <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001d1e:	79bb      	ldrb	r3, [r7, #6]
 8001d20:	f1c3 0307 	rsb	r3, r3, #7
 8001d24:	2201      	movs	r2, #1
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	b25a      	sxtb	r2, r3
 8001d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	b25b      	sxtb	r3, r3
 8001d34:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN) == GPIO_PIN_RESET));  // wait for the pin to go low
 8001d36:	bf00      	nop
 8001d38:	2102      	movs	r1, #2
 8001d3a:	4808      	ldr	r0, [pc, #32]	@ (8001d5c <DHT11_Read+0x8c>)
 8001d3c:	f001 ffb2 	bl	8003ca4 <HAL_GPIO_ReadPin>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f8      	beq.n	8001d38 <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	71bb      	strb	r3, [r7, #6]
 8001d4c:	79bb      	ldrb	r3, [r7, #6]
 8001d4e:	2b07      	cmp	r3, #7
 8001d50:	d9c4      	bls.n	8001cdc <DHT11_Read+0xc>
	}
	return i;
 8001d52:	79fb      	ldrb	r3, [r7, #7]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40010800 	.word	0x40010800

08001d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b092      	sub	sp, #72	@ 0x48
 8001d64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d66:	f000 fec9 	bl	8002afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d6a:	f000 f96f 	bl	800204c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d6e:	f000 fb0b 	bl	8002388 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d72:	f000 fae3 	bl	800233c <MX_DMA_Init>
  MX_ADC1_Init();
 8001d76:	f000 f9c5 	bl	8002104 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001d7a:	f000 fa01 	bl	8002180 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001d7e:	f000 fa2d 	bl	80021dc <MX_SPI1_Init>
  MX_TIM1_Init();
 8001d82:	f000 fa61 	bl	8002248 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001d86:	f000 faaf 	bl	80022e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001d8a:	4894      	ldr	r0, [pc, #592]	@ (8001fdc <main+0x27c>)
 8001d8c:	f003 fe24 	bl	80059d8 <HAL_TIM_Base_Start>
  HAL_ADC_Start(&hadc1);
 8001d90:	4893      	ldr	r0, [pc, #588]	@ (8001fe0 <main+0x280>)
 8001d92:	f001 f811 	bl	8002db8 <HAL_ADC_Start>

  //Initialize LCD1602 for greeting
  lcd_init();
 8001d96:	f7ff fe36 	bl	8001a06 <lcd_init>
  lcd_put_cur(0,1);
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f7ff fe13 	bl	80019c8 <lcd_put_cur>
  lcd_send_string("Enter SmartFarm");
 8001da2:	4890      	ldr	r0, [pc, #576]	@ (8001fe4 <main+0x284>)
 8001da4:	f7ff fe6c 	bl	8001a80 <lcd_send_string>
  HAL_Delay(1000);
 8001da8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dac:	f000 ff08 	bl	8002bc0 <HAL_Delay>
  lcd_put_cur(1,3);
 8001db0:	2103      	movs	r1, #3
 8001db2:	2001      	movs	r0, #1
 8001db4:	f7ff fe08 	bl	80019c8 <lcd_put_cur>
  lcd_send_string("Monitoring");
 8001db8:	488b      	ldr	r0, [pc, #556]	@ (8001fe8 <main+0x288>)
 8001dba:	f7ff fe61 	bl	8001a80 <lcd_send_string>
  HAL_Delay(500);
 8001dbe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001dc2:	f000 fefd 	bl	8002bc0 <HAL_Delay>
  lcd_clear();
 8001dc6:	f7ff fdf5 	bl	80019b4 <lcd_clear>

   /*********Initialize ILI9341*************/
  ILI9341_Init();
 8001dca:	f7ff fab7 	bl	800133c <ILI9341_Init>
  ILI9341_FillScreen(WHITE);
 8001dce:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001dd2:	f7ff fca7 	bl	8001724 <ILI9341_FillScreen>
  ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8001dd6:	2003      	movs	r0, #3
 8001dd8:	f7ff fbba 	bl	8001550 <ILI9341_SetRotation>
  ILI9341_DrawText("SMART FARM", FONT4, 90, 110, BLACK, WHITE);
 8001ddc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001de0:	9301      	str	r3, [sp, #4]
 8001de2:	2300      	movs	r3, #0
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	236e      	movs	r3, #110	@ 0x6e
 8001de8:	225a      	movs	r2, #90	@ 0x5a
 8001dea:	4980      	ldr	r1, [pc, #512]	@ (8001fec <main+0x28c>)
 8001dec:	4880      	ldr	r0, [pc, #512]	@ (8001ff0 <main+0x290>)
 8001dee:	f7ff f94d 	bl	800108c <ILI9341_DrawText>
  HAL_Delay(500);
 8001df2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001df6:	f000 fee3 	bl	8002bc0 <HAL_Delay>
  // Horizontal Line (X, Y, Length, Color)
  HAL_Delay(500);
 8001dfa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001dfe:	f000 fedf 	bl	8002bc0 <HAL_Delay>
  ILI9341_FillScreen(DARKCYAN);
 8001e02:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8001e06:	f7ff fc8d 	bl	8001724 <ILI9341_FillScreen>

  /*****DRAW DEFAULT DISPLAY FOR ILI9341 ******/
  ILI9341_DrawHollowCircle(50, 50, 40, GREEN);
 8001e0a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001e0e:	2228      	movs	r2, #40	@ 0x28
 8001e10:	2132      	movs	r1, #50	@ 0x32
 8001e12:	2032      	movs	r0, #50	@ 0x32
 8001e14:	f7ff f80c 	bl	8000e30 <ILI9341_DrawHollowCircle>
  ILI9341_FillScreen(WHITE);
 8001e18:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e1c:	f7ff fc82 	bl	8001724 <ILI9341_FillScreen>
  uint8_t TxData[32] = {'\0'};
 8001e20:	2300      	movs	r3, #0
 8001e22:	623b      	str	r3, [r7, #32]
 8001e24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
 8001e34:	615a      	str	r2, [r3, #20]
 8001e36:	619a      	str	r2, [r3, #24]
  uint8_t MSG[32] = {'\0'};
 8001e38:	2300      	movs	r3, #0
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	1d3b      	adds	r3, r7, #4
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	60da      	str	r2, [r3, #12]
 8001e48:	611a      	str	r2, [r3, #16]
 8001e4a:	615a      	str	r2, [r3, #20]
 8001e4c:	619a      	str	r2, [r3, #24]

  //LCD Display
  Display_Temp(Temperature);
 8001e4e:	4b69      	ldr	r3, [pc, #420]	@ (8001ff4 <main+0x294>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fe68 	bl	8001b28 <Display_Temp>
  Display_Rh(Humidity);
 8001e58:	4b67      	ldr	r3, [pc, #412]	@ (8001ff8 <main+0x298>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fe89 	bl	8001b74 <Display_Rh>
  Display_Soil(readValue);
 8001e62:	4b66      	ldr	r3, [pc, #408]	@ (8001ffc <main+0x29c>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe ff34 	bl	8000cd4 <__aeabi_ui2f>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fe34 	bl	8001adc <Display_Soil>

    /* USER CODE BEGIN 3 */
	/********DHT11 DISPLAY PARAMETER********/

 	/***READ VALUE FROM DHT11*****/
 	DHT11_Start();
 8001e74:	f7ff fede 	bl	8001c34 <DHT11_Start>
 	Presence = DHT11_Check_Response();
 8001e78:	f7ff fefc 	bl	8001c74 <DHT11_Check_Response>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4b5f      	ldr	r3, [pc, #380]	@ (8002000 <main+0x2a0>)
 8001e82:	701a      	strb	r2, [r3, #0]
 	Rh_byte1 = DHT11_Read ();
 8001e84:	f7ff ff24 	bl	8001cd0 <DHT11_Read>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4b5d      	ldr	r3, [pc, #372]	@ (8002004 <main+0x2a4>)
 8001e8e:	701a      	strb	r2, [r3, #0]
 	Rh_byte2 = DHT11_Read ();
 8001e90:	f7ff ff1e 	bl	8001cd0 <DHT11_Read>
 8001e94:	4603      	mov	r3, r0
 8001e96:	461a      	mov	r2, r3
 8001e98:	4b5b      	ldr	r3, [pc, #364]	@ (8002008 <main+0x2a8>)
 8001e9a:	701a      	strb	r2, [r3, #0]
 	Temp_byte1 = DHT11_Read ();
 8001e9c:	f7ff ff18 	bl	8001cd0 <DHT11_Read>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b59      	ldr	r3, [pc, #356]	@ (800200c <main+0x2ac>)
 8001ea6:	701a      	strb	r2, [r3, #0]
 	Temp_byte2 = DHT11_Read ();
 8001ea8:	f7ff ff12 	bl	8001cd0 <DHT11_Read>
 8001eac:	4603      	mov	r3, r0
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4b57      	ldr	r3, [pc, #348]	@ (8002010 <main+0x2b0>)
 8001eb2:	701a      	strb	r2, [r3, #0]
 	SUM = DHT11_Read();
 8001eb4:	f7ff ff0c 	bl	8001cd0 <DHT11_Read>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	461a      	mov	r2, r3
 8001ebc:	4b55      	ldr	r3, [pc, #340]	@ (8002014 <main+0x2b4>)
 8001ebe:	801a      	strh	r2, [r3, #0]
 	//Checksum reader
 	TEMP = Temp_byte1;
 8001ec0:	4b52      	ldr	r3, [pc, #328]	@ (800200c <main+0x2ac>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b54      	ldr	r3, [pc, #336]	@ (8002018 <main+0x2b8>)
 8001ec8:	801a      	strh	r2, [r3, #0]
 	RH = Rh_byte1;
 8001eca:	4b4e      	ldr	r3, [pc, #312]	@ (8002004 <main+0x2a4>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4b52      	ldr	r3, [pc, #328]	@ (800201c <main+0x2bc>)
 8001ed2:	801a      	strh	r2, [r3, #0]
 	//Change to float value
 	Temperature = (float) TEMP;
 8001ed4:	4b50      	ldr	r3, [pc, #320]	@ (8002018 <main+0x2b8>)
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe fefb 	bl	8000cd4 <__aeabi_ui2f>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4a44      	ldr	r2, [pc, #272]	@ (8001ff4 <main+0x294>)
 8001ee2:	6013      	str	r3, [r2, #0]
 	Humidity = (float) RH;
 8001ee4:	4b4d      	ldr	r3, [pc, #308]	@ (800201c <main+0x2bc>)
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fef3 	bl	8000cd4 <__aeabi_ui2f>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	4a41      	ldr	r2, [pc, #260]	@ (8001ff8 <main+0x298>)
 8001ef2:	6013      	str	r3, [r2, #0]
 	HAL_Delay(1000);
 8001ef4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ef8:	f000 fe62 	bl	8002bc0 <HAL_Delay>
 	/************DISPLAY ON ILI9341*********************/
 	static char BufferText1[30];
 	static char BufferText2[30];
 	static char BufferText3[30];

 	sprintf(BufferText1, "SOIL : %.2f", readValue);
 8001efc:	4b3f      	ldr	r3, [pc, #252]	@ (8001ffc <main+0x29c>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	4947      	ldr	r1, [pc, #284]	@ (8002020 <main+0x2c0>)
 8001f04:	4847      	ldr	r0, [pc, #284]	@ (8002024 <main+0x2c4>)
 8001f06:	f005 fc71 	bl	80077ec <siprintf>
 	ILI9341_DrawText(BufferText1, FONT4, 80, 80, BLACK, WHITE);
 8001f0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	2300      	movs	r3, #0
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	2350      	movs	r3, #80	@ 0x50
 8001f16:	2250      	movs	r2, #80	@ 0x50
 8001f18:	4934      	ldr	r1, [pc, #208]	@ (8001fec <main+0x28c>)
 8001f1a:	4842      	ldr	r0, [pc, #264]	@ (8002024 <main+0x2c4>)
 8001f1c:	f7ff f8b6 	bl	800108c <ILI9341_DrawText>
 	sprintf(BufferText2, "HUMID : %.2f", Humidity);
 8001f20:	4b35      	ldr	r3, [pc, #212]	@ (8001ff8 <main+0x298>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fa7f 	bl	8000428 <__aeabi_f2d>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	493e      	ldr	r1, [pc, #248]	@ (8002028 <main+0x2c8>)
 8001f30:	483e      	ldr	r0, [pc, #248]	@ (800202c <main+0x2cc>)
 8001f32:	f005 fc5b 	bl	80077ec <siprintf>
 	ILI9341_DrawText(BufferText2, FONT4, 120, 120, BLACK, WHITE);
 8001f36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	2378      	movs	r3, #120	@ 0x78
 8001f42:	2278      	movs	r2, #120	@ 0x78
 8001f44:	4929      	ldr	r1, [pc, #164]	@ (8001fec <main+0x28c>)
 8001f46:	4839      	ldr	r0, [pc, #228]	@ (800202c <main+0x2cc>)
 8001f48:	f7ff f8a0 	bl	800108c <ILI9341_DrawText>
 	sprintf(BufferText3, "TEMP : %.2f", Temperature);
 8001f4c:	4b29      	ldr	r3, [pc, #164]	@ (8001ff4 <main+0x294>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe fa69 	bl	8000428 <__aeabi_f2d>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4935      	ldr	r1, [pc, #212]	@ (8002030 <main+0x2d0>)
 8001f5c:	4835      	ldr	r0, [pc, #212]	@ (8002034 <main+0x2d4>)
 8001f5e:	f005 fc45 	bl	80077ec <siprintf>
 	ILI9341_DrawText(BufferText3, FONT4, 160, 40, BLACK, WHITE);
 8001f62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f66:	9301      	str	r3, [sp, #4]
 8001f68:	2300      	movs	r3, #0
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	2328      	movs	r3, #40	@ 0x28
 8001f6e:	22a0      	movs	r2, #160	@ 0xa0
 8001f70:	491e      	ldr	r1, [pc, #120]	@ (8001fec <main+0x28c>)
 8001f72:	4830      	ldr	r0, [pc, #192]	@ (8002034 <main+0x2d4>)
 8001f74:	f7ff f88a 	bl	800108c <ILI9341_DrawText>

 	/********************************/
 	/**** Typecasting Data**********/


 	soilvalue = (uint8_t)readValue;
 8001f78:	4b20      	ldr	r3, [pc, #128]	@ (8001ffc <main+0x29c>)
 8001f7a:	781a      	ldrb	r2, [r3, #0]
 8001f7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002038 <main+0x2d8>)
 8001f7e:	701a      	strb	r2, [r3, #0]
 	temp =(uint8_t)Temperature;
 8001f80:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff4 <main+0x294>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fefd 	bl	8000d84 <__aeabi_f2uiz>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800203c <main+0x2dc>)
 8001f90:	701a      	strb	r2, [r3, #0]
 	humid = (uint8_t)Humidity;
 8001f92:	4b19      	ldr	r3, [pc, #100]	@ (8001ff8 <main+0x298>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fef4 	bl	8000d84 <__aeabi_f2uiz>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	4b27      	ldr	r3, [pc, #156]	@ (8002040 <main+0x2e0>)
 8001fa2:	701a      	strb	r2, [r3, #0]

 	/***** UART Transmittion ***********/
	  sprintf(TxData, "%d%d%d\r\n ",temp,humid,soilvalue);
 8001fa4:	4b25      	ldr	r3, [pc, #148]	@ (800203c <main+0x2dc>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b25      	ldr	r3, [pc, #148]	@ (8002040 <main+0x2e0>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4b21      	ldr	r3, [pc, #132]	@ (8002038 <main+0x2d8>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	f107 0020 	add.w	r0, r7, #32
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4921      	ldr	r1, [pc, #132]	@ (8002044 <main+0x2e4>)
 8001fbe:	f005 fc15 	bl	80077ec <siprintf>
	  HAL_UART_Transmit_IT(&huart1,TxData, sizeof(TxData));
 8001fc2:	f107 0320 	add.w	r3, r7, #32
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	4619      	mov	r1, r3
 8001fca:	481f      	ldr	r0, [pc, #124]	@ (8002048 <main+0x2e8>)
 8001fcc:	f003 ffc8 	bl	8005f60 <HAL_UART_Transmit_IT>
	  HAL_Delay(500);
 8001fd0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001fd4:	f000 fdf4 	bl	8002bc0 <HAL_Delay>
  {
 8001fd8:	bf00      	nop
 8001fda:	e74b      	b.n	8001e74 <main+0x114>
 8001fdc:	20000318 	.word	0x20000318
 8001fe0:	200001f8 	.word	0x200001f8
 8001fe4:	0800b078 	.word	0x0800b078
 8001fe8:	0800b088 	.word	0x0800b088
 8001fec:	0800b0d4 	.word	0x0800b0d4
 8001ff0:	0800b094 	.word	0x0800b094
 8001ff4:	200003f8 	.word	0x200003f8
 8001ff8:	200003fc 	.word	0x200003fc
 8001ffc:	200001f4 	.word	0x200001f4
 8002000:	20000400 	.word	0x20000400
 8002004:	200003ec 	.word	0x200003ec
 8002008:	200003ed 	.word	0x200003ed
 800200c:	200003ee 	.word	0x200003ee
 8002010:	200003ef 	.word	0x200003ef
 8002014:	200003f0 	.word	0x200003f0
 8002018:	200003f4 	.word	0x200003f4
 800201c:	200003f2 	.word	0x200003f2
 8002020:	0800b0a0 	.word	0x0800b0a0
 8002024:	20000404 	.word	0x20000404
 8002028:	0800b0ac 	.word	0x0800b0ac
 800202c:	20000424 	.word	0x20000424
 8002030:	0800b0bc 	.word	0x0800b0bc
 8002034:	20000444 	.word	0x20000444
 8002038:	20000403 	.word	0x20000403
 800203c:	20000401 	.word	0x20000401
 8002040:	20000402 	.word	0x20000402
 8002044:	0800b0c8 	.word	0x0800b0c8
 8002048:	20000360 	.word	0x20000360

0800204c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b094      	sub	sp, #80	@ 0x50
 8002050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002052:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002056:	2228      	movs	r2, #40	@ 0x28
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f005 fc29 	bl	80078b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800207c:	2301      	movs	r3, #1
 800207e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002080:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002084:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002086:	2300      	movs	r3, #0
 8002088:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800208a:	2301      	movs	r3, #1
 800208c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800208e:	2302      	movs	r3, #2
 8002090:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002092:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002096:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8002098:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 800209c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800209e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020a2:	4618      	mov	r0, r3
 80020a4:	f002 faca 	bl	800463c <HAL_RCC_OscConfig>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80020ae:	f000 fa05 	bl	80024bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020b2:	230f      	movs	r3, #15
 80020b4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020b6:	2302      	movs	r3, #2
 80020b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020c4:	2300      	movs	r3, #0
 80020c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	2102      	movs	r1, #2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f002 fd36 	bl	8004b40 <HAL_RCC_ClockConfig>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <SystemClock_Config+0x92>
  {
    Error_Handler();
 80020da:	f000 f9ef 	bl	80024bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80020de:	2302      	movs	r3, #2
 80020e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80020e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020e6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	4618      	mov	r0, r3
 80020ec:	f002 feb6 	bl	8004e5c <HAL_RCCEx_PeriphCLKConfig>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80020f6:	f000 f9e1 	bl	80024bc <Error_Handler>
  }
}
 80020fa:	bf00      	nop
 80020fc:	3750      	adds	r7, #80	@ 0x50
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002114:	4b18      	ldr	r3, [pc, #96]	@ (8002178 <MX_ADC1_Init+0x74>)
 8002116:	4a19      	ldr	r2, [pc, #100]	@ (800217c <MX_ADC1_Init+0x78>)
 8002118:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800211a:	4b17      	ldr	r3, [pc, #92]	@ (8002178 <MX_ADC1_Init+0x74>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002120:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <MX_ADC1_Init+0x74>)
 8002122:	2200      	movs	r2, #0
 8002124:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002126:	4b14      	ldr	r3, [pc, #80]	@ (8002178 <MX_ADC1_Init+0x74>)
 8002128:	2200      	movs	r2, #0
 800212a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800212c:	4b12      	ldr	r3, [pc, #72]	@ (8002178 <MX_ADC1_Init+0x74>)
 800212e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8002132:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002134:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <MX_ADC1_Init+0x74>)
 8002136:	2200      	movs	r2, #0
 8002138:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800213a:	4b0f      	ldr	r3, [pc, #60]	@ (8002178 <MX_ADC1_Init+0x74>)
 800213c:	2201      	movs	r2, #1
 800213e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002140:	480d      	ldr	r0, [pc, #52]	@ (8002178 <MX_ADC1_Init+0x74>)
 8002142:	f000 fd61 	bl	8002c08 <HAL_ADC_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800214c:	f000 f9b6 	bl	80024bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002150:	2300      	movs	r3, #0
 8002152:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002154:	2301      	movs	r3, #1
 8002156:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	4619      	mov	r1, r3
 8002160:	4805      	ldr	r0, [pc, #20]	@ (8002178 <MX_ADC1_Init+0x74>)
 8002162:	f000 fed7 	bl	8002f14 <HAL_ADC_ConfigChannel>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800216c:	f000 f9a6 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	200001f8 	.word	0x200001f8
 800217c:	40012400 	.word	0x40012400

08002180 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002184:	4b12      	ldr	r3, [pc, #72]	@ (80021d0 <MX_I2C1_Init+0x50>)
 8002186:	4a13      	ldr	r2, [pc, #76]	@ (80021d4 <MX_I2C1_Init+0x54>)
 8002188:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800218a:	4b11      	ldr	r3, [pc, #68]	@ (80021d0 <MX_I2C1_Init+0x50>)
 800218c:	4a12      	ldr	r2, [pc, #72]	@ (80021d8 <MX_I2C1_Init+0x58>)
 800218e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002190:	4b0f      	ldr	r3, [pc, #60]	@ (80021d0 <MX_I2C1_Init+0x50>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002196:	4b0e      	ldr	r3, [pc, #56]	@ (80021d0 <MX_I2C1_Init+0x50>)
 8002198:	2200      	movs	r2, #0
 800219a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800219c:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <MX_I2C1_Init+0x50>)
 800219e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021a4:	4b0a      	ldr	r3, [pc, #40]	@ (80021d0 <MX_I2C1_Init+0x50>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021aa:	4b09      	ldr	r3, [pc, #36]	@ (80021d0 <MX_I2C1_Init+0x50>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021b0:	4b07      	ldr	r3, [pc, #28]	@ (80021d0 <MX_I2C1_Init+0x50>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021b6:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <MX_I2C1_Init+0x50>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021bc:	4804      	ldr	r0, [pc, #16]	@ (80021d0 <MX_I2C1_Init+0x50>)
 80021be:	f001 fda1 	bl	8003d04 <HAL_I2C_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021c8:	f000 f978 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000228 	.word	0x20000228
 80021d4:	40005400 	.word	0x40005400
 80021d8:	000186a0 	.word	0x000186a0

080021dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80021e0:	4b17      	ldr	r3, [pc, #92]	@ (8002240 <MX_SPI1_Init+0x64>)
 80021e2:	4a18      	ldr	r2, [pc, #96]	@ (8002244 <MX_SPI1_Init+0x68>)
 80021e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021e6:	4b16      	ldr	r3, [pc, #88]	@ (8002240 <MX_SPI1_Init+0x64>)
 80021e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80021ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021ee:	4b14      	ldr	r3, [pc, #80]	@ (8002240 <MX_SPI1_Init+0x64>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021f4:	4b12      	ldr	r3, [pc, #72]	@ (8002240 <MX_SPI1_Init+0x64>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021fa:	4b11      	ldr	r3, [pc, #68]	@ (8002240 <MX_SPI1_Init+0x64>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002200:	4b0f      	ldr	r3, [pc, #60]	@ (8002240 <MX_SPI1_Init+0x64>)
 8002202:	2200      	movs	r2, #0
 8002204:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002206:	4b0e      	ldr	r3, [pc, #56]	@ (8002240 <MX_SPI1_Init+0x64>)
 8002208:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800220c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800220e:	4b0c      	ldr	r3, [pc, #48]	@ (8002240 <MX_SPI1_Init+0x64>)
 8002210:	2208      	movs	r2, #8
 8002212:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002214:	4b0a      	ldr	r3, [pc, #40]	@ (8002240 <MX_SPI1_Init+0x64>)
 8002216:	2200      	movs	r2, #0
 8002218:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800221a:	4b09      	ldr	r3, [pc, #36]	@ (8002240 <MX_SPI1_Init+0x64>)
 800221c:	2200      	movs	r2, #0
 800221e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002220:	4b07      	ldr	r3, [pc, #28]	@ (8002240 <MX_SPI1_Init+0x64>)
 8002222:	2200      	movs	r2, #0
 8002224:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002226:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <MX_SPI1_Init+0x64>)
 8002228:	220a      	movs	r2, #10
 800222a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800222c:	4804      	ldr	r0, [pc, #16]	@ (8002240 <MX_SPI1_Init+0x64>)
 800222e:	f002 fecb 	bl	8004fc8 <HAL_SPI_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002238:	f000 f940 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}
 8002240:	2000027c 	.word	0x2000027c
 8002244:	40013000 	.word	0x40013000

08002248 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800224e:	f107 0308 	add.w	r3, r7, #8
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800225c:	463b      	mov	r3, r7
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002264:	4b1e      	ldr	r3, [pc, #120]	@ (80022e0 <MX_TIM1_Init+0x98>)
 8002266:	4a1f      	ldr	r2, [pc, #124]	@ (80022e4 <MX_TIM1_Init+0x9c>)
 8002268:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 800226a:	4b1d      	ldr	r3, [pc, #116]	@ (80022e0 <MX_TIM1_Init+0x98>)
 800226c:	223f      	movs	r2, #63	@ 0x3f
 800226e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002270:	4b1b      	ldr	r3, [pc, #108]	@ (80022e0 <MX_TIM1_Init+0x98>)
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65536-1;
 8002276:	4b1a      	ldr	r3, [pc, #104]	@ (80022e0 <MX_TIM1_Init+0x98>)
 8002278:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800227c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800227e:	4b18      	ldr	r3, [pc, #96]	@ (80022e0 <MX_TIM1_Init+0x98>)
 8002280:	2200      	movs	r2, #0
 8002282:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002284:	4b16      	ldr	r3, [pc, #88]	@ (80022e0 <MX_TIM1_Init+0x98>)
 8002286:	2200      	movs	r2, #0
 8002288:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800228a:	4b15      	ldr	r3, [pc, #84]	@ (80022e0 <MX_TIM1_Init+0x98>)
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002290:	4813      	ldr	r0, [pc, #76]	@ (80022e0 <MX_TIM1_Init+0x98>)
 8002292:	f003 fb52 	bl	800593a <HAL_TIM_Base_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800229c:	f000 f90e 	bl	80024bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022a6:	f107 0308 	add.w	r3, r7, #8
 80022aa:	4619      	mov	r1, r3
 80022ac:	480c      	ldr	r0, [pc, #48]	@ (80022e0 <MX_TIM1_Init+0x98>)
 80022ae:	f003 fbdd 	bl	8005a6c <HAL_TIM_ConfigClockSource>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80022b8:	f000 f900 	bl	80024bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022bc:	2300      	movs	r3, #0
 80022be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022c4:	463b      	mov	r3, r7
 80022c6:	4619      	mov	r1, r3
 80022c8:	4805      	ldr	r0, [pc, #20]	@ (80022e0 <MX_TIM1_Init+0x98>)
 80022ca:	f003 fd9b 	bl	8005e04 <HAL_TIMEx_MasterConfigSynchronization>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80022d4:	f000 f8f2 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80022d8:	bf00      	nop
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000318 	.word	0x20000318
 80022e4:	40012c00 	.word	0x40012c00

080022e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022ec:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 80022ee:	4a12      	ldr	r2, [pc, #72]	@ (8002338 <MX_USART1_UART_Init+0x50>)
 80022f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022f2:	4b10      	ldr	r3, [pc, #64]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 80022f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002300:	4b0c      	ldr	r3, [pc, #48]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002306:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800230c:	4b09      	ldr	r3, [pc, #36]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 800230e:	220c      	movs	r2, #12
 8002310:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002312:	4b08      	ldr	r3, [pc, #32]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002318:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 800231a:	2200      	movs	r2, #0
 800231c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800231e:	4805      	ldr	r0, [pc, #20]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 8002320:	f003 fdce 	bl	8005ec0 <HAL_UART_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800232a:	f000 f8c7 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000360 	.word	0x20000360
 8002338:	40013800 	.word	0x40013800

0800233c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002342:	4b10      	ldr	r3, [pc, #64]	@ (8002384 <MX_DMA_Init+0x48>)
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	4a0f      	ldr	r2, [pc, #60]	@ (8002384 <MX_DMA_Init+0x48>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6153      	str	r3, [r2, #20]
 800234e:	4b0d      	ldr	r3, [pc, #52]	@ (8002384 <MX_DMA_Init+0x48>)
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	607b      	str	r3, [r7, #4]
 8002358:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800235a:	2200      	movs	r2, #0
 800235c:	2100      	movs	r1, #0
 800235e:	200d      	movs	r0, #13
 8002360:	f001 f843 	bl	80033ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002364:	200d      	movs	r0, #13
 8002366:	f001 f85c 	bl	8003422 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	200e      	movs	r0, #14
 8002370:	f001 f83b 	bl	80033ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002374:	200e      	movs	r0, #14
 8002376:	f001 f854 	bl	8003422 <HAL_NVIC_EnableIRQ>

}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40021000 	.word	0x40021000

08002388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238e:	f107 0310 	add.w	r3, r7, #16
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800239c:	4b44      	ldr	r3, [pc, #272]	@ (80024b0 <MX_GPIO_Init+0x128>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	4a43      	ldr	r2, [pc, #268]	@ (80024b0 <MX_GPIO_Init+0x128>)
 80023a2:	f043 0310 	orr.w	r3, r3, #16
 80023a6:	6193      	str	r3, [r2, #24]
 80023a8:	4b41      	ldr	r3, [pc, #260]	@ (80024b0 <MX_GPIO_Init+0x128>)
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	f003 0310 	and.w	r3, r3, #16
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023b4:	4b3e      	ldr	r3, [pc, #248]	@ (80024b0 <MX_GPIO_Init+0x128>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	4a3d      	ldr	r2, [pc, #244]	@ (80024b0 <MX_GPIO_Init+0x128>)
 80023ba:	f043 0320 	orr.w	r3, r3, #32
 80023be:	6193      	str	r3, [r2, #24]
 80023c0:	4b3b      	ldr	r3, [pc, #236]	@ (80024b0 <MX_GPIO_Init+0x128>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f003 0320 	and.w	r3, r3, #32
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023cc:	4b38      	ldr	r3, [pc, #224]	@ (80024b0 <MX_GPIO_Init+0x128>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	4a37      	ldr	r2, [pc, #220]	@ (80024b0 <MX_GPIO_Init+0x128>)
 80023d2:	f043 0304 	orr.w	r3, r3, #4
 80023d6:	6193      	str	r3, [r2, #24]
 80023d8:	4b35      	ldr	r3, [pc, #212]	@ (80024b0 <MX_GPIO_Init+0x128>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e4:	4b32      	ldr	r3, [pc, #200]	@ (80024b0 <MX_GPIO_Init+0x128>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	4a31      	ldr	r2, [pc, #196]	@ (80024b0 <MX_GPIO_Init+0x128>)
 80023ea:	f043 0308 	orr.w	r3, r3, #8
 80023ee:	6193      	str	r3, [r2, #24]
 80023f0:	4b2f      	ldr	r3, [pc, #188]	@ (80024b0 <MX_GPIO_Init+0x128>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	603b      	str	r3, [r7, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80023fc:	2201      	movs	r2, #1
 80023fe:	2102      	movs	r1, #2
 8002400:	482c      	ldr	r0, [pc, #176]	@ (80024b4 <MX_GPIO_Init+0x12c>)
 8002402:	f001 fc66 	bl	8003cd2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|DC_Pin|RST_Pin|RELAY_2_Pin
 8002406:	2200      	movs	r2, #0
 8002408:	f641 4158 	movw	r1, #7256	@ 0x1c58
 800240c:	4829      	ldr	r0, [pc, #164]	@ (80024b4 <MX_GPIO_Init+0x12c>)
 800240e:	f001 fc60 	bl	8003cd2 <HAL_GPIO_WritePin>
                          |RELAY_1_Pin|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8002412:	2200      	movs	r2, #0
 8002414:	2104      	movs	r1, #4
 8002416:	4828      	ldr	r0, [pc, #160]	@ (80024b8 <MX_GPIO_Init+0x130>)
 8002418:	f001 fc5b 	bl	8003cd2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800241c:	2302      	movs	r3, #2
 800241e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002420:	2301      	movs	r3, #1
 8002422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002424:	2301      	movs	r3, #1
 8002426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002428:	2302      	movs	r3, #2
 800242a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242c:	f107 0310 	add.w	r3, r7, #16
 8002430:	4619      	mov	r1, r3
 8002432:	4820      	ldr	r0, [pc, #128]	@ (80024b4 <MX_GPIO_Init+0x12c>)
 8002434:	f001 fab2 	bl	800399c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin RELAY_2_Pin RELAY_1_Pin PA12 */
  GPIO_InitStruct.Pin = CS_Pin|RELAY_2_Pin|RELAY_1_Pin|GPIO_PIN_12;
 8002438:	f641 4308 	movw	r3, #7176	@ 0x1c08
 800243c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800243e:	2301      	movs	r3, #1
 8002440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002446:	2302      	movs	r3, #2
 8002448:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244a:	f107 0310 	add.w	r3, r7, #16
 800244e:	4619      	mov	r1, r3
 8002450:	4818      	ldr	r0, [pc, #96]	@ (80024b4 <MX_GPIO_Init+0x12c>)
 8002452:	f001 faa3 	bl	800399c <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_Pin RST_Pin */
  GPIO_InitStruct.Pin = DC_Pin|RST_Pin;
 8002456:	2350      	movs	r3, #80	@ 0x50
 8002458:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245a:	2301      	movs	r3, #1
 800245c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002462:	2303      	movs	r3, #3
 8002464:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002466:	f107 0310 	add.w	r3, r7, #16
 800246a:	4619      	mov	r1, r3
 800246c:	4811      	ldr	r0, [pc, #68]	@ (80024b4 <MX_GPIO_Init+0x12c>)
 800246e:	f001 fa95 	bl	800399c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002472:	2304      	movs	r3, #4
 8002474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002476:	2301      	movs	r3, #1
 8002478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247e:	2302      	movs	r3, #2
 8002480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002482:	f107 0310 	add.w	r3, r7, #16
 8002486:	4619      	mov	r1, r3
 8002488:	480b      	ldr	r0, [pc, #44]	@ (80024b8 <MX_GPIO_Init+0x130>)
 800248a:	f001 fa87 	bl	800399c <HAL_GPIO_Init>

  /*Configure GPIO pins : RAIN_Pin FIRE_GAS_Pin */
  GPIO_InitStruct.Pin = RAIN_Pin|FIRE_GAS_Pin;
 800248e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249c:	f107 0310 	add.w	r3, r7, #16
 80024a0:	4619      	mov	r1, r3
 80024a2:	4804      	ldr	r0, [pc, #16]	@ (80024b4 <MX_GPIO_Init+0x12c>)
 80024a4:	f001 fa7a 	bl	800399c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024a8:	bf00      	nop
 80024aa:	3720      	adds	r7, #32
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40010800 	.word	0x40010800
 80024b8:	40010c00 	.word	0x40010c00

080024bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024c0:	b672      	cpsid	i
}
 80024c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024c4:	bf00      	nop
 80024c6:	e7fd      	b.n	80024c4 <Error_Handler+0x8>

080024c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024ce:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <HAL_MspInit+0x5c>)
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	4a14      	ldr	r2, [pc, #80]	@ (8002524 <HAL_MspInit+0x5c>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	6193      	str	r3, [r2, #24]
 80024da:	4b12      	ldr	r3, [pc, #72]	@ (8002524 <HAL_MspInit+0x5c>)
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002524 <HAL_MspInit+0x5c>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002524 <HAL_MspInit+0x5c>)
 80024ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024f0:	61d3      	str	r3, [r2, #28]
 80024f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002524 <HAL_MspInit+0x5c>)
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024fa:	607b      	str	r3, [r7, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002528 <HAL_MspInit+0x60>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	4a04      	ldr	r2, [pc, #16]	@ (8002528 <HAL_MspInit+0x60>)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr
 8002524:	40021000 	.word	0x40021000
 8002528:	40010000 	.word	0x40010000

0800252c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	f107 0310 	add.w	r3, r7, #16
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a14      	ldr	r2, [pc, #80]	@ (8002598 <HAL_ADC_MspInit+0x6c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d121      	bne.n	8002590 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800254c:	4b13      	ldr	r3, [pc, #76]	@ (800259c <HAL_ADC_MspInit+0x70>)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	4a12      	ldr	r2, [pc, #72]	@ (800259c <HAL_ADC_MspInit+0x70>)
 8002552:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002556:	6193      	str	r3, [r2, #24]
 8002558:	4b10      	ldr	r3, [pc, #64]	@ (800259c <HAL_ADC_MspInit+0x70>)
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002564:	4b0d      	ldr	r3, [pc, #52]	@ (800259c <HAL_ADC_MspInit+0x70>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	4a0c      	ldr	r2, [pc, #48]	@ (800259c <HAL_ADC_MspInit+0x70>)
 800256a:	f043 0304 	orr.w	r3, r3, #4
 800256e:	6193      	str	r3, [r2, #24]
 8002570:	4b0a      	ldr	r3, [pc, #40]	@ (800259c <HAL_ADC_MspInit+0x70>)
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800257c:	2301      	movs	r3, #1
 800257e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002580:	2303      	movs	r3, #3
 8002582:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002584:	f107 0310 	add.w	r3, r7, #16
 8002588:	4619      	mov	r1, r3
 800258a:	4805      	ldr	r0, [pc, #20]	@ (80025a0 <HAL_ADC_MspInit+0x74>)
 800258c:	f001 fa06 	bl	800399c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002590:	bf00      	nop
 8002592:	3720      	adds	r7, #32
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40012400 	.word	0x40012400
 800259c:	40021000 	.word	0x40021000
 80025a0:	40010800 	.word	0x40010800

080025a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	@ 0x28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1d      	ldr	r2, [pc, #116]	@ (8002634 <HAL_I2C_MspInit+0x90>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d132      	bne.n	800262a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002638 <HAL_I2C_MspInit+0x94>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002638 <HAL_I2C_MspInit+0x94>)
 80025ca:	f043 0308 	orr.w	r3, r3, #8
 80025ce:	6193      	str	r3, [r2, #24]
 80025d0:	4b19      	ldr	r3, [pc, #100]	@ (8002638 <HAL_I2C_MspInit+0x94>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80025e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025e2:	2312      	movs	r3, #18
 80025e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025e6:	2303      	movs	r3, #3
 80025e8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ea:	f107 0314 	add.w	r3, r7, #20
 80025ee:	4619      	mov	r1, r3
 80025f0:	4812      	ldr	r0, [pc, #72]	@ (800263c <HAL_I2C_MspInit+0x98>)
 80025f2:	f001 f9d3 	bl	800399c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80025f6:	4b12      	ldr	r3, [pc, #72]	@ (8002640 <HAL_I2C_MspInit+0x9c>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80025fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fe:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002602:	627b      	str	r3, [r7, #36]	@ 0x24
 8002604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002606:	f043 0302 	orr.w	r3, r3, #2
 800260a:	627b      	str	r3, [r7, #36]	@ 0x24
 800260c:	4a0c      	ldr	r2, [pc, #48]	@ (8002640 <HAL_I2C_MspInit+0x9c>)
 800260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002610:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002612:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <HAL_I2C_MspInit+0x94>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	4a08      	ldr	r2, [pc, #32]	@ (8002638 <HAL_I2C_MspInit+0x94>)
 8002618:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800261c:	61d3      	str	r3, [r2, #28]
 800261e:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <HAL_I2C_MspInit+0x94>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800262a:	bf00      	nop
 800262c:	3728      	adds	r7, #40	@ 0x28
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40005400 	.word	0x40005400
 8002638:	40021000 	.word	0x40021000
 800263c:	40010c00 	.word	0x40010c00
 8002640:	40010000 	.word	0x40010000

08002644 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 0310 	add.w	r3, r7, #16
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a2c      	ldr	r2, [pc, #176]	@ (8002710 <HAL_SPI_MspInit+0xcc>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d151      	bne.n	8002708 <HAL_SPI_MspInit+0xc4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002664:	4b2b      	ldr	r3, [pc, #172]	@ (8002714 <HAL_SPI_MspInit+0xd0>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	4a2a      	ldr	r2, [pc, #168]	@ (8002714 <HAL_SPI_MspInit+0xd0>)
 800266a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800266e:	6193      	str	r3, [r2, #24]
 8002670:	4b28      	ldr	r3, [pc, #160]	@ (8002714 <HAL_SPI_MspInit+0xd0>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267c:	4b25      	ldr	r3, [pc, #148]	@ (8002714 <HAL_SPI_MspInit+0xd0>)
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	4a24      	ldr	r2, [pc, #144]	@ (8002714 <HAL_SPI_MspInit+0xd0>)
 8002682:	f043 0304 	orr.w	r3, r3, #4
 8002686:	6193      	str	r3, [r2, #24]
 8002688:	4b22      	ldr	r3, [pc, #136]	@ (8002714 <HAL_SPI_MspInit+0xd0>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002694:	23a0      	movs	r3, #160	@ 0xa0
 8002696:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800269c:	2303      	movs	r3, #3
 800269e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a0:	f107 0310 	add.w	r3, r7, #16
 80026a4:	4619      	mov	r1, r3
 80026a6:	481c      	ldr	r0, [pc, #112]	@ (8002718 <HAL_SPI_MspInit+0xd4>)
 80026a8:	f001 f978 	bl	800399c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80026ac:	4b1b      	ldr	r3, [pc, #108]	@ (800271c <HAL_SPI_MspInit+0xd8>)
 80026ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002720 <HAL_SPI_MspInit+0xdc>)
 80026b0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026b2:	4b1a      	ldr	r3, [pc, #104]	@ (800271c <HAL_SPI_MspInit+0xd8>)
 80026b4:	2210      	movs	r2, #16
 80026b6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026b8:	4b18      	ldr	r3, [pc, #96]	@ (800271c <HAL_SPI_MspInit+0xd8>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026be:	4b17      	ldr	r3, [pc, #92]	@ (800271c <HAL_SPI_MspInit+0xd8>)
 80026c0:	2280      	movs	r2, #128	@ 0x80
 80026c2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026c4:	4b15      	ldr	r3, [pc, #84]	@ (800271c <HAL_SPI_MspInit+0xd8>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026ca:	4b14      	ldr	r3, [pc, #80]	@ (800271c <HAL_SPI_MspInit+0xd8>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80026d0:	4b12      	ldr	r3, [pc, #72]	@ (800271c <HAL_SPI_MspInit+0xd8>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026d6:	4b11      	ldr	r3, [pc, #68]	@ (800271c <HAL_SPI_MspInit+0xd8>)
 80026d8:	2200      	movs	r2, #0
 80026da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80026dc:	480f      	ldr	r0, [pc, #60]	@ (800271c <HAL_SPI_MspInit+0xd8>)
 80026de:	f000 febb 	bl	8003458 <HAL_DMA_Init>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 80026e8:	f7ff fee8 	bl	80024bc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a0b      	ldr	r2, [pc, #44]	@ (800271c <HAL_SPI_MspInit+0xd8>)
 80026f0:	649a      	str	r2, [r3, #72]	@ 0x48
 80026f2:	4a0a      	ldr	r2, [pc, #40]	@ (800271c <HAL_SPI_MspInit+0xd8>)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 80026f8:	2200      	movs	r2, #0
 80026fa:	2103      	movs	r1, #3
 80026fc:	2023      	movs	r0, #35	@ 0x23
 80026fe:	f000 fe74 	bl	80033ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002702:	2023      	movs	r0, #35	@ 0x23
 8002704:	f000 fe8d 	bl	8003422 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002708:	bf00      	nop
 800270a:	3720      	adds	r7, #32
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40013000 	.word	0x40013000
 8002714:	40021000 	.word	0x40021000
 8002718:	40010800 	.word	0x40010800
 800271c:	200002d4 	.word	0x200002d4
 8002720:	40020030 	.word	0x40020030

08002724 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a09      	ldr	r2, [pc, #36]	@ (8002758 <HAL_TIM_Base_MspInit+0x34>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d10b      	bne.n	800274e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002736:	4b09      	ldr	r3, [pc, #36]	@ (800275c <HAL_TIM_Base_MspInit+0x38>)
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	4a08      	ldr	r2, [pc, #32]	@ (800275c <HAL_TIM_Base_MspInit+0x38>)
 800273c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002740:	6193      	str	r3, [r2, #24]
 8002742:	4b06      	ldr	r3, [pc, #24]	@ (800275c <HAL_TIM_Base_MspInit+0x38>)
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr
 8002758:	40012c00 	.word	0x40012c00
 800275c:	40021000 	.word	0x40021000

08002760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08a      	sub	sp, #40	@ 0x28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a39      	ldr	r2, [pc, #228]	@ (8002860 <HAL_UART_MspInit+0x100>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d16b      	bne.n	8002858 <HAL_UART_MspInit+0xf8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002780:	4b38      	ldr	r3, [pc, #224]	@ (8002864 <HAL_UART_MspInit+0x104>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	4a37      	ldr	r2, [pc, #220]	@ (8002864 <HAL_UART_MspInit+0x104>)
 8002786:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800278a:	6193      	str	r3, [r2, #24]
 800278c:	4b35      	ldr	r3, [pc, #212]	@ (8002864 <HAL_UART_MspInit+0x104>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002798:	4b32      	ldr	r3, [pc, #200]	@ (8002864 <HAL_UART_MspInit+0x104>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	4a31      	ldr	r2, [pc, #196]	@ (8002864 <HAL_UART_MspInit+0x104>)
 800279e:	f043 0308 	orr.w	r3, r3, #8
 80027a2:	6193      	str	r3, [r2, #24]
 80027a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002864 <HAL_UART_MspInit+0x104>)
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027b0:	2340      	movs	r3, #64	@ 0x40
 80027b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b4:	2302      	movs	r3, #2
 80027b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80027b8:	2301      	movs	r3, #1
 80027ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027bc:	f107 0314 	add.w	r3, r7, #20
 80027c0:	4619      	mov	r1, r3
 80027c2:	4829      	ldr	r0, [pc, #164]	@ (8002868 <HAL_UART_MspInit+0x108>)
 80027c4:	f001 f8ea 	bl	800399c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80027c8:	2380      	movs	r3, #128	@ 0x80
 80027ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027d0:	2301      	movs	r3, #1
 80027d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	4619      	mov	r1, r3
 80027da:	4823      	ldr	r0, [pc, #140]	@ (8002868 <HAL_UART_MspInit+0x108>)
 80027dc:	f001 f8de 	bl	800399c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80027e0:	4b22      	ldr	r3, [pc, #136]	@ (800286c <HAL_UART_MspInit+0x10c>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80027ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	f043 0304 	orr.w	r3, r3, #4
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027f6:	4a1d      	ldr	r2, [pc, #116]	@ (800286c <HAL_UART_MspInit+0x10c>)
 80027f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fa:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80027fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002870 <HAL_UART_MspInit+0x110>)
 80027fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002874 <HAL_UART_MspInit+0x114>)
 8002800:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002802:	4b1b      	ldr	r3, [pc, #108]	@ (8002870 <HAL_UART_MspInit+0x110>)
 8002804:	2210      	movs	r2, #16
 8002806:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002808:	4b19      	ldr	r3, [pc, #100]	@ (8002870 <HAL_UART_MspInit+0x110>)
 800280a:	2200      	movs	r2, #0
 800280c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800280e:	4b18      	ldr	r3, [pc, #96]	@ (8002870 <HAL_UART_MspInit+0x110>)
 8002810:	2280      	movs	r2, #128	@ 0x80
 8002812:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002814:	4b16      	ldr	r3, [pc, #88]	@ (8002870 <HAL_UART_MspInit+0x110>)
 8002816:	2200      	movs	r2, #0
 8002818:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800281a:	4b15      	ldr	r3, [pc, #84]	@ (8002870 <HAL_UART_MspInit+0x110>)
 800281c:	2200      	movs	r2, #0
 800281e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002820:	4b13      	ldr	r3, [pc, #76]	@ (8002870 <HAL_UART_MspInit+0x110>)
 8002822:	2200      	movs	r2, #0
 8002824:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002826:	4b12      	ldr	r3, [pc, #72]	@ (8002870 <HAL_UART_MspInit+0x110>)
 8002828:	2200      	movs	r2, #0
 800282a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800282c:	4810      	ldr	r0, [pc, #64]	@ (8002870 <HAL_UART_MspInit+0x110>)
 800282e:	f000 fe13 	bl	8003458 <HAL_DMA_Init>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 8002838:	f7ff fe40 	bl	80024bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a0c      	ldr	r2, [pc, #48]	@ (8002870 <HAL_UART_MspInit+0x110>)
 8002840:	639a      	str	r2, [r3, #56]	@ 0x38
 8002842:	4a0b      	ldr	r2, [pc, #44]	@ (8002870 <HAL_UART_MspInit+0x110>)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002848:	2200      	movs	r2, #0
 800284a:	2100      	movs	r1, #0
 800284c:	2025      	movs	r0, #37	@ 0x25
 800284e:	f000 fdcc 	bl	80033ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002852:	2025      	movs	r0, #37	@ 0x25
 8002854:	f000 fde5 	bl	8003422 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002858:	bf00      	nop
 800285a:	3728      	adds	r7, #40	@ 0x28
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40013800 	.word	0x40013800
 8002864:	40021000 	.word	0x40021000
 8002868:	40010c00 	.word	0x40010c00
 800286c:	40010000 	.word	0x40010000
 8002870:	200003a8 	.word	0x200003a8
 8002874:	40020044 	.word	0x40020044

08002878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800287c:	bf00      	nop
 800287e:	e7fd      	b.n	800287c <NMI_Handler+0x4>

08002880 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002884:	bf00      	nop
 8002886:	e7fd      	b.n	8002884 <HardFault_Handler+0x4>

08002888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800288c:	bf00      	nop
 800288e:	e7fd      	b.n	800288c <MemManage_Handler+0x4>

08002890 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002894:	bf00      	nop
 8002896:	e7fd      	b.n	8002894 <BusFault_Handler+0x4>

08002898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800289c:	bf00      	nop
 800289e:	e7fd      	b.n	800289c <UsageFault_Handler+0x4>

080028a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028c8:	f000 f95e 	bl	8002b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028cc:	bf00      	nop
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80028d4:	4802      	ldr	r0, [pc, #8]	@ (80028e0 <DMA1_Channel3_IRQHandler+0x10>)
 80028d6:	f000 ff2d 	bl	8003734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	200002d4 	.word	0x200002d4

080028e4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80028e8:	4802      	ldr	r0, [pc, #8]	@ (80028f4 <DMA1_Channel4_IRQHandler+0x10>)
 80028ea:	f000 ff23 	bl	8003734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	200003a8 	.word	0x200003a8

080028f8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80028fc:	4802      	ldr	r0, [pc, #8]	@ (8002908 <SPI1_IRQHandler+0x10>)
 80028fe:	f002 fddd 	bl	80054bc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	2000027c 	.word	0x2000027c

0800290c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002910:	4802      	ldr	r0, [pc, #8]	@ (800291c <USART1_IRQHandler+0x10>)
 8002912:	f003 fb5b 	bl	8005fcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000360 	.word	0x20000360

08002920 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return 1;
 8002924:	2301      	movs	r3, #1
}
 8002926:	4618      	mov	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr

0800292e <_kill>:

int _kill(int pid, int sig)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002938:	f005 f80e 	bl	8007958 <__errno>
 800293c:	4603      	mov	r3, r0
 800293e:	2216      	movs	r2, #22
 8002940:	601a      	str	r2, [r3, #0]
  return -1;
 8002942:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <_exit>:

void _exit (int status)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002956:	f04f 31ff 	mov.w	r1, #4294967295
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff ffe7 	bl	800292e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002960:	bf00      	nop
 8002962:	e7fd      	b.n	8002960 <_exit+0x12>

08002964 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	e00a      	b.n	800298c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002976:	f3af 8000 	nop.w
 800297a:	4601      	mov	r1, r0
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	60ba      	str	r2, [r7, #8]
 8002982:	b2ca      	uxtb	r2, r1
 8002984:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	3301      	adds	r3, #1
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	429a      	cmp	r2, r3
 8002992:	dbf0      	blt.n	8002976 <_read+0x12>
  }

  return len;
 8002994:	687b      	ldr	r3, [r7, #4]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b086      	sub	sp, #24
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	e009      	b.n	80029c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	60ba      	str	r2, [r7, #8]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	3301      	adds	r3, #1
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	dbf1      	blt.n	80029b0 <_write+0x12>
  }
  return len;
 80029cc:	687b      	ldr	r3, [r7, #4]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <_close>:

int _close(int file)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029fc:	605a      	str	r2, [r3, #4]
  return 0;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <_isatty>:

int _isatty(int file)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a12:	2301      	movs	r3, #1
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b085      	sub	sp, #20
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr
	...

08002a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a40:	4a14      	ldr	r2, [pc, #80]	@ (8002a94 <_sbrk+0x5c>)
 8002a42:	4b15      	ldr	r3, [pc, #84]	@ (8002a98 <_sbrk+0x60>)
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a4c:	4b13      	ldr	r3, [pc, #76]	@ (8002a9c <_sbrk+0x64>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d102      	bne.n	8002a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a54:	4b11      	ldr	r3, [pc, #68]	@ (8002a9c <_sbrk+0x64>)
 8002a56:	4a12      	ldr	r2, [pc, #72]	@ (8002aa0 <_sbrk+0x68>)
 8002a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a5a:	4b10      	ldr	r3, [pc, #64]	@ (8002a9c <_sbrk+0x64>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4413      	add	r3, r2
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d207      	bcs.n	8002a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a68:	f004 ff76 	bl	8007958 <__errno>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	220c      	movs	r2, #12
 8002a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a72:	f04f 33ff 	mov.w	r3, #4294967295
 8002a76:	e009      	b.n	8002a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a78:	4b08      	ldr	r3, [pc, #32]	@ (8002a9c <_sbrk+0x64>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a7e:	4b07      	ldr	r3, [pc, #28]	@ (8002a9c <_sbrk+0x64>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4413      	add	r3, r2
 8002a86:	4a05      	ldr	r2, [pc, #20]	@ (8002a9c <_sbrk+0x64>)
 8002a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20005000 	.word	0x20005000
 8002a98:	00000400 	.word	0x00000400
 8002a9c:	20000464 	.word	0x20000464
 8002aa0:	200005b8 	.word	0x200005b8

08002aa4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ab0:	f7ff fff8 	bl	8002aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ab4:	480b      	ldr	r0, [pc, #44]	@ (8002ae4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002ab6:	490c      	ldr	r1, [pc, #48]	@ (8002ae8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002ab8:	4a0c      	ldr	r2, [pc, #48]	@ (8002aec <LoopFillZerobss+0x16>)
  movs r3, #0
 8002aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002abc:	e002      	b.n	8002ac4 <LoopCopyDataInit>

08002abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ac2:	3304      	adds	r3, #4

08002ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ac8:	d3f9      	bcc.n	8002abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aca:	4a09      	ldr	r2, [pc, #36]	@ (8002af0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002acc:	4c09      	ldr	r4, [pc, #36]	@ (8002af4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ad0:	e001      	b.n	8002ad6 <LoopFillZerobss>

08002ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ad4:	3204      	adds	r2, #4

08002ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ad8:	d3fb      	bcc.n	8002ad2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ada:	f004 ff43 	bl	8007964 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ade:	f7ff f93f 	bl	8001d60 <main>
  bx lr
 8002ae2:	4770      	bx	lr
  ldr r0, =_sdata
 8002ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ae8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002aec:	0800c680 	.word	0x0800c680
  ldr r2, =_sbss
 8002af0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002af4:	200005b8 	.word	0x200005b8

08002af8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002af8:	e7fe      	b.n	8002af8 <ADC1_2_IRQHandler>
	...

08002afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b00:	4b08      	ldr	r3, [pc, #32]	@ (8002b24 <HAL_Init+0x28>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a07      	ldr	r2, [pc, #28]	@ (8002b24 <HAL_Init+0x28>)
 8002b06:	f043 0310 	orr.w	r3, r3, #16
 8002b0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b0c:	2003      	movs	r0, #3
 8002b0e:	f000 fc61 	bl	80033d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b12:	200f      	movs	r0, #15
 8002b14:	f000 f808 	bl	8002b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b18:	f7ff fcd6 	bl	80024c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40022000 	.word	0x40022000

08002b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b30:	4b12      	ldr	r3, [pc, #72]	@ (8002b7c <HAL_InitTick+0x54>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <HAL_InitTick+0x58>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 fc79 	bl	800343e <HAL_SYSTICK_Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e00e      	b.n	8002b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b0f      	cmp	r3, #15
 8002b5a:	d80a      	bhi.n	8002b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	f04f 30ff 	mov.w	r0, #4294967295
 8002b64:	f000 fc41 	bl	80033ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b68:	4a06      	ldr	r2, [pc, #24]	@ (8002b84 <HAL_InitTick+0x5c>)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	e000      	b.n	8002b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20000004 	.word	0x20000004
 8002b80:	2000000c 	.word	0x2000000c
 8002b84:	20000008 	.word	0x20000008

08002b88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ba4 <HAL_IncTick+0x1c>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	4b05      	ldr	r3, [pc, #20]	@ (8002ba8 <HAL_IncTick+0x20>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4413      	add	r3, r2
 8002b98:	4a03      	ldr	r2, [pc, #12]	@ (8002ba8 <HAL_IncTick+0x20>)
 8002b9a:	6013      	str	r3, [r2, #0]
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr
 8002ba4:	2000000c 	.word	0x2000000c
 8002ba8:	20000468 	.word	0x20000468

08002bac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return uwTick;
 8002bb0:	4b02      	ldr	r3, [pc, #8]	@ (8002bbc <HAL_GetTick+0x10>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr
 8002bbc:	20000468 	.word	0x20000468

08002bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bc8:	f7ff fff0 	bl	8002bac <HAL_GetTick>
 8002bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd8:	d005      	beq.n	8002be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bda:	4b0a      	ldr	r3, [pc, #40]	@ (8002c04 <HAL_Delay+0x44>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4413      	add	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002be6:	bf00      	nop
 8002be8:	f7ff ffe0 	bl	8002bac <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d8f7      	bhi.n	8002be8 <HAL_Delay+0x28>
  {
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	2000000c 	.word	0x2000000c

08002c08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e0be      	b.n	8002da8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d109      	bne.n	8002c4c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff fc70 	bl	800252c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fab3 	bl	80031b8 <ADC_ConversionStop_Disable>
 8002c52:	4603      	mov	r3, r0
 8002c54:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f040 8099 	bne.w	8002d96 <HAL_ADC_Init+0x18e>
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f040 8095 	bne.w	8002d96 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c70:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c74:	f023 0302 	bic.w	r3, r3, #2
 8002c78:	f043 0202 	orr.w	r2, r3, #2
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c88:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	7b1b      	ldrb	r3, [r3, #12]
 8002c8e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c90:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ca0:	d003      	beq.n	8002caa <HAL_ADC_Init+0xa2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d102      	bne.n	8002cb0 <HAL_ADC_Init+0xa8>
 8002caa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cae:	e000      	b.n	8002cb2 <HAL_ADC_Init+0xaa>
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	7d1b      	ldrb	r3, [r3, #20]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d119      	bne.n	8002cf4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	7b1b      	ldrb	r3, [r3, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d109      	bne.n	8002cdc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	035a      	lsls	r2, r3, #13
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	e00b      	b.n	8002cf4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce0:	f043 0220 	orr.w	r2, r3, #32
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cec:	f043 0201 	orr.w	r2, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	4b28      	ldr	r3, [pc, #160]	@ (8002db0 <HAL_ADC_Init+0x1a8>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6812      	ldr	r2, [r2, #0]
 8002d16:	68b9      	ldr	r1, [r7, #8]
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d24:	d003      	beq.n	8002d2e <HAL_ADC_Init+0x126>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d104      	bne.n	8002d38 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	051b      	lsls	r3, r3, #20
 8002d36:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	4b18      	ldr	r3, [pc, #96]	@ (8002db4 <HAL_ADC_Init+0x1ac>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d10b      	bne.n	8002d74 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d66:	f023 0303 	bic.w	r3, r3, #3
 8002d6a:	f043 0201 	orr.w	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d72:	e018      	b.n	8002da6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d78:	f023 0312 	bic.w	r3, r3, #18
 8002d7c:	f043 0210 	orr.w	r2, r3, #16
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d88:	f043 0201 	orr.w	r2, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d94:	e007      	b.n	8002da6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9a:	f043 0210 	orr.w	r2, r3, #16
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	ffe1f7fd 	.word	0xffe1f7fd
 8002db4:	ff1f0efe 	.word	0xff1f0efe

08002db8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_ADC_Start+0x1a>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e098      	b.n	8002f04 <HAL_ADC_Start+0x14c>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f992 	bl	8003104 <ADC_Enable>
 8002de0:	4603      	mov	r3, r0
 8002de2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f040 8087 	bne.w	8002efa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 8002df8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a41      	ldr	r2, [pc, #260]	@ (8002f0c <HAL_ADC_Start+0x154>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d105      	bne.n	8002e16 <HAL_ADC_Start+0x5e>
 8002e0a:	4b41      	ldr	r3, [pc, #260]	@ (8002f10 <HAL_ADC_Start+0x158>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d115      	bne.n	8002e42 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d026      	beq.n	8002e7e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e34:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e38:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e40:	e01d      	b.n	8002e7e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e46:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a2f      	ldr	r2, [pc, #188]	@ (8002f10 <HAL_ADC_Start+0x158>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d004      	beq.n	8002e62 <HAL_ADC_Start+0xaa>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f0c <HAL_ADC_Start+0x154>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d10d      	bne.n	8002e7e <HAL_ADC_Start+0xc6>
 8002e62:	4b2b      	ldr	r3, [pc, #172]	@ (8002f10 <HAL_ADC_Start+0x158>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d007      	beq.n	8002e7e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e72:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e76:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d006      	beq.n	8002e98 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8e:	f023 0206 	bic.w	r2, r3, #6
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002e96:	e002      	b.n	8002e9e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f06f 0202 	mvn.w	r2, #2
 8002eae:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002eba:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002ebe:	d113      	bne.n	8002ee8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ec4:	4a11      	ldr	r2, [pc, #68]	@ (8002f0c <HAL_ADC_Start+0x154>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d105      	bne.n	8002ed6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002eca:	4b11      	ldr	r3, [pc, #68]	@ (8002f10 <HAL_ADC_Start+0x158>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d108      	bne.n	8002ee8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002ee4:	609a      	str	r2, [r3, #8]
 8002ee6:	e00c      	b.n	8002f02 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002ef6:	609a      	str	r2, [r3, #8]
 8002ef8:	e003      	b.n	8002f02 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40012800 	.word	0x40012800
 8002f10:	40012400 	.word	0x40012400

08002f14 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x20>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e0dc      	b.n	80030ee <HAL_ADC_ConfigChannel+0x1da>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b06      	cmp	r3, #6
 8002f42:	d81c      	bhi.n	8002f7e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	3b05      	subs	r3, #5
 8002f56:	221f      	movs	r2, #31
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	4019      	ands	r1, r3
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3b05      	subs	r3, #5
 8002f70:	fa00 f203 	lsl.w	r2, r0, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f7c:	e03c      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b0c      	cmp	r3, #12
 8002f84:	d81c      	bhi.n	8002fc0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	3b23      	subs	r3, #35	@ 0x23
 8002f98:	221f      	movs	r2, #31
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	4019      	ands	r1, r3
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	3b23      	subs	r3, #35	@ 0x23
 8002fb2:	fa00 f203 	lsl.w	r2, r0, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fbe:	e01b      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	3b41      	subs	r3, #65	@ 0x41
 8002fd2:	221f      	movs	r2, #31
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	4019      	ands	r1, r3
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	3b41      	subs	r3, #65	@ 0x41
 8002fec:	fa00 f203 	lsl.w	r2, r0, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b09      	cmp	r3, #9
 8002ffe:	d91c      	bls.n	800303a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68d9      	ldr	r1, [r3, #12]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	4613      	mov	r3, r2
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	4413      	add	r3, r2
 8003010:	3b1e      	subs	r3, #30
 8003012:	2207      	movs	r2, #7
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	4019      	ands	r1, r3
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	6898      	ldr	r0, [r3, #8]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4613      	mov	r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4413      	add	r3, r2
 800302a:	3b1e      	subs	r3, #30
 800302c:	fa00 f203 	lsl.w	r2, r0, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	60da      	str	r2, [r3, #12]
 8003038:	e019      	b.n	800306e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6919      	ldr	r1, [r3, #16]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	4613      	mov	r3, r2
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4413      	add	r3, r2
 800304a:	2207      	movs	r2, #7
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	4019      	ands	r1, r3
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	6898      	ldr	r0, [r3, #8]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4613      	mov	r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4413      	add	r3, r2
 8003062:	fa00 f203 	lsl.w	r2, r0, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b10      	cmp	r3, #16
 8003074:	d003      	beq.n	800307e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800307a:	2b11      	cmp	r3, #17
 800307c:	d132      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1d      	ldr	r2, [pc, #116]	@ (80030f8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d125      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d126      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80030a4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b10      	cmp	r3, #16
 80030ac:	d11a      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030ae:	4b13      	ldr	r3, [pc, #76]	@ (80030fc <HAL_ADC_ConfigChannel+0x1e8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a13      	ldr	r2, [pc, #76]	@ (8003100 <HAL_ADC_ConfigChannel+0x1ec>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	0c9a      	lsrs	r2, r3, #18
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030c4:	e002      	b.n	80030cc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f9      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x1b2>
 80030d2:	e007      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d8:	f043 0220 	orr.w	r2, r3, #32
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr
 80030f8:	40012400 	.word	0x40012400
 80030fc:	20000004 	.word	0x20000004
 8003100:	431bde83 	.word	0x431bde83

08003104 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b01      	cmp	r3, #1
 8003120:	d040      	beq.n	80031a4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f042 0201 	orr.w	r2, r2, #1
 8003130:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003132:	4b1f      	ldr	r3, [pc, #124]	@ (80031b0 <ADC_Enable+0xac>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1f      	ldr	r2, [pc, #124]	@ (80031b4 <ADC_Enable+0xb0>)
 8003138:	fba2 2303 	umull	r2, r3, r2, r3
 800313c:	0c9b      	lsrs	r3, r3, #18
 800313e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003140:	e002      	b.n	8003148 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	3b01      	subs	r3, #1
 8003146:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f9      	bne.n	8003142 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800314e:	f7ff fd2d 	bl	8002bac <HAL_GetTick>
 8003152:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003154:	e01f      	b.n	8003196 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003156:	f7ff fd29 	bl	8002bac <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d918      	bls.n	8003196 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b01      	cmp	r3, #1
 8003170:	d011      	beq.n	8003196 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003176:	f043 0210 	orr.w	r2, r3, #16
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003182:	f043 0201 	orr.w	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e007      	b.n	80031a6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d1d8      	bne.n	8003156 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000004 	.word	0x20000004
 80031b4:	431bde83 	.word	0x431bde83

080031b8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d12e      	bne.n	8003230 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0201 	bic.w	r2, r2, #1
 80031e0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031e2:	f7ff fce3 	bl	8002bac <HAL_GetTick>
 80031e6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80031e8:	e01b      	b.n	8003222 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031ea:	f7ff fcdf 	bl	8002bac <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d914      	bls.n	8003222 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b01      	cmp	r3, #1
 8003204:	d10d      	bne.n	8003222 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320a:	f043 0210 	orr.w	r2, r3, #16
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003216:	f043 0201 	orr.w	r2, r3, #1
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e007      	b.n	8003232 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b01      	cmp	r3, #1
 800322e:	d0dc      	beq.n	80031ea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800324c:	4b0c      	ldr	r3, [pc, #48]	@ (8003280 <__NVIC_SetPriorityGrouping+0x44>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003258:	4013      	ands	r3, r2
 800325a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003264:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003268:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800326c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800326e:	4a04      	ldr	r2, [pc, #16]	@ (8003280 <__NVIC_SetPriorityGrouping+0x44>)
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	60d3      	str	r3, [r2, #12]
}
 8003274:	bf00      	nop
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	e000ed00 	.word	0xe000ed00

08003284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003288:	4b04      	ldr	r3, [pc, #16]	@ (800329c <__NVIC_GetPriorityGrouping+0x18>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	0a1b      	lsrs	r3, r3, #8
 800328e:	f003 0307 	and.w	r3, r3, #7
}
 8003292:	4618      	mov	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	db0b      	blt.n	80032ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	f003 021f 	and.w	r2, r3, #31
 80032b8:	4906      	ldr	r1, [pc, #24]	@ (80032d4 <__NVIC_EnableIRQ+0x34>)
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	095b      	lsrs	r3, r3, #5
 80032c0:	2001      	movs	r0, #1
 80032c2:	fa00 f202 	lsl.w	r2, r0, r2
 80032c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr
 80032d4:	e000e100 	.word	0xe000e100

080032d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	6039      	str	r1, [r7, #0]
 80032e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	db0a      	blt.n	8003302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	490c      	ldr	r1, [pc, #48]	@ (8003324 <__NVIC_SetPriority+0x4c>)
 80032f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f6:	0112      	lsls	r2, r2, #4
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	440b      	add	r3, r1
 80032fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003300:	e00a      	b.n	8003318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	b2da      	uxtb	r2, r3
 8003306:	4908      	ldr	r1, [pc, #32]	@ (8003328 <__NVIC_SetPriority+0x50>)
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	3b04      	subs	r3, #4
 8003310:	0112      	lsls	r2, r2, #4
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	440b      	add	r3, r1
 8003316:	761a      	strb	r2, [r3, #24]
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	e000e100 	.word	0xe000e100
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800332c:	b480      	push	{r7}
 800332e:	b089      	sub	sp, #36	@ 0x24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f1c3 0307 	rsb	r3, r3, #7
 8003346:	2b04      	cmp	r3, #4
 8003348:	bf28      	it	cs
 800334a:	2304      	movcs	r3, #4
 800334c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	3304      	adds	r3, #4
 8003352:	2b06      	cmp	r3, #6
 8003354:	d902      	bls.n	800335c <NVIC_EncodePriority+0x30>
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	3b03      	subs	r3, #3
 800335a:	e000      	b.n	800335e <NVIC_EncodePriority+0x32>
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003360:	f04f 32ff 	mov.w	r2, #4294967295
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43da      	mvns	r2, r3
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	401a      	ands	r2, r3
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003374:	f04f 31ff 	mov.w	r1, #4294967295
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	fa01 f303 	lsl.w	r3, r1, r3
 800337e:	43d9      	mvns	r1, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003384:	4313      	orrs	r3, r2
         );
}
 8003386:	4618      	mov	r0, r3
 8003388:	3724      	adds	r7, #36	@ 0x24
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr

08003390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3b01      	subs	r3, #1
 800339c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033a0:	d301      	bcc.n	80033a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033a2:	2301      	movs	r3, #1
 80033a4:	e00f      	b.n	80033c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033a6:	4a0a      	ldr	r2, [pc, #40]	@ (80033d0 <SysTick_Config+0x40>)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033ae:	210f      	movs	r1, #15
 80033b0:	f04f 30ff 	mov.w	r0, #4294967295
 80033b4:	f7ff ff90 	bl	80032d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033b8:	4b05      	ldr	r3, [pc, #20]	@ (80033d0 <SysTick_Config+0x40>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033be:	4b04      	ldr	r3, [pc, #16]	@ (80033d0 <SysTick_Config+0x40>)
 80033c0:	2207      	movs	r2, #7
 80033c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	e000e010 	.word	0xe000e010

080033d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff ff2d 	bl	800323c <__NVIC_SetPriorityGrouping>
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b086      	sub	sp, #24
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	4603      	mov	r3, r0
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033fc:	f7ff ff42 	bl	8003284 <__NVIC_GetPriorityGrouping>
 8003400:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	68b9      	ldr	r1, [r7, #8]
 8003406:	6978      	ldr	r0, [r7, #20]
 8003408:	f7ff ff90 	bl	800332c <NVIC_EncodePriority>
 800340c:	4602      	mov	r2, r0
 800340e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003412:	4611      	mov	r1, r2
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff ff5f 	bl	80032d8 <__NVIC_SetPriority>
}
 800341a:	bf00      	nop
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	4603      	mov	r3, r0
 800342a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800342c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff ff35 	bl	80032a0 <__NVIC_EnableIRQ>
}
 8003436:	bf00      	nop
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7ff ffa2 	bl	8003390 <SysTick_Config>
 800344c:	4603      	mov	r3, r0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e043      	b.n	80034f6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	4b22      	ldr	r3, [pc, #136]	@ (8003500 <HAL_DMA_Init+0xa8>)
 8003476:	4413      	add	r3, r2
 8003478:	4a22      	ldr	r2, [pc, #136]	@ (8003504 <HAL_DMA_Init+0xac>)
 800347a:	fba2 2303 	umull	r2, r3, r2, r3
 800347e:	091b      	lsrs	r3, r3, #4
 8003480:	009a      	lsls	r2, r3, #2
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a1f      	ldr	r2, [pc, #124]	@ (8003508 <HAL_DMA_Init+0xb0>)
 800348a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80034a2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80034a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80034b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr
 8003500:	bffdfff8 	.word	0xbffdfff8
 8003504:	cccccccd 	.word	0xcccccccd
 8003508:	40020000 	.word	0x40020000

0800350c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_DMA_Start_IT+0x20>
 8003528:	2302      	movs	r3, #2
 800352a:	e04b      	b.n	80035c4 <HAL_DMA_Start_IT+0xb8>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b01      	cmp	r3, #1
 800353e:	d13a      	bne.n	80035b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0201 	bic.w	r2, r2, #1
 800355c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	68b9      	ldr	r1, [r7, #8]
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f9eb 	bl	8003940 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356e:	2b00      	cmp	r3, #0
 8003570:	d008      	beq.n	8003584 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 020e 	orr.w	r2, r2, #14
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	e00f      	b.n	80035a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0204 	bic.w	r2, r2, #4
 8003592:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 020a 	orr.w	r2, r2, #10
 80035a2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0201 	orr.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	e005      	b.n	80035c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80035be:	2302      	movs	r3, #2
 80035c0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80035c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d008      	beq.n	80035f6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2204      	movs	r2, #4
 80035e8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e020      	b.n	8003638 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 020e 	bic.w	r2, r2, #14
 8003604:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0201 	bic.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800361e:	2101      	movs	r1, #1
 8003620:	fa01 f202 	lsl.w	r2, r1, r2
 8003624:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003636:	7bfb      	ldrb	r3, [r7, #15]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
	...

08003644 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d005      	beq.n	8003668 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2204      	movs	r2, #4
 8003660:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	73fb      	strb	r3, [r7, #15]
 8003666:	e051      	b.n	800370c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 020e 	bic.w	r2, r2, #14
 8003676:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0201 	bic.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a22      	ldr	r2, [pc, #136]	@ (8003718 <HAL_DMA_Abort_IT+0xd4>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d029      	beq.n	80036e6 <HAL_DMA_Abort_IT+0xa2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a21      	ldr	r2, [pc, #132]	@ (800371c <HAL_DMA_Abort_IT+0xd8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d022      	beq.n	80036e2 <HAL_DMA_Abort_IT+0x9e>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a1f      	ldr	r2, [pc, #124]	@ (8003720 <HAL_DMA_Abort_IT+0xdc>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d01a      	beq.n	80036dc <HAL_DMA_Abort_IT+0x98>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003724 <HAL_DMA_Abort_IT+0xe0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d012      	beq.n	80036d6 <HAL_DMA_Abort_IT+0x92>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003728 <HAL_DMA_Abort_IT+0xe4>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d00a      	beq.n	80036d0 <HAL_DMA_Abort_IT+0x8c>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a1b      	ldr	r2, [pc, #108]	@ (800372c <HAL_DMA_Abort_IT+0xe8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d102      	bne.n	80036ca <HAL_DMA_Abort_IT+0x86>
 80036c4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80036c8:	e00e      	b.n	80036e8 <HAL_DMA_Abort_IT+0xa4>
 80036ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036ce:	e00b      	b.n	80036e8 <HAL_DMA_Abort_IT+0xa4>
 80036d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036d4:	e008      	b.n	80036e8 <HAL_DMA_Abort_IT+0xa4>
 80036d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036da:	e005      	b.n	80036e8 <HAL_DMA_Abort_IT+0xa4>
 80036dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036e0:	e002      	b.n	80036e8 <HAL_DMA_Abort_IT+0xa4>
 80036e2:	2310      	movs	r3, #16
 80036e4:	e000      	b.n	80036e8 <HAL_DMA_Abort_IT+0xa4>
 80036e6:	2301      	movs	r3, #1
 80036e8:	4a11      	ldr	r2, [pc, #68]	@ (8003730 <HAL_DMA_Abort_IT+0xec>)
 80036ea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	4798      	blx	r3
    } 
  }
  return status;
 800370c:	7bfb      	ldrb	r3, [r7, #15]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40020008 	.word	0x40020008
 800371c:	4002001c 	.word	0x4002001c
 8003720:	40020030 	.word	0x40020030
 8003724:	40020044 	.word	0x40020044
 8003728:	40020058 	.word	0x40020058
 800372c:	4002006c 	.word	0x4002006c
 8003730:	40020000 	.word	0x40020000

08003734 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	2204      	movs	r2, #4
 8003752:	409a      	lsls	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4013      	ands	r3, r2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d04f      	beq.n	80037fc <HAL_DMA_IRQHandler+0xc8>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	d04a      	beq.n	80037fc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b00      	cmp	r3, #0
 8003772:	d107      	bne.n	8003784 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0204 	bic.w	r2, r2, #4
 8003782:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a66      	ldr	r2, [pc, #408]	@ (8003924 <HAL_DMA_IRQHandler+0x1f0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d029      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xae>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a65      	ldr	r2, [pc, #404]	@ (8003928 <HAL_DMA_IRQHandler+0x1f4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d022      	beq.n	80037de <HAL_DMA_IRQHandler+0xaa>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a63      	ldr	r2, [pc, #396]	@ (800392c <HAL_DMA_IRQHandler+0x1f8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d01a      	beq.n	80037d8 <HAL_DMA_IRQHandler+0xa4>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a62      	ldr	r2, [pc, #392]	@ (8003930 <HAL_DMA_IRQHandler+0x1fc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d012      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x9e>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a60      	ldr	r2, [pc, #384]	@ (8003934 <HAL_DMA_IRQHandler+0x200>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00a      	beq.n	80037cc <HAL_DMA_IRQHandler+0x98>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a5f      	ldr	r2, [pc, #380]	@ (8003938 <HAL_DMA_IRQHandler+0x204>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d102      	bne.n	80037c6 <HAL_DMA_IRQHandler+0x92>
 80037c0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80037c4:	e00e      	b.n	80037e4 <HAL_DMA_IRQHandler+0xb0>
 80037c6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80037ca:	e00b      	b.n	80037e4 <HAL_DMA_IRQHandler+0xb0>
 80037cc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80037d0:	e008      	b.n	80037e4 <HAL_DMA_IRQHandler+0xb0>
 80037d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80037d6:	e005      	b.n	80037e4 <HAL_DMA_IRQHandler+0xb0>
 80037d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037dc:	e002      	b.n	80037e4 <HAL_DMA_IRQHandler+0xb0>
 80037de:	2340      	movs	r3, #64	@ 0x40
 80037e0:	e000      	b.n	80037e4 <HAL_DMA_IRQHandler+0xb0>
 80037e2:	2304      	movs	r3, #4
 80037e4:	4a55      	ldr	r2, [pc, #340]	@ (800393c <HAL_DMA_IRQHandler+0x208>)
 80037e6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 8094 	beq.w	800391a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80037fa:	e08e      	b.n	800391a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003800:	2202      	movs	r2, #2
 8003802:	409a      	lsls	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4013      	ands	r3, r2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d056      	beq.n	80038ba <HAL_DMA_IRQHandler+0x186>
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d051      	beq.n	80038ba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10b      	bne.n	800383c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 020a 	bic.w	r2, r2, #10
 8003832:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a38      	ldr	r2, [pc, #224]	@ (8003924 <HAL_DMA_IRQHandler+0x1f0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d029      	beq.n	800389a <HAL_DMA_IRQHandler+0x166>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a37      	ldr	r2, [pc, #220]	@ (8003928 <HAL_DMA_IRQHandler+0x1f4>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d022      	beq.n	8003896 <HAL_DMA_IRQHandler+0x162>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a35      	ldr	r2, [pc, #212]	@ (800392c <HAL_DMA_IRQHandler+0x1f8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d01a      	beq.n	8003890 <HAL_DMA_IRQHandler+0x15c>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a34      	ldr	r2, [pc, #208]	@ (8003930 <HAL_DMA_IRQHandler+0x1fc>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d012      	beq.n	800388a <HAL_DMA_IRQHandler+0x156>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a32      	ldr	r2, [pc, #200]	@ (8003934 <HAL_DMA_IRQHandler+0x200>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00a      	beq.n	8003884 <HAL_DMA_IRQHandler+0x150>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a31      	ldr	r2, [pc, #196]	@ (8003938 <HAL_DMA_IRQHandler+0x204>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d102      	bne.n	800387e <HAL_DMA_IRQHandler+0x14a>
 8003878:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800387c:	e00e      	b.n	800389c <HAL_DMA_IRQHandler+0x168>
 800387e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003882:	e00b      	b.n	800389c <HAL_DMA_IRQHandler+0x168>
 8003884:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003888:	e008      	b.n	800389c <HAL_DMA_IRQHandler+0x168>
 800388a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800388e:	e005      	b.n	800389c <HAL_DMA_IRQHandler+0x168>
 8003890:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003894:	e002      	b.n	800389c <HAL_DMA_IRQHandler+0x168>
 8003896:	2320      	movs	r3, #32
 8003898:	e000      	b.n	800389c <HAL_DMA_IRQHandler+0x168>
 800389a:	2302      	movs	r3, #2
 800389c:	4a27      	ldr	r2, [pc, #156]	@ (800393c <HAL_DMA_IRQHandler+0x208>)
 800389e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d034      	beq.n	800391a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80038b8:	e02f      	b.n	800391a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	2208      	movs	r2, #8
 80038c0:	409a      	lsls	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d028      	beq.n	800391c <HAL_DMA_IRQHandler+0x1e8>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d023      	beq.n	800391c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 020e 	bic.w	r2, r2, #14
 80038e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ec:	2101      	movs	r1, #1
 80038ee:	fa01 f202 	lsl.w	r2, r1, r2
 80038f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390e:	2b00      	cmp	r3, #0
 8003910:	d004      	beq.n	800391c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	4798      	blx	r3
    }
  }
  return;
 800391a:	bf00      	nop
 800391c:	bf00      	nop
}
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40020008 	.word	0x40020008
 8003928:	4002001c 	.word	0x4002001c
 800392c:	40020030 	.word	0x40020030
 8003930:	40020044 	.word	0x40020044
 8003934:	40020058 	.word	0x40020058
 8003938:	4002006c 	.word	0x4002006c
 800393c:	40020000 	.word	0x40020000

08003940 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003956:	2101      	movs	r1, #1
 8003958:	fa01 f202 	lsl.w	r2, r1, r2
 800395c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b10      	cmp	r3, #16
 800396c:	d108      	bne.n	8003980 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800397e:	e007      	b.n	8003990 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	60da      	str	r2, [r3, #12]
}
 8003990:	bf00      	nop
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr
	...

0800399c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800399c:	b480      	push	{r7}
 800399e:	b08b      	sub	sp, #44	@ 0x2c
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039a6:	2300      	movs	r3, #0
 80039a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80039aa:	2300      	movs	r3, #0
 80039ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ae:	e169      	b.n	8003c84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80039b0:	2201      	movs	r2, #1
 80039b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69fa      	ldr	r2, [r7, #28]
 80039c0:	4013      	ands	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	f040 8158 	bne.w	8003c7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	4a9a      	ldr	r2, [pc, #616]	@ (8003c3c <HAL_GPIO_Init+0x2a0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d05e      	beq.n	8003a96 <HAL_GPIO_Init+0xfa>
 80039d8:	4a98      	ldr	r2, [pc, #608]	@ (8003c3c <HAL_GPIO_Init+0x2a0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d875      	bhi.n	8003aca <HAL_GPIO_Init+0x12e>
 80039de:	4a98      	ldr	r2, [pc, #608]	@ (8003c40 <HAL_GPIO_Init+0x2a4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d058      	beq.n	8003a96 <HAL_GPIO_Init+0xfa>
 80039e4:	4a96      	ldr	r2, [pc, #600]	@ (8003c40 <HAL_GPIO_Init+0x2a4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d86f      	bhi.n	8003aca <HAL_GPIO_Init+0x12e>
 80039ea:	4a96      	ldr	r2, [pc, #600]	@ (8003c44 <HAL_GPIO_Init+0x2a8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d052      	beq.n	8003a96 <HAL_GPIO_Init+0xfa>
 80039f0:	4a94      	ldr	r2, [pc, #592]	@ (8003c44 <HAL_GPIO_Init+0x2a8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d869      	bhi.n	8003aca <HAL_GPIO_Init+0x12e>
 80039f6:	4a94      	ldr	r2, [pc, #592]	@ (8003c48 <HAL_GPIO_Init+0x2ac>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d04c      	beq.n	8003a96 <HAL_GPIO_Init+0xfa>
 80039fc:	4a92      	ldr	r2, [pc, #584]	@ (8003c48 <HAL_GPIO_Init+0x2ac>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d863      	bhi.n	8003aca <HAL_GPIO_Init+0x12e>
 8003a02:	4a92      	ldr	r2, [pc, #584]	@ (8003c4c <HAL_GPIO_Init+0x2b0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d046      	beq.n	8003a96 <HAL_GPIO_Init+0xfa>
 8003a08:	4a90      	ldr	r2, [pc, #576]	@ (8003c4c <HAL_GPIO_Init+0x2b0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d85d      	bhi.n	8003aca <HAL_GPIO_Init+0x12e>
 8003a0e:	2b12      	cmp	r3, #18
 8003a10:	d82a      	bhi.n	8003a68 <HAL_GPIO_Init+0xcc>
 8003a12:	2b12      	cmp	r3, #18
 8003a14:	d859      	bhi.n	8003aca <HAL_GPIO_Init+0x12e>
 8003a16:	a201      	add	r2, pc, #4	@ (adr r2, 8003a1c <HAL_GPIO_Init+0x80>)
 8003a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1c:	08003a97 	.word	0x08003a97
 8003a20:	08003a71 	.word	0x08003a71
 8003a24:	08003a83 	.word	0x08003a83
 8003a28:	08003ac5 	.word	0x08003ac5
 8003a2c:	08003acb 	.word	0x08003acb
 8003a30:	08003acb 	.word	0x08003acb
 8003a34:	08003acb 	.word	0x08003acb
 8003a38:	08003acb 	.word	0x08003acb
 8003a3c:	08003acb 	.word	0x08003acb
 8003a40:	08003acb 	.word	0x08003acb
 8003a44:	08003acb 	.word	0x08003acb
 8003a48:	08003acb 	.word	0x08003acb
 8003a4c:	08003acb 	.word	0x08003acb
 8003a50:	08003acb 	.word	0x08003acb
 8003a54:	08003acb 	.word	0x08003acb
 8003a58:	08003acb 	.word	0x08003acb
 8003a5c:	08003acb 	.word	0x08003acb
 8003a60:	08003a79 	.word	0x08003a79
 8003a64:	08003a8d 	.word	0x08003a8d
 8003a68:	4a79      	ldr	r2, [pc, #484]	@ (8003c50 <HAL_GPIO_Init+0x2b4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d013      	beq.n	8003a96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a6e:	e02c      	b.n	8003aca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	623b      	str	r3, [r7, #32]
          break;
 8003a76:	e029      	b.n	8003acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	623b      	str	r3, [r7, #32]
          break;
 8003a80:	e024      	b.n	8003acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	3308      	adds	r3, #8
 8003a88:	623b      	str	r3, [r7, #32]
          break;
 8003a8a:	e01f      	b.n	8003acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	330c      	adds	r3, #12
 8003a92:	623b      	str	r3, [r7, #32]
          break;
 8003a94:	e01a      	b.n	8003acc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d102      	bne.n	8003aa4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	623b      	str	r3, [r7, #32]
          break;
 8003aa2:	e013      	b.n	8003acc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d105      	bne.n	8003ab8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003aac:	2308      	movs	r3, #8
 8003aae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69fa      	ldr	r2, [r7, #28]
 8003ab4:	611a      	str	r2, [r3, #16]
          break;
 8003ab6:	e009      	b.n	8003acc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ab8:	2308      	movs	r3, #8
 8003aba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	615a      	str	r2, [r3, #20]
          break;
 8003ac2:	e003      	b.n	8003acc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	623b      	str	r3, [r7, #32]
          break;
 8003ac8:	e000      	b.n	8003acc <HAL_GPIO_Init+0x130>
          break;
 8003aca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	2bff      	cmp	r3, #255	@ 0xff
 8003ad0:	d801      	bhi.n	8003ad6 <HAL_GPIO_Init+0x13a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	e001      	b.n	8003ada <HAL_GPIO_Init+0x13e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	3304      	adds	r3, #4
 8003ada:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	2bff      	cmp	r3, #255	@ 0xff
 8003ae0:	d802      	bhi.n	8003ae8 <HAL_GPIO_Init+0x14c>
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	e002      	b.n	8003aee <HAL_GPIO_Init+0x152>
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aea:	3b08      	subs	r3, #8
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	210f      	movs	r1, #15
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	fa01 f303 	lsl.w	r3, r1, r3
 8003afc:	43db      	mvns	r3, r3
 8003afe:	401a      	ands	r2, r3
 8003b00:	6a39      	ldr	r1, [r7, #32]
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	fa01 f303 	lsl.w	r3, r1, r3
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 80b1 	beq.w	8003c7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b1c:	4b4d      	ldr	r3, [pc, #308]	@ (8003c54 <HAL_GPIO_Init+0x2b8>)
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	4a4c      	ldr	r2, [pc, #304]	@ (8003c54 <HAL_GPIO_Init+0x2b8>)
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	6193      	str	r3, [r2, #24]
 8003b28:	4b4a      	ldr	r3, [pc, #296]	@ (8003c54 <HAL_GPIO_Init+0x2b8>)
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	60bb      	str	r3, [r7, #8]
 8003b32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b34:	4a48      	ldr	r2, [pc, #288]	@ (8003c58 <HAL_GPIO_Init+0x2bc>)
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	089b      	lsrs	r3, r3, #2
 8003b3a:	3302      	adds	r3, #2
 8003b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b44:	f003 0303 	and.w	r3, r3, #3
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	220f      	movs	r2, #15
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	43db      	mvns	r3, r3
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4013      	ands	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a40      	ldr	r2, [pc, #256]	@ (8003c5c <HAL_GPIO_Init+0x2c0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d013      	beq.n	8003b88 <HAL_GPIO_Init+0x1ec>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a3f      	ldr	r2, [pc, #252]	@ (8003c60 <HAL_GPIO_Init+0x2c4>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00d      	beq.n	8003b84 <HAL_GPIO_Init+0x1e8>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a3e      	ldr	r2, [pc, #248]	@ (8003c64 <HAL_GPIO_Init+0x2c8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d007      	beq.n	8003b80 <HAL_GPIO_Init+0x1e4>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a3d      	ldr	r2, [pc, #244]	@ (8003c68 <HAL_GPIO_Init+0x2cc>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d101      	bne.n	8003b7c <HAL_GPIO_Init+0x1e0>
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e006      	b.n	8003b8a <HAL_GPIO_Init+0x1ee>
 8003b7c:	2304      	movs	r3, #4
 8003b7e:	e004      	b.n	8003b8a <HAL_GPIO_Init+0x1ee>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e002      	b.n	8003b8a <HAL_GPIO_Init+0x1ee>
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <HAL_GPIO_Init+0x1ee>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b8c:	f002 0203 	and.w	r2, r2, #3
 8003b90:	0092      	lsls	r2, r2, #2
 8003b92:	4093      	lsls	r3, r2
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b9a:	492f      	ldr	r1, [pc, #188]	@ (8003c58 <HAL_GPIO_Init+0x2bc>)
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9e:	089b      	lsrs	r3, r3, #2
 8003ba0:	3302      	adds	r3, #2
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d006      	beq.n	8003bc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c6c <HAL_GPIO_Init+0x2d0>)
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	492c      	ldr	r1, [pc, #176]	@ (8003c6c <HAL_GPIO_Init+0x2d0>)
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	608b      	str	r3, [r1, #8]
 8003bc0:	e006      	b.n	8003bd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8003c6c <HAL_GPIO_Init+0x2d0>)
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	4928      	ldr	r1, [pc, #160]	@ (8003c6c <HAL_GPIO_Init+0x2d0>)
 8003bcc:	4013      	ands	r3, r2
 8003bce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d006      	beq.n	8003bea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003bdc:	4b23      	ldr	r3, [pc, #140]	@ (8003c6c <HAL_GPIO_Init+0x2d0>)
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	4922      	ldr	r1, [pc, #136]	@ (8003c6c <HAL_GPIO_Init+0x2d0>)
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	60cb      	str	r3, [r1, #12]
 8003be8:	e006      	b.n	8003bf8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003bea:	4b20      	ldr	r3, [pc, #128]	@ (8003c6c <HAL_GPIO_Init+0x2d0>)
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	491e      	ldr	r1, [pc, #120]	@ (8003c6c <HAL_GPIO_Init+0x2d0>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d006      	beq.n	8003c12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c04:	4b19      	ldr	r3, [pc, #100]	@ (8003c6c <HAL_GPIO_Init+0x2d0>)
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	4918      	ldr	r1, [pc, #96]	@ (8003c6c <HAL_GPIO_Init+0x2d0>)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	604b      	str	r3, [r1, #4]
 8003c10:	e006      	b.n	8003c20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c12:	4b16      	ldr	r3, [pc, #88]	@ (8003c6c <HAL_GPIO_Init+0x2d0>)
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	4914      	ldr	r1, [pc, #80]	@ (8003c6c <HAL_GPIO_Init+0x2d0>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d021      	beq.n	8003c70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c6c <HAL_GPIO_Init+0x2d0>)
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	490e      	ldr	r1, [pc, #56]	@ (8003c6c <HAL_GPIO_Init+0x2d0>)
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	600b      	str	r3, [r1, #0]
 8003c38:	e021      	b.n	8003c7e <HAL_GPIO_Init+0x2e2>
 8003c3a:	bf00      	nop
 8003c3c:	10320000 	.word	0x10320000
 8003c40:	10310000 	.word	0x10310000
 8003c44:	10220000 	.word	0x10220000
 8003c48:	10210000 	.word	0x10210000
 8003c4c:	10120000 	.word	0x10120000
 8003c50:	10110000 	.word	0x10110000
 8003c54:	40021000 	.word	0x40021000
 8003c58:	40010000 	.word	0x40010000
 8003c5c:	40010800 	.word	0x40010800
 8003c60:	40010c00 	.word	0x40010c00
 8003c64:	40011000 	.word	0x40011000
 8003c68:	40011400 	.word	0x40011400
 8003c6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca0 <HAL_GPIO_Init+0x304>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	43db      	mvns	r3, r3
 8003c78:	4909      	ldr	r1, [pc, #36]	@ (8003ca0 <HAL_GPIO_Init+0x304>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c80:	3301      	adds	r3, #1
 8003c82:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f47f ae8e 	bne.w	80039b0 <HAL_GPIO_Init+0x14>
  }
}
 8003c94:	bf00      	nop
 8003c96:	bf00      	nop
 8003c98:	372c      	adds	r7, #44	@ 0x2c
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr
 8003ca0:	40010400 	.word	0x40010400

08003ca4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	460b      	mov	r3, r1
 8003cae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	887b      	ldrh	r3, [r7, #2]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	73fb      	strb	r3, [r7, #15]
 8003cc0:	e001      	b.n	8003cc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	4770      	bx	lr

08003cd2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	460b      	mov	r3, r1
 8003cdc:	807b      	strh	r3, [r7, #2]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ce2:	787b      	ldrb	r3, [r7, #1]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ce8:	887a      	ldrh	r2, [r7, #2]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003cee:	e003      	b.n	8003cf8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003cf0:	887b      	ldrh	r3, [r7, #2]
 8003cf2:	041a      	lsls	r2, r3, #16
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	611a      	str	r2, [r3, #16]
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr
	...

08003d04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e12b      	b.n	8003f6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7fe fc3a 	bl	80025a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2224      	movs	r2, #36	@ 0x24
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0201 	bic.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d68:	f001 f832 	bl	8004dd0 <HAL_RCC_GetPCLK1Freq>
 8003d6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	4a81      	ldr	r2, [pc, #516]	@ (8003f78 <HAL_I2C_Init+0x274>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d807      	bhi.n	8003d88 <HAL_I2C_Init+0x84>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4a80      	ldr	r2, [pc, #512]	@ (8003f7c <HAL_I2C_Init+0x278>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	bf94      	ite	ls
 8003d80:	2301      	movls	r3, #1
 8003d82:	2300      	movhi	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	e006      	b.n	8003d96 <HAL_I2C_Init+0x92>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4a7d      	ldr	r2, [pc, #500]	@ (8003f80 <HAL_I2C_Init+0x27c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	bf94      	ite	ls
 8003d90:	2301      	movls	r3, #1
 8003d92:	2300      	movhi	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e0e7      	b.n	8003f6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4a78      	ldr	r2, [pc, #480]	@ (8003f84 <HAL_I2C_Init+0x280>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	0c9b      	lsrs	r3, r3, #18
 8003da8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	4a6a      	ldr	r2, [pc, #424]	@ (8003f78 <HAL_I2C_Init+0x274>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d802      	bhi.n	8003dd8 <HAL_I2C_Init+0xd4>
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	e009      	b.n	8003dec <HAL_I2C_Init+0xe8>
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003dde:	fb02 f303 	mul.w	r3, r2, r3
 8003de2:	4a69      	ldr	r2, [pc, #420]	@ (8003f88 <HAL_I2C_Init+0x284>)
 8003de4:	fba2 2303 	umull	r2, r3, r2, r3
 8003de8:	099b      	lsrs	r3, r3, #6
 8003dea:	3301      	adds	r3, #1
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6812      	ldr	r2, [r2, #0]
 8003df0:	430b      	orrs	r3, r1
 8003df2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003dfe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	495c      	ldr	r1, [pc, #368]	@ (8003f78 <HAL_I2C_Init+0x274>)
 8003e08:	428b      	cmp	r3, r1
 8003e0a:	d819      	bhi.n	8003e40 <HAL_I2C_Init+0x13c>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	1e59      	subs	r1, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e1a:	1c59      	adds	r1, r3, #1
 8003e1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003e20:	400b      	ands	r3, r1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_I2C_Init+0x138>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	1e59      	subs	r1, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e34:	3301      	adds	r3, #1
 8003e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e3a:	e051      	b.n	8003ee0 <HAL_I2C_Init+0x1dc>
 8003e3c:	2304      	movs	r3, #4
 8003e3e:	e04f      	b.n	8003ee0 <HAL_I2C_Init+0x1dc>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d111      	bne.n	8003e6c <HAL_I2C_Init+0x168>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1e58      	subs	r0, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6859      	ldr	r1, [r3, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	440b      	add	r3, r1
 8003e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	bf0c      	ite	eq
 8003e64:	2301      	moveq	r3, #1
 8003e66:	2300      	movne	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	e012      	b.n	8003e92 <HAL_I2C_Init+0x18e>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1e58      	subs	r0, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6859      	ldr	r1, [r3, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	0099      	lsls	r1, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e82:	3301      	adds	r3, #1
 8003e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	bf0c      	ite	eq
 8003e8c:	2301      	moveq	r3, #1
 8003e8e:	2300      	movne	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_I2C_Init+0x196>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e022      	b.n	8003ee0 <HAL_I2C_Init+0x1dc>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10e      	bne.n	8003ec0 <HAL_I2C_Init+0x1bc>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1e58      	subs	r0, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6859      	ldr	r1, [r3, #4]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	440b      	add	r3, r1
 8003eb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ebe:	e00f      	b.n	8003ee0 <HAL_I2C_Init+0x1dc>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	1e58      	subs	r0, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6859      	ldr	r1, [r3, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	0099      	lsls	r1, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003edc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	6809      	ldr	r1, [r1, #0]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69da      	ldr	r2, [r3, #28]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003f0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6911      	ldr	r1, [r2, #16]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68d2      	ldr	r2, [r2, #12]
 8003f1a:	4311      	orrs	r1, r2
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	430b      	orrs	r3, r1
 8003f22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695a      	ldr	r2, [r3, #20]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	000186a0 	.word	0x000186a0
 8003f7c:	001e847f 	.word	0x001e847f
 8003f80:	003d08ff 	.word	0x003d08ff
 8003f84:	431bde83 	.word	0x431bde83
 8003f88:	10624dd3 	.word	0x10624dd3

08003f8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af02      	add	r7, sp, #8
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	607a      	str	r2, [r7, #4]
 8003f96:	461a      	mov	r2, r3
 8003f98:	460b      	mov	r3, r1
 8003f9a:	817b      	strh	r3, [r7, #10]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fa0:	f7fe fe04 	bl	8002bac <HAL_GetTick>
 8003fa4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b20      	cmp	r3, #32
 8003fb0:	f040 80e0 	bne.w	8004174 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	2319      	movs	r3, #25
 8003fba:	2201      	movs	r2, #1
 8003fbc:	4970      	ldr	r1, [pc, #448]	@ (8004180 <HAL_I2C_Master_Transmit+0x1f4>)
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f964 	bl	800428c <I2C_WaitOnFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e0d3      	b.n	8004176 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_I2C_Master_Transmit+0x50>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e0cc      	b.n	8004176 <HAL_I2C_Master_Transmit+0x1ea>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d007      	beq.n	8004002 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0201 	orr.w	r2, r2, #1
 8004000:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004010:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2221      	movs	r2, #33	@ 0x21
 8004016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2210      	movs	r2, #16
 800401e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	893a      	ldrh	r2, [r7, #8]
 8004032:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4a50      	ldr	r2, [pc, #320]	@ (8004184 <HAL_I2C_Master_Transmit+0x1f8>)
 8004042:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004044:	8979      	ldrh	r1, [r7, #10]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	6a3a      	ldr	r2, [r7, #32]
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f89c 	bl	8004188 <I2C_MasterRequestWrite>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e08d      	b.n	8004176 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405a:	2300      	movs	r3, #0
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004070:	e066      	b.n	8004140 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	6a39      	ldr	r1, [r7, #32]
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 fa22 	bl	80044c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00d      	beq.n	800409e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004086:	2b04      	cmp	r3, #4
 8004088:	d107      	bne.n	800409a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004098:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e06b      	b.n	8004176 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a2:	781a      	ldrb	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d11b      	bne.n	8004114 <HAL_I2C_Master_Transmit+0x188>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d017      	beq.n	8004114 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e8:	781a      	ldrb	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	6a39      	ldr	r1, [r7, #32]
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 fa19 	bl	8004550 <I2C_WaitOnBTFFlagUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00d      	beq.n	8004140 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004128:	2b04      	cmp	r3, #4
 800412a:	d107      	bne.n	800413c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800413a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e01a      	b.n	8004176 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004144:	2b00      	cmp	r3, #0
 8004146:	d194      	bne.n	8004072 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	e000      	b.n	8004176 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004174:	2302      	movs	r3, #2
  }
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	00100002 	.word	0x00100002
 8004184:	ffff0000 	.word	0xffff0000

08004188 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af02      	add	r7, sp, #8
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	607a      	str	r2, [r7, #4]
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	460b      	mov	r3, r1
 8004196:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d006      	beq.n	80041b2 <I2C_MasterRequestWrite+0x2a>
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d003      	beq.n	80041b2 <I2C_MasterRequestWrite+0x2a>
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041b0:	d108      	bne.n	80041c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	e00b      	b.n	80041dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c8:	2b12      	cmp	r3, #18
 80041ca:	d107      	bne.n	80041dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 f84f 	bl	800428c <I2C_WaitOnFlagUntilTimeout>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00d      	beq.n	8004210 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004202:	d103      	bne.n	800420c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800420a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e035      	b.n	800427c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004218:	d108      	bne.n	800422c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800421a:	897b      	ldrh	r3, [r7, #10]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	461a      	mov	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004228:	611a      	str	r2, [r3, #16]
 800422a:	e01b      	b.n	8004264 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800422c:	897b      	ldrh	r3, [r7, #10]
 800422e:	11db      	asrs	r3, r3, #7
 8004230:	b2db      	uxtb	r3, r3
 8004232:	f003 0306 	and.w	r3, r3, #6
 8004236:	b2db      	uxtb	r3, r3
 8004238:	f063 030f 	orn	r3, r3, #15
 800423c:	b2da      	uxtb	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	490e      	ldr	r1, [pc, #56]	@ (8004284 <I2C_MasterRequestWrite+0xfc>)
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f898 	bl	8004380 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e010      	b.n	800427c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800425a:	897b      	ldrh	r3, [r7, #10]
 800425c:	b2da      	uxtb	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	4907      	ldr	r1, [pc, #28]	@ (8004288 <I2C_MasterRequestWrite+0x100>)
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 f888 	bl	8004380 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	00010008 	.word	0x00010008
 8004288:	00010002 	.word	0x00010002

0800428c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	4613      	mov	r3, r2
 800429a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800429c:	e048      	b.n	8004330 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a4:	d044      	beq.n	8004330 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a6:	f7fe fc81 	bl	8002bac <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d302      	bcc.n	80042bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d139      	bne.n	8004330 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	0c1b      	lsrs	r3, r3, #16
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d10d      	bne.n	80042e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	43da      	mvns	r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	4013      	ands	r3, r2
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bf0c      	ite	eq
 80042d8:	2301      	moveq	r3, #1
 80042da:	2300      	movne	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	e00c      	b.n	80042fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	43da      	mvns	r2, r3
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	4013      	ands	r3, r2
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	bf0c      	ite	eq
 80042f4:	2301      	moveq	r3, #1
 80042f6:	2300      	movne	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	461a      	mov	r2, r3
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d116      	bne.n	8004330 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2220      	movs	r2, #32
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431c:	f043 0220 	orr.w	r2, r3, #32
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e023      	b.n	8004378 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	0c1b      	lsrs	r3, r3, #16
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b01      	cmp	r3, #1
 8004338:	d10d      	bne.n	8004356 <I2C_WaitOnFlagUntilTimeout+0xca>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	43da      	mvns	r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	4013      	ands	r3, r2
 8004346:	b29b      	uxth	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	bf0c      	ite	eq
 800434c:	2301      	moveq	r3, #1
 800434e:	2300      	movne	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	461a      	mov	r2, r3
 8004354:	e00c      	b.n	8004370 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	43da      	mvns	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	4013      	ands	r3, r2
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	bf0c      	ite	eq
 8004368:	2301      	moveq	r3, #1
 800436a:	2300      	movne	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	429a      	cmp	r2, r3
 8004374:	d093      	beq.n	800429e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800438e:	e071      	b.n	8004474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800439a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800439e:	d123      	bne.n	80043e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d4:	f043 0204 	orr.w	r2, r3, #4
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e067      	b.n	80044b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ee:	d041      	beq.n	8004474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f0:	f7fe fbdc 	bl	8002bac <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d302      	bcc.n	8004406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d136      	bne.n	8004474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	0c1b      	lsrs	r3, r3, #16
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b01      	cmp	r3, #1
 800440e:	d10c      	bne.n	800442a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	43da      	mvns	r2, r3
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	4013      	ands	r3, r2
 800441c:	b29b      	uxth	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	bf14      	ite	ne
 8004422:	2301      	movne	r3, #1
 8004424:	2300      	moveq	r3, #0
 8004426:	b2db      	uxtb	r3, r3
 8004428:	e00b      	b.n	8004442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	43da      	mvns	r2, r3
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	4013      	ands	r3, r2
 8004436:	b29b      	uxth	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	bf14      	ite	ne
 800443c:	2301      	movne	r3, #1
 800443e:	2300      	moveq	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d016      	beq.n	8004474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004460:	f043 0220 	orr.w	r2, r3, #32
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e021      	b.n	80044b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	0c1b      	lsrs	r3, r3, #16
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b01      	cmp	r3, #1
 800447c:	d10c      	bne.n	8004498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	43da      	mvns	r2, r3
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	4013      	ands	r3, r2
 800448a:	b29b      	uxth	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	bf14      	ite	ne
 8004490:	2301      	movne	r3, #1
 8004492:	2300      	moveq	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	e00b      	b.n	80044b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	43da      	mvns	r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4013      	ands	r3, r2
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	bf14      	ite	ne
 80044aa:	2301      	movne	r3, #1
 80044ac:	2300      	moveq	r3, #0
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f47f af6d 	bne.w	8004390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044cc:	e034      	b.n	8004538 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 f886 	bl	80045e0 <I2C_IsAcknowledgeFailed>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e034      	b.n	8004548 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e4:	d028      	beq.n	8004538 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e6:	f7fe fb61 	bl	8002bac <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d302      	bcc.n	80044fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d11d      	bne.n	8004538 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004506:	2b80      	cmp	r3, #128	@ 0x80
 8004508:	d016      	beq.n	8004538 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004524:	f043 0220 	orr.w	r2, r3, #32
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e007      	b.n	8004548 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004542:	2b80      	cmp	r3, #128	@ 0x80
 8004544:	d1c3      	bne.n	80044ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800455c:	e034      	b.n	80045c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 f83e 	bl	80045e0 <I2C_IsAcknowledgeFailed>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e034      	b.n	80045d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004574:	d028      	beq.n	80045c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004576:	f7fe fb19 	bl	8002bac <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	429a      	cmp	r2, r3
 8004584:	d302      	bcc.n	800458c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d11d      	bne.n	80045c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b04      	cmp	r3, #4
 8004598:	d016      	beq.n	80045c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b4:	f043 0220 	orr.w	r2, r3, #32
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e007      	b.n	80045d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	f003 0304 	and.w	r3, r3, #4
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d1c3      	bne.n	800455e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045f6:	d11b      	bne.n	8004630 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004600:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2220      	movs	r2, #32
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461c:	f043 0204 	orr.w	r2, r3, #4
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr

0800463c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e272      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 8087 	beq.w	800476a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800465c:	4b92      	ldr	r3, [pc, #584]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f003 030c 	and.w	r3, r3, #12
 8004664:	2b04      	cmp	r3, #4
 8004666:	d00c      	beq.n	8004682 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004668:	4b8f      	ldr	r3, [pc, #572]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f003 030c 	and.w	r3, r3, #12
 8004670:	2b08      	cmp	r3, #8
 8004672:	d112      	bne.n	800469a <HAL_RCC_OscConfig+0x5e>
 8004674:	4b8c      	ldr	r3, [pc, #560]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800467c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004680:	d10b      	bne.n	800469a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004682:	4b89      	ldr	r3, [pc, #548]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d06c      	beq.n	8004768 <HAL_RCC_OscConfig+0x12c>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d168      	bne.n	8004768 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e24c      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046a2:	d106      	bne.n	80046b2 <HAL_RCC_OscConfig+0x76>
 80046a4:	4b80      	ldr	r3, [pc, #512]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a7f      	ldr	r2, [pc, #508]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80046aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	e02e      	b.n	8004710 <HAL_RCC_OscConfig+0xd4>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10c      	bne.n	80046d4 <HAL_RCC_OscConfig+0x98>
 80046ba:	4b7b      	ldr	r3, [pc, #492]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a7a      	ldr	r2, [pc, #488]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80046c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	4b78      	ldr	r3, [pc, #480]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a77      	ldr	r2, [pc, #476]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80046cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	e01d      	b.n	8004710 <HAL_RCC_OscConfig+0xd4>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046dc:	d10c      	bne.n	80046f8 <HAL_RCC_OscConfig+0xbc>
 80046de:	4b72      	ldr	r3, [pc, #456]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a71      	ldr	r2, [pc, #452]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80046e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	4b6f      	ldr	r3, [pc, #444]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a6e      	ldr	r2, [pc, #440]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80046f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	e00b      	b.n	8004710 <HAL_RCC_OscConfig+0xd4>
 80046f8:	4b6b      	ldr	r3, [pc, #428]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a6a      	ldr	r2, [pc, #424]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80046fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004702:	6013      	str	r3, [r2, #0]
 8004704:	4b68      	ldr	r3, [pc, #416]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a67      	ldr	r2, [pc, #412]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 800470a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800470e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d013      	beq.n	8004740 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004718:	f7fe fa48 	bl	8002bac <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004720:	f7fe fa44 	bl	8002bac <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b64      	cmp	r3, #100	@ 0x64
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e200      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004732:	4b5d      	ldr	r3, [pc, #372]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0f0      	beq.n	8004720 <HAL_RCC_OscConfig+0xe4>
 800473e:	e014      	b.n	800476a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004740:	f7fe fa34 	bl	8002bac <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004748:	f7fe fa30 	bl	8002bac <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b64      	cmp	r3, #100	@ 0x64
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e1ec      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800475a:	4b53      	ldr	r3, [pc, #332]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1f0      	bne.n	8004748 <HAL_RCC_OscConfig+0x10c>
 8004766:	e000      	b.n	800476a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d063      	beq.n	800483e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004776:	4b4c      	ldr	r3, [pc, #304]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f003 030c 	and.w	r3, r3, #12
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00b      	beq.n	800479a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004782:	4b49      	ldr	r3, [pc, #292]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f003 030c 	and.w	r3, r3, #12
 800478a:	2b08      	cmp	r3, #8
 800478c:	d11c      	bne.n	80047c8 <HAL_RCC_OscConfig+0x18c>
 800478e:	4b46      	ldr	r3, [pc, #280]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d116      	bne.n	80047c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800479a:	4b43      	ldr	r3, [pc, #268]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d005      	beq.n	80047b2 <HAL_RCC_OscConfig+0x176>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d001      	beq.n	80047b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e1c0      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b2:	4b3d      	ldr	r3, [pc, #244]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	4939      	ldr	r1, [pc, #228]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047c6:	e03a      	b.n	800483e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d020      	beq.n	8004812 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047d0:	4b36      	ldr	r3, [pc, #216]	@ (80048ac <HAL_RCC_OscConfig+0x270>)
 80047d2:	2201      	movs	r2, #1
 80047d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d6:	f7fe f9e9 	bl	8002bac <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047de:	f7fe f9e5 	bl	8002bac <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e1a1      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f0:	4b2d      	ldr	r3, [pc, #180]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0f0      	beq.n	80047de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fc:	4b2a      	ldr	r3, [pc, #168]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	4927      	ldr	r1, [pc, #156]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 800480c:	4313      	orrs	r3, r2
 800480e:	600b      	str	r3, [r1, #0]
 8004810:	e015      	b.n	800483e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004812:	4b26      	ldr	r3, [pc, #152]	@ (80048ac <HAL_RCC_OscConfig+0x270>)
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004818:	f7fe f9c8 	bl	8002bac <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004820:	f7fe f9c4 	bl	8002bac <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e180      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004832:	4b1d      	ldr	r3, [pc, #116]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f0      	bne.n	8004820 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d03a      	beq.n	80048c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d019      	beq.n	8004886 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004852:	4b17      	ldr	r3, [pc, #92]	@ (80048b0 <HAL_RCC_OscConfig+0x274>)
 8004854:	2201      	movs	r2, #1
 8004856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004858:	f7fe f9a8 	bl	8002bac <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004860:	f7fe f9a4 	bl	8002bac <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e160      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004872:	4b0d      	ldr	r3, [pc, #52]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 8004874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0f0      	beq.n	8004860 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800487e:	2001      	movs	r0, #1
 8004880:	f000 face 	bl	8004e20 <RCC_Delay>
 8004884:	e01c      	b.n	80048c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004886:	4b0a      	ldr	r3, [pc, #40]	@ (80048b0 <HAL_RCC_OscConfig+0x274>)
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800488c:	f7fe f98e 	bl	8002bac <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004892:	e00f      	b.n	80048b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004894:	f7fe f98a 	bl	8002bac <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d908      	bls.n	80048b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e146      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
 80048a6:	bf00      	nop
 80048a8:	40021000 	.word	0x40021000
 80048ac:	42420000 	.word	0x42420000
 80048b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048b4:	4b92      	ldr	r3, [pc, #584]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 80048b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e9      	bne.n	8004894 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 80a6 	beq.w	8004a1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048ce:	2300      	movs	r3, #0
 80048d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048d2:	4b8b      	ldr	r3, [pc, #556]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10d      	bne.n	80048fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048de:	4b88      	ldr	r3, [pc, #544]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	4a87      	ldr	r2, [pc, #540]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 80048e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048e8:	61d3      	str	r3, [r2, #28]
 80048ea:	4b85      	ldr	r3, [pc, #532]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048f2:	60bb      	str	r3, [r7, #8]
 80048f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048f6:	2301      	movs	r3, #1
 80048f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fa:	4b82      	ldr	r3, [pc, #520]	@ (8004b04 <HAL_RCC_OscConfig+0x4c8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004902:	2b00      	cmp	r3, #0
 8004904:	d118      	bne.n	8004938 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004906:	4b7f      	ldr	r3, [pc, #508]	@ (8004b04 <HAL_RCC_OscConfig+0x4c8>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a7e      	ldr	r2, [pc, #504]	@ (8004b04 <HAL_RCC_OscConfig+0x4c8>)
 800490c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004912:	f7fe f94b 	bl	8002bac <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800491a:	f7fe f947 	bl	8002bac <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b64      	cmp	r3, #100	@ 0x64
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e103      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800492c:	4b75      	ldr	r3, [pc, #468]	@ (8004b04 <HAL_RCC_OscConfig+0x4c8>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f0      	beq.n	800491a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d106      	bne.n	800494e <HAL_RCC_OscConfig+0x312>
 8004940:	4b6f      	ldr	r3, [pc, #444]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	4a6e      	ldr	r2, [pc, #440]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004946:	f043 0301 	orr.w	r3, r3, #1
 800494a:	6213      	str	r3, [r2, #32]
 800494c:	e02d      	b.n	80049aa <HAL_RCC_OscConfig+0x36e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10c      	bne.n	8004970 <HAL_RCC_OscConfig+0x334>
 8004956:	4b6a      	ldr	r3, [pc, #424]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	4a69      	ldr	r2, [pc, #420]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 800495c:	f023 0301 	bic.w	r3, r3, #1
 8004960:	6213      	str	r3, [r2, #32]
 8004962:	4b67      	ldr	r3, [pc, #412]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	4a66      	ldr	r2, [pc, #408]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004968:	f023 0304 	bic.w	r3, r3, #4
 800496c:	6213      	str	r3, [r2, #32]
 800496e:	e01c      	b.n	80049aa <HAL_RCC_OscConfig+0x36e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	2b05      	cmp	r3, #5
 8004976:	d10c      	bne.n	8004992 <HAL_RCC_OscConfig+0x356>
 8004978:	4b61      	ldr	r3, [pc, #388]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	4a60      	ldr	r2, [pc, #384]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 800497e:	f043 0304 	orr.w	r3, r3, #4
 8004982:	6213      	str	r3, [r2, #32]
 8004984:	4b5e      	ldr	r3, [pc, #376]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	4a5d      	ldr	r2, [pc, #372]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	6213      	str	r3, [r2, #32]
 8004990:	e00b      	b.n	80049aa <HAL_RCC_OscConfig+0x36e>
 8004992:	4b5b      	ldr	r3, [pc, #364]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	4a5a      	ldr	r2, [pc, #360]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004998:	f023 0301 	bic.w	r3, r3, #1
 800499c:	6213      	str	r3, [r2, #32]
 800499e:	4b58      	ldr	r3, [pc, #352]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	4a57      	ldr	r2, [pc, #348]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 80049a4:	f023 0304 	bic.w	r3, r3, #4
 80049a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d015      	beq.n	80049de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b2:	f7fe f8fb 	bl	8002bac <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b8:	e00a      	b.n	80049d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ba:	f7fe f8f7 	bl	8002bac <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e0b1      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d0:	4b4b      	ldr	r3, [pc, #300]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0ee      	beq.n	80049ba <HAL_RCC_OscConfig+0x37e>
 80049dc:	e014      	b.n	8004a08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049de:	f7fe f8e5 	bl	8002bac <HAL_GetTick>
 80049e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049e4:	e00a      	b.n	80049fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049e6:	f7fe f8e1 	bl	8002bac <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e09b      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049fc:	4b40      	ldr	r3, [pc, #256]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1ee      	bne.n	80049e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d105      	bne.n	8004a1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a0e:	4b3c      	ldr	r3, [pc, #240]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	4a3b      	ldr	r2, [pc, #236]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004a14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 8087 	beq.w	8004b32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a24:	4b36      	ldr	r3, [pc, #216]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f003 030c 	and.w	r3, r3, #12
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d061      	beq.n	8004af4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d146      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a38:	4b33      	ldr	r3, [pc, #204]	@ (8004b08 <HAL_RCC_OscConfig+0x4cc>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3e:	f7fe f8b5 	bl	8002bac <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a46:	f7fe f8b1 	bl	8002bac <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e06d      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a58:	4b29      	ldr	r3, [pc, #164]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1f0      	bne.n	8004a46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a6c:	d108      	bne.n	8004a80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a6e:	4b24      	ldr	r3, [pc, #144]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	4921      	ldr	r1, [pc, #132]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a80:	4b1f      	ldr	r3, [pc, #124]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a19      	ldr	r1, [r3, #32]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a90:	430b      	orrs	r3, r1
 8004a92:	491b      	ldr	r1, [pc, #108]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a98:	4b1b      	ldr	r3, [pc, #108]	@ (8004b08 <HAL_RCC_OscConfig+0x4cc>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9e:	f7fe f885 	bl	8002bac <HAL_GetTick>
 8004aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa6:	f7fe f881 	bl	8002bac <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e03d      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ab8:	4b11      	ldr	r3, [pc, #68]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0f0      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x46a>
 8004ac4:	e035      	b.n	8004b32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac6:	4b10      	ldr	r3, [pc, #64]	@ (8004b08 <HAL_RCC_OscConfig+0x4cc>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004acc:	f7fe f86e 	bl	8002bac <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad4:	f7fe f86a 	bl	8002bac <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e026      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ae6:	4b06      	ldr	r3, [pc, #24]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x498>
 8004af2:	e01e      	b.n	8004b32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d107      	bne.n	8004b0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e019      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
 8004b00:	40021000 	.word	0x40021000
 8004b04:	40007000 	.word	0x40007000
 8004b08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b3c <HAL_RCC_OscConfig+0x500>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d106      	bne.n	8004b2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d001      	beq.n	8004b32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40021000 	.word	0x40021000

08004b40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e0d0      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b54:	4b6a      	ldr	r3, [pc, #424]	@ (8004d00 <HAL_RCC_ClockConfig+0x1c0>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d910      	bls.n	8004b84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b62:	4b67      	ldr	r3, [pc, #412]	@ (8004d00 <HAL_RCC_ClockConfig+0x1c0>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f023 0207 	bic.w	r2, r3, #7
 8004b6a:	4965      	ldr	r1, [pc, #404]	@ (8004d00 <HAL_RCC_ClockConfig+0x1c0>)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b72:	4b63      	ldr	r3, [pc, #396]	@ (8004d00 <HAL_RCC_ClockConfig+0x1c0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d001      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e0b8      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d020      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b9c:	4b59      	ldr	r3, [pc, #356]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	4a58      	ldr	r2, [pc, #352]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004ba6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0308 	and.w	r3, r3, #8
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bb4:	4b53      	ldr	r3, [pc, #332]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	4a52      	ldr	r2, [pc, #328]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004bba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004bbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bc0:	4b50      	ldr	r3, [pc, #320]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	494d      	ldr	r1, [pc, #308]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d040      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d107      	bne.n	8004bf6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be6:	4b47      	ldr	r3, [pc, #284]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d115      	bne.n	8004c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e07f      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d107      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bfe:	4b41      	ldr	r3, [pc, #260]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d109      	bne.n	8004c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e073      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c0e:	4b3d      	ldr	r3, [pc, #244]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e06b      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c1e:	4b39      	ldr	r3, [pc, #228]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f023 0203 	bic.w	r2, r3, #3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	4936      	ldr	r1, [pc, #216]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c30:	f7fd ffbc 	bl	8002bac <HAL_GetTick>
 8004c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c36:	e00a      	b.n	8004c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c38:	f7fd ffb8 	bl	8002bac <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e053      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f003 020c 	and.w	r2, r3, #12
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d1eb      	bne.n	8004c38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c60:	4b27      	ldr	r3, [pc, #156]	@ (8004d00 <HAL_RCC_ClockConfig+0x1c0>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d210      	bcs.n	8004c90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6e:	4b24      	ldr	r3, [pc, #144]	@ (8004d00 <HAL_RCC_ClockConfig+0x1c0>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f023 0207 	bic.w	r2, r3, #7
 8004c76:	4922      	ldr	r1, [pc, #136]	@ (8004d00 <HAL_RCC_ClockConfig+0x1c0>)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7e:	4b20      	ldr	r3, [pc, #128]	@ (8004d00 <HAL_RCC_ClockConfig+0x1c0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d001      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e032      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d008      	beq.n	8004cae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c9c:	4b19      	ldr	r3, [pc, #100]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	4916      	ldr	r1, [pc, #88]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d009      	beq.n	8004cce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004cba:	4b12      	ldr	r3, [pc, #72]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	490e      	ldr	r1, [pc, #56]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cce:	f000 f821 	bl	8004d14 <HAL_RCC_GetSysClockFreq>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	091b      	lsrs	r3, r3, #4
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	490a      	ldr	r1, [pc, #40]	@ (8004d08 <HAL_RCC_ClockConfig+0x1c8>)
 8004ce0:	5ccb      	ldrb	r3, [r1, r3]
 8004ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce6:	4a09      	ldr	r2, [pc, #36]	@ (8004d0c <HAL_RCC_ClockConfig+0x1cc>)
 8004ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004cea:	4b09      	ldr	r3, [pc, #36]	@ (8004d10 <HAL_RCC_ClockConfig+0x1d0>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fd ff1a 	bl	8002b28 <HAL_InitTick>

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	40022000 	.word	0x40022000
 8004d04:	40021000 	.word	0x40021000
 8004d08:	0800c218 	.word	0x0800c218
 8004d0c:	20000004 	.word	0x20000004
 8004d10:	20000008 	.word	0x20000008

08004d14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60bb      	str	r3, [r7, #8]
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	2300      	movs	r3, #0
 8004d28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8004da8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 030c 	and.w	r3, r3, #12
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d002      	beq.n	8004d44 <HAL_RCC_GetSysClockFreq+0x30>
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d003      	beq.n	8004d4a <HAL_RCC_GetSysClockFreq+0x36>
 8004d42:	e027      	b.n	8004d94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d44:	4b19      	ldr	r3, [pc, #100]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x98>)
 8004d46:	613b      	str	r3, [r7, #16]
      break;
 8004d48:	e027      	b.n	8004d9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	0c9b      	lsrs	r3, r3, #18
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	4a17      	ldr	r2, [pc, #92]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d54:	5cd3      	ldrb	r3, [r2, r3]
 8004d56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d010      	beq.n	8004d84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d62:	4b11      	ldr	r3, [pc, #68]	@ (8004da8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	0c5b      	lsrs	r3, r3, #17
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	4a11      	ldr	r2, [pc, #68]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d6e:	5cd3      	ldrb	r3, [r2, r3]
 8004d70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a0d      	ldr	r2, [pc, #52]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x98>)
 8004d76:	fb03 f202 	mul.w	r2, r3, r2
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	e004      	b.n	8004d8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a0c      	ldr	r2, [pc, #48]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d88:	fb02 f303 	mul.w	r3, r2, r3
 8004d8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	613b      	str	r3, [r7, #16]
      break;
 8004d92:	e002      	b.n	8004d9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d94:	4b05      	ldr	r3, [pc, #20]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x98>)
 8004d96:	613b      	str	r3, [r7, #16]
      break;
 8004d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d9a:	693b      	ldr	r3, [r7, #16]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	371c      	adds	r7, #28
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bc80      	pop	{r7}
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40021000 	.word	0x40021000
 8004dac:	007a1200 	.word	0x007a1200
 8004db0:	0800c230 	.word	0x0800c230
 8004db4:	0800c240 	.word	0x0800c240
 8004db8:	003d0900 	.word	0x003d0900

08004dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dc0:	4b02      	ldr	r3, [pc, #8]	@ (8004dcc <HAL_RCC_GetHCLKFreq+0x10>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr
 8004dcc:	20000004 	.word	0x20000004

08004dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004dd4:	f7ff fff2 	bl	8004dbc <HAL_RCC_GetHCLKFreq>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	4b05      	ldr	r3, [pc, #20]	@ (8004df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	0a1b      	lsrs	r3, r3, #8
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	4903      	ldr	r1, [pc, #12]	@ (8004df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004de6:	5ccb      	ldrb	r3, [r1, r3]
 8004de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40021000 	.word	0x40021000
 8004df4:	0800c228 	.word	0x0800c228

08004df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004dfc:	f7ff ffde 	bl	8004dbc <HAL_RCC_GetHCLKFreq>
 8004e00:	4602      	mov	r2, r0
 8004e02:	4b05      	ldr	r3, [pc, #20]	@ (8004e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	0adb      	lsrs	r3, r3, #11
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	4903      	ldr	r1, [pc, #12]	@ (8004e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e0e:	5ccb      	ldrb	r3, [r1, r3]
 8004e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	0800c228 	.word	0x0800c228

08004e20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e28:	4b0a      	ldr	r3, [pc, #40]	@ (8004e54 <RCC_Delay+0x34>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8004e58 <RCC_Delay+0x38>)
 8004e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e32:	0a5b      	lsrs	r3, r3, #9
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	fb02 f303 	mul.w	r3, r2, r3
 8004e3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e3c:	bf00      	nop
  }
  while (Delay --);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	1e5a      	subs	r2, r3, #1
 8004e42:	60fa      	str	r2, [r7, #12]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1f9      	bne.n	8004e3c <RCC_Delay+0x1c>
}
 8004e48:	bf00      	nop
 8004e4a:	bf00      	nop
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bc80      	pop	{r7}
 8004e52:	4770      	bx	lr
 8004e54:	20000004 	.word	0x20000004
 8004e58:	10624dd3 	.word	0x10624dd3

08004e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	613b      	str	r3, [r7, #16]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d07d      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e7c:	4b4f      	ldr	r3, [pc, #316]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10d      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e88:	4b4c      	ldr	r3, [pc, #304]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	4a4b      	ldr	r2, [pc, #300]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e92:	61d3      	str	r3, [r2, #28]
 8004e94:	4b49      	ldr	r3, [pc, #292]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e9c:	60bb      	str	r3, [r7, #8]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea4:	4b46      	ldr	r3, [pc, #280]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d118      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eb0:	4b43      	ldr	r3, [pc, #268]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a42      	ldr	r2, [pc, #264]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ebc:	f7fd fe76 	bl	8002bac <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ec4:	f7fd fe72 	bl	8002bac <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b64      	cmp	r3, #100	@ 0x64
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e06d      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed6:	4b3a      	ldr	r3, [pc, #232]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0f0      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ee2:	4b36      	ldr	r3, [pc, #216]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d02e      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d027      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f00:	4b2e      	ldr	r3, [pc, #184]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f0a:	4b2e      	ldr	r3, [pc, #184]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f10:	4b2c      	ldr	r3, [pc, #176]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f16:	4a29      	ldr	r2, [pc, #164]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d014      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f26:	f7fd fe41 	bl	8002bac <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f2c:	e00a      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f2e:	f7fd fe3d 	bl	8002bac <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e036      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f44:	4b1d      	ldr	r3, [pc, #116]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0ee      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f50:	4b1a      	ldr	r3, [pc, #104]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	4917      	ldr	r1, [pc, #92]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f62:	7dfb      	ldrb	r3, [r7, #23]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d105      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f68:	4b14      	ldr	r3, [pc, #80]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	4a13      	ldr	r2, [pc, #76]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d008      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f80:	4b0e      	ldr	r3, [pc, #56]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	490b      	ldr	r1, [pc, #44]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0310 	and.w	r3, r3, #16
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d008      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f9e:	4b07      	ldr	r3, [pc, #28]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	4904      	ldr	r1, [pc, #16]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	40007000 	.word	0x40007000
 8004fc4:	42420440 	.word	0x42420440

08004fc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e076      	b.n	80050c8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d108      	bne.n	8004ff4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fea:	d009      	beq.n	8005000 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	61da      	str	r2, [r3, #28]
 8004ff2:	e005      	b.n	8005000 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d106      	bne.n	8005020 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7fd fb12 	bl	8002644 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005036:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005048:	431a      	orrs	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	431a      	orrs	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005070:	431a      	orrs	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005084:	ea42 0103 	orr.w	r1, r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	0c1a      	lsrs	r2, r3, #16
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f002 0204 	and.w	r2, r2, #4
 80050a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69da      	ldr	r2, [r3, #28]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	603b      	str	r3, [r7, #0]
 80050dc:	4613      	mov	r3, r2
 80050de:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050e0:	f7fd fd64 	bl	8002bac <HAL_GetTick>
 80050e4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80050e6:	88fb      	ldrh	r3, [r7, #6]
 80050e8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d001      	beq.n	80050fa <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80050f6:	2302      	movs	r3, #2
 80050f8:	e12a      	b.n	8005350 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <HAL_SPI_Transmit+0x36>
 8005100:	88fb      	ldrh	r3, [r7, #6]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e122      	b.n	8005350 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_SPI_Transmit+0x48>
 8005114:	2302      	movs	r3, #2
 8005116:	e11b      	b.n	8005350 <HAL_SPI_Transmit+0x280>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2203      	movs	r2, #3
 8005124:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	88fa      	ldrh	r2, [r7, #6]
 8005138:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	88fa      	ldrh	r2, [r7, #6]
 800513e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005166:	d10f      	bne.n	8005188 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005176:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005186:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005192:	2b40      	cmp	r3, #64	@ 0x40
 8005194:	d007      	beq.n	80051a6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051ae:	d152      	bne.n	8005256 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <HAL_SPI_Transmit+0xee>
 80051b8:	8b7b      	ldrh	r3, [r7, #26]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d145      	bne.n	800524a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c2:	881a      	ldrh	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ce:	1c9a      	adds	r2, r3, #2
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80051e2:	e032      	b.n	800524a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d112      	bne.n	8005218 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f6:	881a      	ldrh	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005202:	1c9a      	adds	r2, r3, #2
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005216:	e018      	b.n	800524a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005218:	f7fd fcc8 	bl	8002bac <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	429a      	cmp	r2, r3
 8005226:	d803      	bhi.n	8005230 <HAL_SPI_Transmit+0x160>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522e:	d102      	bne.n	8005236 <HAL_SPI_Transmit+0x166>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d109      	bne.n	800524a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e082      	b.n	8005350 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800524e:	b29b      	uxth	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1c7      	bne.n	80051e4 <HAL_SPI_Transmit+0x114>
 8005254:	e053      	b.n	80052fe <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <HAL_SPI_Transmit+0x194>
 800525e:	8b7b      	ldrh	r3, [r7, #26]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d147      	bne.n	80052f4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	330c      	adds	r3, #12
 800526e:	7812      	ldrb	r2, [r2, #0]
 8005270:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005280:	b29b      	uxth	r3, r3
 8005282:	3b01      	subs	r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800528a:	e033      	b.n	80052f4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b02      	cmp	r3, #2
 8005298:	d113      	bne.n	80052c2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	330c      	adds	r3, #12
 80052a4:	7812      	ldrb	r2, [r2, #0]
 80052a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	86da      	strh	r2, [r3, #54]	@ 0x36
 80052c0:	e018      	b.n	80052f4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052c2:	f7fd fc73 	bl	8002bac <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d803      	bhi.n	80052da <HAL_SPI_Transmit+0x20a>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d8:	d102      	bne.n	80052e0 <HAL_SPI_Transmit+0x210>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d109      	bne.n	80052f4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e02d      	b.n	8005350 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1c6      	bne.n	800528c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052fe:	69fa      	ldr	r2, [r7, #28]
 8005300:	6839      	ldr	r1, [r7, #0]
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 fae8 	bl	80058d8 <SPI_EndRxTxTransaction>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d002      	beq.n	8005314 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2220      	movs	r2, #32
 8005312:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10a      	bne.n	8005332 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800531c:	2300      	movs	r3, #0
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	617b      	str	r3, [r7, #20]
 8005330:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e000      	b.n	8005350 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800534e:	2300      	movs	r3, #0
  }
}
 8005350:	4618      	mov	r0, r3
 8005352:	3720      	adds	r7, #32
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	4613      	mov	r3, r2
 8005364:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b01      	cmp	r3, #1
 8005370:	d001      	beq.n	8005376 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8005372:	2302      	movs	r3, #2
 8005374:	e097      	b.n	80054a6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <HAL_SPI_Transmit_DMA+0x2a>
 800537c:	88fb      	ldrh	r3, [r7, #6]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e08f      	b.n	80054a6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_SPI_Transmit_DMA+0x3c>
 8005390:	2302      	movs	r3, #2
 8005392:	e088      	b.n	80054a6 <HAL_SPI_Transmit_DMA+0x14e>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2203      	movs	r2, #3
 80053a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	88fa      	ldrh	r2, [r7, #6]
 80053b4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	88fa      	ldrh	r2, [r7, #6]
 80053ba:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053e2:	d10f      	bne.n	8005404 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005402:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005408:	4a29      	ldr	r2, [pc, #164]	@ (80054b0 <HAL_SPI_Transmit_DMA+0x158>)
 800540a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005410:	4a28      	ldr	r2, [pc, #160]	@ (80054b4 <HAL_SPI_Transmit_DMA+0x15c>)
 8005412:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005418:	4a27      	ldr	r2, [pc, #156]	@ (80054b8 <HAL_SPI_Transmit_DMA+0x160>)
 800541a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005420:	2200      	movs	r2, #0
 8005422:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542c:	4619      	mov	r1, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	330c      	adds	r3, #12
 8005434:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800543a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800543c:	f7fe f866 	bl	800350c <HAL_DMA_Start_IT>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00b      	beq.n	800545e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800544a:	f043 0210 	orr.w	r2, r3, #16
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e023      	b.n	80054a6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005468:	2b40      	cmp	r3, #64	@ 0x40
 800546a:	d007      	beq.n	800547c <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800547a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0220 	orr.w	r2, r2, #32
 8005492:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f042 0202 	orr.w	r2, r2, #2
 80054a2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	08005743 	.word	0x08005743
 80054b4:	0800569d 	.word	0x0800569d
 80054b8:	0800575f 	.word	0x0800575f

080054bc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b088      	sub	sp, #32
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10e      	bne.n	80054fc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d009      	beq.n	80054fc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d004      	beq.n	80054fc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	4798      	blx	r3
    return;
 80054fa:	e0b7      	b.n	800566c <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d009      	beq.n	800551a <HAL_SPI_IRQHandler+0x5e>
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800550c:	2b00      	cmp	r3, #0
 800550e:	d004      	beq.n	800551a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	4798      	blx	r3
    return;
 8005518:	e0a8      	b.n	800566c <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	f003 0320 	and.w	r3, r3, #32
 8005520:	2b00      	cmp	r3, #0
 8005522:	d105      	bne.n	8005530 <HAL_SPI_IRQHandler+0x74>
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 809e 	beq.w	800566c <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 8098 	beq.w	800566c <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	d023      	beq.n	800558e <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b03      	cmp	r3, #3
 8005550:	d011      	beq.n	8005576 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005556:	f043 0204 	orr.w	r2, r3, #4
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	617b      	str	r3, [r7, #20]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	617b      	str	r3, [r7, #20]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	e00b      	b.n	800558e <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005576:	2300      	movs	r3, #0
 8005578:	613b      	str	r3, [r7, #16]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	613b      	str	r3, [r7, #16]
 800558a:	693b      	ldr	r3, [r7, #16]
        return;
 800558c:	e06e      	b.n	800566c <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	f003 0320 	and.w	r3, r3, #32
 8005594:	2b00      	cmp	r3, #0
 8005596:	d014      	beq.n	80055c2 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800559c:	f043 0201 	orr.w	r2, r3, #1
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80055a4:	2300      	movs	r3, #0
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d04f      	beq.n	800566a <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80055d8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d104      	bne.n	80055f6 <HAL_SPI_IRQHandler+0x13a>
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d034      	beq.n	8005660 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0203 	bic.w	r2, r2, #3
 8005604:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800560a:	2b00      	cmp	r3, #0
 800560c:	d011      	beq.n	8005632 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005612:	4a18      	ldr	r2, [pc, #96]	@ (8005674 <HAL_SPI_IRQHandler+0x1b8>)
 8005614:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800561a:	4618      	mov	r0, r3
 800561c:	f7fe f812 	bl	8003644 <HAL_DMA_Abort_IT>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d005      	beq.n	8005632 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800562a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005636:	2b00      	cmp	r3, #0
 8005638:	d016      	beq.n	8005668 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800563e:	4a0d      	ldr	r2, [pc, #52]	@ (8005674 <HAL_SPI_IRQHandler+0x1b8>)
 8005640:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005646:	4618      	mov	r0, r3
 8005648:	f7fd fffc 	bl	8003644 <HAL_DMA_Abort_IT>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005656:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800565e:	e003      	b.n	8005668 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f812 	bl	800568a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005666:	e000      	b.n	800566a <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8005668:	bf00      	nop
    return;
 800566a:	bf00      	nop
  }
}
 800566c:	3720      	adds	r7, #32
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	0800579f 	.word	0x0800579f

08005678 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	bc80      	pop	{r7}
 8005688:	4770      	bx	lr

0800568a <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	bc80      	pop	{r7}
 800569a:	4770      	bx	lr

0800569c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056aa:	f7fd fa7f 	bl	8002bac <HAL_GetTick>
 80056ae:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0320 	and.w	r3, r3, #32
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d03b      	beq.n	8005736 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0220 	bic.w	r2, r2, #32
 80056cc:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 0202 	bic.w	r2, r2, #2
 80056dc:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	2164      	movs	r1, #100	@ 0x64
 80056e2:	6978      	ldr	r0, [r7, #20]
 80056e4:	f000 f8f8 	bl	80058d8 <SPI_EndRxTxTransaction>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d005      	beq.n	80056fa <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f2:	f043 0220 	orr.w	r2, r3, #32
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10a      	bne.n	8005718 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005702:	2300      	movs	r3, #0
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	2200      	movs	r2, #0
 800571c:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800572e:	6978      	ldr	r0, [r7, #20]
 8005730:	f7ff ffab 	bl	800568a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005734:	e002      	b.n	800573c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005736:	6978      	ldr	r0, [r7, #20]
 8005738:	f7fb fcf2 	bl	8001120 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b084      	sub	sp, #16
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f7ff ff91 	bl	8005678 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005756:	bf00      	nop
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b084      	sub	sp, #16
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 0203 	bic.w	r2, r2, #3
 800577a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005780:	f043 0210 	orr.w	r2, r3, #16
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f7ff ff7a 	bl	800568a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005796:	bf00      	nop
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057aa:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f7ff ff66 	bl	800568a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80057be:	bf00      	nop
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	603b      	str	r3, [r7, #0]
 80057d4:	4613      	mov	r3, r2
 80057d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80057d8:	f7fd f9e8 	bl	8002bac <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e0:	1a9b      	subs	r3, r3, r2
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	4413      	add	r3, r2
 80057e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80057e8:	f7fd f9e0 	bl	8002bac <HAL_GetTick>
 80057ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80057ee:	4b39      	ldr	r3, [pc, #228]	@ (80058d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	015b      	lsls	r3, r3, #5
 80057f4:	0d1b      	lsrs	r3, r3, #20
 80057f6:	69fa      	ldr	r2, [r7, #28]
 80057f8:	fb02 f303 	mul.w	r3, r2, r3
 80057fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057fe:	e054      	b.n	80058aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005806:	d050      	beq.n	80058aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005808:	f7fd f9d0 	bl	8002bac <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	69fa      	ldr	r2, [r7, #28]
 8005814:	429a      	cmp	r2, r3
 8005816:	d902      	bls.n	800581e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d13d      	bne.n	800589a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800582c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005836:	d111      	bne.n	800585c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005840:	d004      	beq.n	800584c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800584a:	d107      	bne.n	800585c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800585a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005860:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005864:	d10f      	bne.n	8005886 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005884:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e017      	b.n	80058ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	3b01      	subs	r3, #1
 80058a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	4013      	ands	r3, r2
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	bf0c      	ite	eq
 80058ba:	2301      	moveq	r3, #1
 80058bc:	2300      	movne	r3, #0
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	461a      	mov	r2, r3
 80058c2:	79fb      	ldrb	r3, [r7, #7]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d19b      	bne.n	8005800 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3720      	adds	r7, #32
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	20000004 	.word	0x20000004

080058d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af02      	add	r7, sp, #8
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2201      	movs	r2, #1
 80058ec:	2102      	movs	r1, #2
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f7ff ff6a 	bl	80057c8 <SPI_WaitFlagStateUntilTimeout>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d007      	beq.n	800590a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058fe:	f043 0220 	orr.w	r2, r3, #32
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e013      	b.n	8005932 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2200      	movs	r2, #0
 8005912:	2180      	movs	r1, #128	@ 0x80
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f7ff ff57 	bl	80057c8 <SPI_WaitFlagStateUntilTimeout>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d007      	beq.n	8005930 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005924:	f043 0220 	orr.w	r2, r3, #32
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e000      	b.n	8005932 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b082      	sub	sp, #8
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e041      	b.n	80059d0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d106      	bne.n	8005966 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7fc fedf 	bl	8002724 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2202      	movs	r2, #2
 800596a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3304      	adds	r3, #4
 8005976:	4619      	mov	r1, r3
 8005978:	4610      	mov	r0, r2
 800597a:	f000 f93f 	bl	8005bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d001      	beq.n	80059f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e032      	b.n	8005a56 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a18      	ldr	r2, [pc, #96]	@ (8005a60 <HAL_TIM_Base_Start+0x88>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00e      	beq.n	8005a20 <HAL_TIM_Base_Start+0x48>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a0a:	d009      	beq.n	8005a20 <HAL_TIM_Base_Start+0x48>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a14      	ldr	r2, [pc, #80]	@ (8005a64 <HAL_TIM_Base_Start+0x8c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d004      	beq.n	8005a20 <HAL_TIM_Base_Start+0x48>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a13      	ldr	r2, [pc, #76]	@ (8005a68 <HAL_TIM_Base_Start+0x90>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d111      	bne.n	8005a44 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2b06      	cmp	r3, #6
 8005a30:	d010      	beq.n	8005a54 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f042 0201 	orr.w	r2, r2, #1
 8005a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a42:	e007      	b.n	8005a54 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0201 	orr.w	r2, r2, #1
 8005a52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr
 8005a60:	40012c00 	.word	0x40012c00
 8005a64:	40000400 	.word	0x40000400
 8005a68:	40000800 	.word	0x40000800

08005a6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_TIM_ConfigClockSource+0x1c>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e0b4      	b.n	8005bf2 <HAL_TIM_ConfigClockSource+0x186>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005aa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005aae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ac0:	d03e      	beq.n	8005b40 <HAL_TIM_ConfigClockSource+0xd4>
 8005ac2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ac6:	f200 8087 	bhi.w	8005bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ace:	f000 8086 	beq.w	8005bde <HAL_TIM_ConfigClockSource+0x172>
 8005ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ad6:	d87f      	bhi.n	8005bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad8:	2b70      	cmp	r3, #112	@ 0x70
 8005ada:	d01a      	beq.n	8005b12 <HAL_TIM_ConfigClockSource+0xa6>
 8005adc:	2b70      	cmp	r3, #112	@ 0x70
 8005ade:	d87b      	bhi.n	8005bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae0:	2b60      	cmp	r3, #96	@ 0x60
 8005ae2:	d050      	beq.n	8005b86 <HAL_TIM_ConfigClockSource+0x11a>
 8005ae4:	2b60      	cmp	r3, #96	@ 0x60
 8005ae6:	d877      	bhi.n	8005bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae8:	2b50      	cmp	r3, #80	@ 0x50
 8005aea:	d03c      	beq.n	8005b66 <HAL_TIM_ConfigClockSource+0xfa>
 8005aec:	2b50      	cmp	r3, #80	@ 0x50
 8005aee:	d873      	bhi.n	8005bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005af0:	2b40      	cmp	r3, #64	@ 0x40
 8005af2:	d058      	beq.n	8005ba6 <HAL_TIM_ConfigClockSource+0x13a>
 8005af4:	2b40      	cmp	r3, #64	@ 0x40
 8005af6:	d86f      	bhi.n	8005bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005af8:	2b30      	cmp	r3, #48	@ 0x30
 8005afa:	d064      	beq.n	8005bc6 <HAL_TIM_ConfigClockSource+0x15a>
 8005afc:	2b30      	cmp	r3, #48	@ 0x30
 8005afe:	d86b      	bhi.n	8005bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b00:	2b20      	cmp	r3, #32
 8005b02:	d060      	beq.n	8005bc6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b04:	2b20      	cmp	r3, #32
 8005b06:	d867      	bhi.n	8005bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d05c      	beq.n	8005bc6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b0c:	2b10      	cmp	r3, #16
 8005b0e:	d05a      	beq.n	8005bc6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b10:	e062      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b22:	f000 f950 	bl	8005dc6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	609a      	str	r2, [r3, #8]
      break;
 8005b3e:	e04f      	b.n	8005be0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b50:	f000 f939 	bl	8005dc6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689a      	ldr	r2, [r3, #8]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b62:	609a      	str	r2, [r3, #8]
      break;
 8005b64:	e03c      	b.n	8005be0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b72:	461a      	mov	r2, r3
 8005b74:	f000 f8b0 	bl	8005cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2150      	movs	r1, #80	@ 0x50
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 f907 	bl	8005d92 <TIM_ITRx_SetConfig>
      break;
 8005b84:	e02c      	b.n	8005be0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b92:	461a      	mov	r2, r3
 8005b94:	f000 f8ce 	bl	8005d34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2160      	movs	r1, #96	@ 0x60
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 f8f7 	bl	8005d92 <TIM_ITRx_SetConfig>
      break;
 8005ba4:	e01c      	b.n	8005be0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f000 f890 	bl	8005cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2140      	movs	r1, #64	@ 0x40
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 f8e7 	bl	8005d92 <TIM_ITRx_SetConfig>
      break;
 8005bc4:	e00c      	b.n	8005be0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	f000 f8de 	bl	8005d92 <TIM_ITRx_SetConfig>
      break;
 8005bd6:	e003      	b.n	8005be0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	73fb      	strb	r3, [r7, #15]
      break;
 8005bdc:	e000      	b.n	8005be0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a2f      	ldr	r2, [pc, #188]	@ (8005ccc <TIM_Base_SetConfig+0xd0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d00b      	beq.n	8005c2c <TIM_Base_SetConfig+0x30>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c1a:	d007      	beq.n	8005c2c <TIM_Base_SetConfig+0x30>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a2c      	ldr	r2, [pc, #176]	@ (8005cd0 <TIM_Base_SetConfig+0xd4>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d003      	beq.n	8005c2c <TIM_Base_SetConfig+0x30>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a2b      	ldr	r2, [pc, #172]	@ (8005cd4 <TIM_Base_SetConfig+0xd8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d108      	bne.n	8005c3e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a22      	ldr	r2, [pc, #136]	@ (8005ccc <TIM_Base_SetConfig+0xd0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d00b      	beq.n	8005c5e <TIM_Base_SetConfig+0x62>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c4c:	d007      	beq.n	8005c5e <TIM_Base_SetConfig+0x62>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a1f      	ldr	r2, [pc, #124]	@ (8005cd0 <TIM_Base_SetConfig+0xd4>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d003      	beq.n	8005c5e <TIM_Base_SetConfig+0x62>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a1e      	ldr	r2, [pc, #120]	@ (8005cd4 <TIM_Base_SetConfig+0xd8>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d108      	bne.n	8005c70 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	689a      	ldr	r2, [r3, #8]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a0d      	ldr	r2, [pc, #52]	@ (8005ccc <TIM_Base_SetConfig+0xd0>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d103      	bne.n	8005ca4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	691a      	ldr	r2, [r3, #16]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d005      	beq.n	8005cc2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f023 0201 	bic.w	r2, r3, #1
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	611a      	str	r2, [r3, #16]
  }
}
 8005cc2:	bf00      	nop
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bc80      	pop	{r7}
 8005cca:	4770      	bx	lr
 8005ccc:	40012c00 	.word	0x40012c00
 8005cd0:	40000400 	.word	0x40000400
 8005cd4:	40000800 	.word	0x40000800

08005cd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	f023 0201 	bic.w	r2, r3, #1
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	011b      	lsls	r3, r3, #4
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f023 030a 	bic.w	r3, r3, #10
 8005d14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	621a      	str	r2, [r3, #32]
}
 8005d2a:	bf00      	nop
 8005d2c:	371c      	adds	r7, #28
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bc80      	pop	{r7}
 8005d32:	4770      	bx	lr

08005d34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	f023 0210 	bic.w	r2, r3, #16
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	031b      	lsls	r3, r3, #12
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d70:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	621a      	str	r2, [r3, #32]
}
 8005d88:	bf00      	nop
 8005d8a:	371c      	adds	r7, #28
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bc80      	pop	{r7}
 8005d90:	4770      	bx	lr

08005d92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b085      	sub	sp, #20
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
 8005d9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005da8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	f043 0307 	orr.w	r3, r3, #7
 8005db4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	609a      	str	r2, [r3, #8]
}
 8005dbc:	bf00      	nop
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bc80      	pop	{r7}
 8005dc4:	4770      	bx	lr

08005dc6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b087      	sub	sp, #28
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	60f8      	str	r0, [r7, #12]
 8005dce:	60b9      	str	r1, [r7, #8]
 8005dd0:	607a      	str	r2, [r7, #4]
 8005dd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005de0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	021a      	lsls	r2, r3, #8
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	431a      	orrs	r2, r3
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	609a      	str	r2, [r3, #8]
}
 8005dfa:	bf00      	nop
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bc80      	pop	{r7}
 8005e02:	4770      	bx	lr

08005e04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e046      	b.n	8005eaa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a16      	ldr	r2, [pc, #88]	@ (8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d00e      	beq.n	8005e7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e68:	d009      	beq.n	8005e7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a12      	ldr	r2, [pc, #72]	@ (8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d004      	beq.n	8005e7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a10      	ldr	r2, [pc, #64]	@ (8005ebc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d10c      	bne.n	8005e98 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bc80      	pop	{r7}
 8005eb2:	4770      	bx	lr
 8005eb4:	40012c00 	.word	0x40012c00
 8005eb8:	40000400 	.word	0x40000400
 8005ebc:	40000800 	.word	0x40000800

08005ec0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e042      	b.n	8005f58 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7fc fc3a 	bl	8002760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2224      	movs	r2, #36	@ 0x24
 8005ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 fcb5 	bl	8006874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	691a      	ldr	r2, [r3, #16]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	695a      	ldr	r2, [r3, #20]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2220      	movs	r2, #32
 8005f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	d121      	bne.n	8005fbe <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d002      	beq.n	8005f86 <HAL_UART_Transmit_IT+0x26>
 8005f80:	88fb      	ldrh	r3, [r7, #6]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e01a      	b.n	8005fc0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	88fa      	ldrh	r2, [r7, #6]
 8005f94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	88fa      	ldrh	r2, [r7, #6]
 8005f9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2221      	movs	r2, #33	@ 0x21
 8005fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005fb8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	e000      	b.n	8005fc0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005fbe:	2302      	movs	r3, #2
  }
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bc80      	pop	{r7}
 8005fc8:	4770      	bx	lr
	...

08005fcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b0ba      	sub	sp, #232	@ 0xe8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006002:	f003 030f 	and.w	r3, r3, #15
 8006006:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800600a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10f      	bne.n	8006032 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006016:	f003 0320 	and.w	r3, r3, #32
 800601a:	2b00      	cmp	r3, #0
 800601c:	d009      	beq.n	8006032 <HAL_UART_IRQHandler+0x66>
 800601e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006022:	f003 0320 	and.w	r3, r3, #32
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fb63 	bl	80066f6 <UART_Receive_IT>
      return;
 8006030:	e25b      	b.n	80064ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006032:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 80de 	beq.w	80061f8 <HAL_UART_IRQHandler+0x22c>
 800603c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b00      	cmp	r3, #0
 8006046:	d106      	bne.n	8006056 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800604c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 80d1 	beq.w	80061f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00b      	beq.n	800607a <HAL_UART_IRQHandler+0xae>
 8006062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800606a:	2b00      	cmp	r3, #0
 800606c:	d005      	beq.n	800607a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006072:	f043 0201 	orr.w	r2, r3, #1
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800607a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800607e:	f003 0304 	and.w	r3, r3, #4
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00b      	beq.n	800609e <HAL_UART_IRQHandler+0xd2>
 8006086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d005      	beq.n	800609e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006096:	f043 0202 	orr.w	r2, r3, #2
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800609e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00b      	beq.n	80060c2 <HAL_UART_IRQHandler+0xf6>
 80060aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d005      	beq.n	80060c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ba:	f043 0204 	orr.w	r2, r3, #4
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80060c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060c6:	f003 0308 	and.w	r3, r3, #8
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d011      	beq.n	80060f2 <HAL_UART_IRQHandler+0x126>
 80060ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060d2:	f003 0320 	and.w	r3, r3, #32
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d105      	bne.n	80060e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80060da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d005      	beq.n	80060f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ea:	f043 0208 	orr.w	r2, r3, #8
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 81f2 	beq.w	80064e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b00      	cmp	r3, #0
 8006106:	d008      	beq.n	800611a <HAL_UART_IRQHandler+0x14e>
 8006108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800610c:	f003 0320 	and.w	r3, r3, #32
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 faee 	bl	80066f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006124:	2b00      	cmp	r3, #0
 8006126:	bf14      	ite	ne
 8006128:	2301      	movne	r3, #1
 800612a:	2300      	moveq	r3, #0
 800612c:	b2db      	uxtb	r3, r3
 800612e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006136:	f003 0308 	and.w	r3, r3, #8
 800613a:	2b00      	cmp	r3, #0
 800613c:	d103      	bne.n	8006146 <HAL_UART_IRQHandler+0x17a>
 800613e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006142:	2b00      	cmp	r3, #0
 8006144:	d04f      	beq.n	80061e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f9f8 	bl	800653c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006156:	2b00      	cmp	r3, #0
 8006158:	d041      	beq.n	80061de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3314      	adds	r3, #20
 8006160:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006164:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006168:	e853 3f00 	ldrex	r3, [r3]
 800616c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006170:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006174:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006178:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	3314      	adds	r3, #20
 8006182:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006186:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800618a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006192:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006196:	e841 2300 	strex	r3, r2, [r1]
 800619a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800619e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1d9      	bne.n	800615a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d013      	beq.n	80061d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b2:	4a7e      	ldr	r2, [pc, #504]	@ (80063ac <HAL_UART_IRQHandler+0x3e0>)
 80061b4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fd fa42 	bl	8003644 <HAL_DMA_Abort_IT>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d016      	beq.n	80061f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80061d0:	4610      	mov	r0, r2
 80061d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d4:	e00e      	b.n	80061f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f99c 	bl	8006514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061dc:	e00a      	b.n	80061f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f998 	bl	8006514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e4:	e006      	b.n	80061f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f994 	bl	8006514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80061f2:	e175      	b.n	80064e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f4:	bf00      	nop
    return;
 80061f6:	e173      	b.n	80064e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	f040 814f 	bne.w	80064a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006206:	f003 0310 	and.w	r3, r3, #16
 800620a:	2b00      	cmp	r3, #0
 800620c:	f000 8148 	beq.w	80064a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006214:	f003 0310 	and.w	r3, r3, #16
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 8141 	beq.w	80064a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800621e:	2300      	movs	r3, #0
 8006220:	60bb      	str	r3, [r7, #8]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	60bb      	str	r3, [r7, #8]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	60bb      	str	r3, [r7, #8]
 8006232:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 80b6 	beq.w	80063b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006250:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 8145 	beq.w	80064e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800625e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006262:	429a      	cmp	r2, r3
 8006264:	f080 813e 	bcs.w	80064e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800626e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	2b20      	cmp	r3, #32
 8006278:	f000 8088 	beq.w	800638c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	330c      	adds	r3, #12
 8006282:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006286:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800628a:	e853 3f00 	ldrex	r3, [r3]
 800628e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006292:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006296:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800629a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	330c      	adds	r3, #12
 80062a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80062a8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80062ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80062b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80062b8:	e841 2300 	strex	r3, r2, [r1]
 80062bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80062c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1d9      	bne.n	800627c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3314      	adds	r3, #20
 80062ce:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062d2:	e853 3f00 	ldrex	r3, [r3]
 80062d6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80062d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80062da:	f023 0301 	bic.w	r3, r3, #1
 80062de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	3314      	adds	r3, #20
 80062e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80062ec:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80062f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80062f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80062f8:	e841 2300 	strex	r3, r2, [r1]
 80062fc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80062fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1e1      	bne.n	80062c8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3314      	adds	r3, #20
 800630a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800630e:	e853 3f00 	ldrex	r3, [r3]
 8006312:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006314:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006316:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800631a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3314      	adds	r3, #20
 8006324:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006328:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800632a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800632e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006330:	e841 2300 	strex	r3, r2, [r1]
 8006334:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006336:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e3      	bne.n	8006304 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2220      	movs	r2, #32
 8006340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	330c      	adds	r3, #12
 8006350:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006354:	e853 3f00 	ldrex	r3, [r3]
 8006358:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800635a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800635c:	f023 0310 	bic.w	r3, r3, #16
 8006360:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	330c      	adds	r3, #12
 800636a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800636e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006370:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006372:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006374:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006376:	e841 2300 	strex	r3, r2, [r1]
 800637a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800637c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1e3      	bne.n	800634a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006386:	4618      	mov	r0, r3
 8006388:	f7fd f920 	bl	80035cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800639a:	b29b      	uxth	r3, r3
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	b29b      	uxth	r3, r3
 80063a0:	4619      	mov	r1, r3
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f8bf 	bl	8006526 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063a8:	e09c      	b.n	80064e4 <HAL_UART_IRQHandler+0x518>
 80063aa:	bf00      	nop
 80063ac:	08006601 	.word	0x08006601
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 808e 	beq.w	80064e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80063cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 8089 	beq.w	80064e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	330c      	adds	r3, #12
 80063dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e0:	e853 3f00 	ldrex	r3, [r3]
 80063e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	330c      	adds	r3, #12
 80063f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80063fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80063fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006400:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006402:	e841 2300 	strex	r3, r2, [r1]
 8006406:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1e3      	bne.n	80063d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3314      	adds	r3, #20
 8006414:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006418:	e853 3f00 	ldrex	r3, [r3]
 800641c:	623b      	str	r3, [r7, #32]
   return(result);
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	f023 0301 	bic.w	r3, r3, #1
 8006424:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3314      	adds	r3, #20
 800642e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006432:	633a      	str	r2, [r7, #48]	@ 0x30
 8006434:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006436:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006438:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800643a:	e841 2300 	strex	r3, r2, [r1]
 800643e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1e3      	bne.n	800640e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2220      	movs	r2, #32
 800644a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	330c      	adds	r3, #12
 800645a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	e853 3f00 	ldrex	r3, [r3]
 8006462:	60fb      	str	r3, [r7, #12]
   return(result);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0310 	bic.w	r3, r3, #16
 800646a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	330c      	adds	r3, #12
 8006474:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006478:	61fa      	str	r2, [r7, #28]
 800647a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647c:	69b9      	ldr	r1, [r7, #24]
 800647e:	69fa      	ldr	r2, [r7, #28]
 8006480:	e841 2300 	strex	r3, r2, [r1]
 8006484:	617b      	str	r3, [r7, #20]
   return(result);
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1e3      	bne.n	8006454 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006492:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006496:	4619      	mov	r1, r3
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f844 	bl	8006526 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800649e:	e023      	b.n	80064e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d009      	beq.n	80064c0 <HAL_UART_IRQHandler+0x4f4>
 80064ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d003      	beq.n	80064c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f8b5 	bl	8006628 <UART_Transmit_IT>
    return;
 80064be:	e014      	b.n	80064ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80064c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00e      	beq.n	80064ea <HAL_UART_IRQHandler+0x51e>
 80064cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d008      	beq.n	80064ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f8f4 	bl	80066c6 <UART_EndTransmit_IT>
    return;
 80064de:	e004      	b.n	80064ea <HAL_UART_IRQHandler+0x51e>
    return;
 80064e0:	bf00      	nop
 80064e2:	e002      	b.n	80064ea <HAL_UART_IRQHandler+0x51e>
      return;
 80064e4:	bf00      	nop
 80064e6:	e000      	b.n	80064ea <HAL_UART_IRQHandler+0x51e>
      return;
 80064e8:	bf00      	nop
  }
}
 80064ea:	37e8      	adds	r7, #232	@ 0xe8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bc80      	pop	{r7}
 8006500:	4770      	bx	lr

08006502 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006502:	b480      	push	{r7}
 8006504:	b083      	sub	sp, #12
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	bc80      	pop	{r7}
 8006512:	4770      	bx	lr

08006514 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	bc80      	pop	{r7}
 8006524:	4770      	bx	lr

08006526 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	460b      	mov	r3, r1
 8006530:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006532:	bf00      	nop
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	bc80      	pop	{r7}
 800653a:	4770      	bx	lr

0800653c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800653c:	b480      	push	{r7}
 800653e:	b095      	sub	sp, #84	@ 0x54
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	330c      	adds	r3, #12
 800654a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800654e:	e853 3f00 	ldrex	r3, [r3]
 8006552:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006556:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800655a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	330c      	adds	r3, #12
 8006562:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006564:	643a      	str	r2, [r7, #64]	@ 0x40
 8006566:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006568:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800656a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800656c:	e841 2300 	strex	r3, r2, [r1]
 8006570:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1e5      	bne.n	8006544 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3314      	adds	r3, #20
 800657e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	e853 3f00 	ldrex	r3, [r3]
 8006586:	61fb      	str	r3, [r7, #28]
   return(result);
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	f023 0301 	bic.w	r3, r3, #1
 800658e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3314      	adds	r3, #20
 8006596:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006598:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800659a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800659e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065a0:	e841 2300 	strex	r3, r2, [r1]
 80065a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e5      	bne.n	8006578 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d119      	bne.n	80065e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	330c      	adds	r3, #12
 80065ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	e853 3f00 	ldrex	r3, [r3]
 80065c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f023 0310 	bic.w	r3, r3, #16
 80065ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	330c      	adds	r3, #12
 80065d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065d4:	61ba      	str	r2, [r7, #24]
 80065d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d8:	6979      	ldr	r1, [r7, #20]
 80065da:	69ba      	ldr	r2, [r7, #24]
 80065dc:	e841 2300 	strex	r3, r2, [r1]
 80065e0:	613b      	str	r3, [r7, #16]
   return(result);
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1e5      	bne.n	80065b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2220      	movs	r2, #32
 80065ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80065f6:	bf00      	nop
 80065f8:	3754      	adds	r7, #84	@ 0x54
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bc80      	pop	{r7}
 80065fe:	4770      	bx	lr

08006600 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f7ff ff7a 	bl	8006514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006620:	bf00      	nop
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b21      	cmp	r3, #33	@ 0x21
 800663a:	d13e      	bne.n	80066ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006644:	d114      	bne.n	8006670 <UART_Transmit_IT+0x48>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d110      	bne.n	8006670 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	461a      	mov	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006662:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	1c9a      	adds	r2, r3, #2
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	621a      	str	r2, [r3, #32]
 800666e:	e008      	b.n	8006682 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	1c59      	adds	r1, r3, #1
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	6211      	str	r1, [r2, #32]
 800667a:	781a      	ldrb	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006686:	b29b      	uxth	r3, r3
 8006688:	3b01      	subs	r3, #1
 800668a:	b29b      	uxth	r3, r3
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	4619      	mov	r1, r3
 8006690:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10f      	bne.n	80066b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68da      	ldr	r2, [r3, #12]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	e000      	b.n	80066bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066ba:	2302      	movs	r3, #2
  }
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bc80      	pop	{r7}
 80066c4:	4770      	bx	lr

080066c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b082      	sub	sp, #8
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68da      	ldr	r2, [r3, #12]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2220      	movs	r2, #32
 80066e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7ff ff02 	bl	80064f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b08c      	sub	sp, #48	@ 0x30
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b22      	cmp	r3, #34	@ 0x22
 8006708:	f040 80ae 	bne.w	8006868 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006714:	d117      	bne.n	8006746 <UART_Receive_IT+0x50>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d113      	bne.n	8006746 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800671e:	2300      	movs	r3, #0
 8006720:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006726:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	b29b      	uxth	r3, r3
 8006730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006734:	b29a      	uxth	r2, r3
 8006736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006738:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800673e:	1c9a      	adds	r2, r3, #2
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	629a      	str	r2, [r3, #40]	@ 0x28
 8006744:	e026      	b.n	8006794 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800674a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800674c:	2300      	movs	r3, #0
 800674e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006758:	d007      	beq.n	800676a <UART_Receive_IT+0x74>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10a      	bne.n	8006778 <UART_Receive_IT+0x82>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	b2da      	uxtb	r2, r3
 8006772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006774:	701a      	strb	r2, [r3, #0]
 8006776:	e008      	b.n	800678a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	b2db      	uxtb	r3, r3
 8006780:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006784:	b2da      	uxtb	r2, r3
 8006786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006788:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006798:	b29b      	uxth	r3, r3
 800679a:	3b01      	subs	r3, #1
 800679c:	b29b      	uxth	r3, r3
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	4619      	mov	r1, r3
 80067a2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d15d      	bne.n	8006864 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68da      	ldr	r2, [r3, #12]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f022 0220 	bic.w	r2, r2, #32
 80067b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	695a      	ldr	r2, [r3, #20]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 0201 	bic.w	r2, r2, #1
 80067d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2220      	movs	r2, #32
 80067dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d135      	bne.n	800685a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	330c      	adds	r3, #12
 80067fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	e853 3f00 	ldrex	r3, [r3]
 8006802:	613b      	str	r3, [r7, #16]
   return(result);
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	f023 0310 	bic.w	r3, r3, #16
 800680a:	627b      	str	r3, [r7, #36]	@ 0x24
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	330c      	adds	r3, #12
 8006812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006814:	623a      	str	r2, [r7, #32]
 8006816:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006818:	69f9      	ldr	r1, [r7, #28]
 800681a:	6a3a      	ldr	r2, [r7, #32]
 800681c:	e841 2300 	strex	r3, r2, [r1]
 8006820:	61bb      	str	r3, [r7, #24]
   return(result);
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1e5      	bne.n	80067f4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0310 	and.w	r3, r3, #16
 8006832:	2b10      	cmp	r3, #16
 8006834:	d10a      	bne.n	800684c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006836:	2300      	movs	r3, #0
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	60fb      	str	r3, [r7, #12]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006850:	4619      	mov	r1, r3
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7ff fe67 	bl	8006526 <HAL_UARTEx_RxEventCallback>
 8006858:	e002      	b.n	8006860 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7ff fe51 	bl	8006502 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	e002      	b.n	800686a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	e000      	b.n	800686a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006868:	2302      	movs	r3, #2
  }
}
 800686a:	4618      	mov	r0, r3
 800686c:	3730      	adds	r7, #48	@ 0x30
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
	...

08006874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68da      	ldr	r2, [r3, #12]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689a      	ldr	r2, [r3, #8]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80068ae:	f023 030c 	bic.w	r3, r3, #12
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6812      	ldr	r2, [r2, #0]
 80068b6:	68b9      	ldr	r1, [r7, #8]
 80068b8:	430b      	orrs	r3, r1
 80068ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	699a      	ldr	r2, [r3, #24]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a2c      	ldr	r2, [pc, #176]	@ (8006988 <UART_SetConfig+0x114>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d103      	bne.n	80068e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80068dc:	f7fe fa8c 	bl	8004df8 <HAL_RCC_GetPCLK2Freq>
 80068e0:	60f8      	str	r0, [r7, #12]
 80068e2:	e002      	b.n	80068ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80068e4:	f7fe fa74 	bl	8004dd0 <HAL_RCC_GetPCLK1Freq>
 80068e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	4613      	mov	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	009a      	lsls	r2, r3, #2
 80068f4:	441a      	add	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006900:	4a22      	ldr	r2, [pc, #136]	@ (800698c <UART_SetConfig+0x118>)
 8006902:	fba2 2303 	umull	r2, r3, r2, r3
 8006906:	095b      	lsrs	r3, r3, #5
 8006908:	0119      	lsls	r1, r3, #4
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	4613      	mov	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	009a      	lsls	r2, r3, #2
 8006914:	441a      	add	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006920:	4b1a      	ldr	r3, [pc, #104]	@ (800698c <UART_SetConfig+0x118>)
 8006922:	fba3 0302 	umull	r0, r3, r3, r2
 8006926:	095b      	lsrs	r3, r3, #5
 8006928:	2064      	movs	r0, #100	@ 0x64
 800692a:	fb00 f303 	mul.w	r3, r0, r3
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	011b      	lsls	r3, r3, #4
 8006932:	3332      	adds	r3, #50	@ 0x32
 8006934:	4a15      	ldr	r2, [pc, #84]	@ (800698c <UART_SetConfig+0x118>)
 8006936:	fba2 2303 	umull	r2, r3, r2, r3
 800693a:	095b      	lsrs	r3, r3, #5
 800693c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006940:	4419      	add	r1, r3
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	4613      	mov	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	009a      	lsls	r2, r3, #2
 800694c:	441a      	add	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	fbb2 f2f3 	udiv	r2, r2, r3
 8006958:	4b0c      	ldr	r3, [pc, #48]	@ (800698c <UART_SetConfig+0x118>)
 800695a:	fba3 0302 	umull	r0, r3, r3, r2
 800695e:	095b      	lsrs	r3, r3, #5
 8006960:	2064      	movs	r0, #100	@ 0x64
 8006962:	fb00 f303 	mul.w	r3, r0, r3
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	011b      	lsls	r3, r3, #4
 800696a:	3332      	adds	r3, #50	@ 0x32
 800696c:	4a07      	ldr	r2, [pc, #28]	@ (800698c <UART_SetConfig+0x118>)
 800696e:	fba2 2303 	umull	r2, r3, r2, r3
 8006972:	095b      	lsrs	r3, r3, #5
 8006974:	f003 020f 	and.w	r2, r3, #15
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	440a      	add	r2, r1
 800697e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006980:	bf00      	nop
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	40013800 	.word	0x40013800
 800698c:	51eb851f 	.word	0x51eb851f

08006990 <__cvt>:
 8006990:	2b00      	cmp	r3, #0
 8006992:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006996:	461d      	mov	r5, r3
 8006998:	bfbb      	ittet	lt
 800699a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800699e:	461d      	movlt	r5, r3
 80069a0:	2300      	movge	r3, #0
 80069a2:	232d      	movlt	r3, #45	@ 0x2d
 80069a4:	b088      	sub	sp, #32
 80069a6:	4614      	mov	r4, r2
 80069a8:	bfb8      	it	lt
 80069aa:	4614      	movlt	r4, r2
 80069ac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80069ae:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80069b0:	7013      	strb	r3, [r2, #0]
 80069b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80069b4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80069b8:	f023 0820 	bic.w	r8, r3, #32
 80069bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80069c0:	d005      	beq.n	80069ce <__cvt+0x3e>
 80069c2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80069c6:	d100      	bne.n	80069ca <__cvt+0x3a>
 80069c8:	3601      	adds	r6, #1
 80069ca:	2302      	movs	r3, #2
 80069cc:	e000      	b.n	80069d0 <__cvt+0x40>
 80069ce:	2303      	movs	r3, #3
 80069d0:	aa07      	add	r2, sp, #28
 80069d2:	9204      	str	r2, [sp, #16]
 80069d4:	aa06      	add	r2, sp, #24
 80069d6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80069da:	e9cd 3600 	strd	r3, r6, [sp]
 80069de:	4622      	mov	r2, r4
 80069e0:	462b      	mov	r3, r5
 80069e2:	f001 f881 	bl	8007ae8 <_dtoa_r>
 80069e6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80069ea:	4607      	mov	r7, r0
 80069ec:	d119      	bne.n	8006a22 <__cvt+0x92>
 80069ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80069f0:	07db      	lsls	r3, r3, #31
 80069f2:	d50e      	bpl.n	8006a12 <__cvt+0x82>
 80069f4:	eb00 0906 	add.w	r9, r0, r6
 80069f8:	2200      	movs	r2, #0
 80069fa:	2300      	movs	r3, #0
 80069fc:	4620      	mov	r0, r4
 80069fe:	4629      	mov	r1, r5
 8006a00:	f7f9 ffd2 	bl	80009a8 <__aeabi_dcmpeq>
 8006a04:	b108      	cbz	r0, 8006a0a <__cvt+0x7a>
 8006a06:	f8cd 901c 	str.w	r9, [sp, #28]
 8006a0a:	2230      	movs	r2, #48	@ 0x30
 8006a0c:	9b07      	ldr	r3, [sp, #28]
 8006a0e:	454b      	cmp	r3, r9
 8006a10:	d31e      	bcc.n	8006a50 <__cvt+0xc0>
 8006a12:	4638      	mov	r0, r7
 8006a14:	9b07      	ldr	r3, [sp, #28]
 8006a16:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006a18:	1bdb      	subs	r3, r3, r7
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	b008      	add	sp, #32
 8006a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a22:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006a26:	eb00 0906 	add.w	r9, r0, r6
 8006a2a:	d1e5      	bne.n	80069f8 <__cvt+0x68>
 8006a2c:	7803      	ldrb	r3, [r0, #0]
 8006a2e:	2b30      	cmp	r3, #48	@ 0x30
 8006a30:	d10a      	bne.n	8006a48 <__cvt+0xb8>
 8006a32:	2200      	movs	r2, #0
 8006a34:	2300      	movs	r3, #0
 8006a36:	4620      	mov	r0, r4
 8006a38:	4629      	mov	r1, r5
 8006a3a:	f7f9 ffb5 	bl	80009a8 <__aeabi_dcmpeq>
 8006a3e:	b918      	cbnz	r0, 8006a48 <__cvt+0xb8>
 8006a40:	f1c6 0601 	rsb	r6, r6, #1
 8006a44:	f8ca 6000 	str.w	r6, [sl]
 8006a48:	f8da 3000 	ldr.w	r3, [sl]
 8006a4c:	4499      	add	r9, r3
 8006a4e:	e7d3      	b.n	80069f8 <__cvt+0x68>
 8006a50:	1c59      	adds	r1, r3, #1
 8006a52:	9107      	str	r1, [sp, #28]
 8006a54:	701a      	strb	r2, [r3, #0]
 8006a56:	e7d9      	b.n	8006a0c <__cvt+0x7c>

08006a58 <__exponent>:
 8006a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a5a:	2900      	cmp	r1, #0
 8006a5c:	bfb6      	itet	lt
 8006a5e:	232d      	movlt	r3, #45	@ 0x2d
 8006a60:	232b      	movge	r3, #43	@ 0x2b
 8006a62:	4249      	neglt	r1, r1
 8006a64:	2909      	cmp	r1, #9
 8006a66:	7002      	strb	r2, [r0, #0]
 8006a68:	7043      	strb	r3, [r0, #1]
 8006a6a:	dd29      	ble.n	8006ac0 <__exponent+0x68>
 8006a6c:	f10d 0307 	add.w	r3, sp, #7
 8006a70:	461d      	mov	r5, r3
 8006a72:	270a      	movs	r7, #10
 8006a74:	fbb1 f6f7 	udiv	r6, r1, r7
 8006a78:	461a      	mov	r2, r3
 8006a7a:	fb07 1416 	mls	r4, r7, r6, r1
 8006a7e:	3430      	adds	r4, #48	@ 0x30
 8006a80:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006a84:	460c      	mov	r4, r1
 8006a86:	2c63      	cmp	r4, #99	@ 0x63
 8006a88:	4631      	mov	r1, r6
 8006a8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a8e:	dcf1      	bgt.n	8006a74 <__exponent+0x1c>
 8006a90:	3130      	adds	r1, #48	@ 0x30
 8006a92:	1e94      	subs	r4, r2, #2
 8006a94:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006a98:	4623      	mov	r3, r4
 8006a9a:	1c41      	adds	r1, r0, #1
 8006a9c:	42ab      	cmp	r3, r5
 8006a9e:	d30a      	bcc.n	8006ab6 <__exponent+0x5e>
 8006aa0:	f10d 0309 	add.w	r3, sp, #9
 8006aa4:	1a9b      	subs	r3, r3, r2
 8006aa6:	42ac      	cmp	r4, r5
 8006aa8:	bf88      	it	hi
 8006aaa:	2300      	movhi	r3, #0
 8006aac:	3302      	adds	r3, #2
 8006aae:	4403      	add	r3, r0
 8006ab0:	1a18      	subs	r0, r3, r0
 8006ab2:	b003      	add	sp, #12
 8006ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ab6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006aba:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006abe:	e7ed      	b.n	8006a9c <__exponent+0x44>
 8006ac0:	2330      	movs	r3, #48	@ 0x30
 8006ac2:	3130      	adds	r1, #48	@ 0x30
 8006ac4:	7083      	strb	r3, [r0, #2]
 8006ac6:	70c1      	strb	r1, [r0, #3]
 8006ac8:	1d03      	adds	r3, r0, #4
 8006aca:	e7f1      	b.n	8006ab0 <__exponent+0x58>

08006acc <_printf_float>:
 8006acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad0:	b091      	sub	sp, #68	@ 0x44
 8006ad2:	460c      	mov	r4, r1
 8006ad4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006ad8:	4616      	mov	r6, r2
 8006ada:	461f      	mov	r7, r3
 8006adc:	4605      	mov	r5, r0
 8006ade:	f000 fef1 	bl	80078c4 <_localeconv_r>
 8006ae2:	6803      	ldr	r3, [r0, #0]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	9308      	str	r3, [sp, #32]
 8006ae8:	f7f9 fb32 	bl	8000150 <strlen>
 8006aec:	2300      	movs	r3, #0
 8006aee:	930e      	str	r3, [sp, #56]	@ 0x38
 8006af0:	f8d8 3000 	ldr.w	r3, [r8]
 8006af4:	9009      	str	r0, [sp, #36]	@ 0x24
 8006af6:	3307      	adds	r3, #7
 8006af8:	f023 0307 	bic.w	r3, r3, #7
 8006afc:	f103 0208 	add.w	r2, r3, #8
 8006b00:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006b04:	f8d4 b000 	ldr.w	fp, [r4]
 8006b08:	f8c8 2000 	str.w	r2, [r8]
 8006b0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b10:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006b14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b16:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b22:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006b26:	4b9c      	ldr	r3, [pc, #624]	@ (8006d98 <_printf_float+0x2cc>)
 8006b28:	f7f9 ff70 	bl	8000a0c <__aeabi_dcmpun>
 8006b2c:	bb70      	cbnz	r0, 8006b8c <_printf_float+0xc0>
 8006b2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b32:	f04f 32ff 	mov.w	r2, #4294967295
 8006b36:	4b98      	ldr	r3, [pc, #608]	@ (8006d98 <_printf_float+0x2cc>)
 8006b38:	f7f9 ff4a 	bl	80009d0 <__aeabi_dcmple>
 8006b3c:	bb30      	cbnz	r0, 8006b8c <_printf_float+0xc0>
 8006b3e:	2200      	movs	r2, #0
 8006b40:	2300      	movs	r3, #0
 8006b42:	4640      	mov	r0, r8
 8006b44:	4649      	mov	r1, r9
 8006b46:	f7f9 ff39 	bl	80009bc <__aeabi_dcmplt>
 8006b4a:	b110      	cbz	r0, 8006b52 <_printf_float+0x86>
 8006b4c:	232d      	movs	r3, #45	@ 0x2d
 8006b4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b52:	4a92      	ldr	r2, [pc, #584]	@ (8006d9c <_printf_float+0x2d0>)
 8006b54:	4b92      	ldr	r3, [pc, #584]	@ (8006da0 <_printf_float+0x2d4>)
 8006b56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006b5a:	bf94      	ite	ls
 8006b5c:	4690      	movls	r8, r2
 8006b5e:	4698      	movhi	r8, r3
 8006b60:	2303      	movs	r3, #3
 8006b62:	f04f 0900 	mov.w	r9, #0
 8006b66:	6123      	str	r3, [r4, #16]
 8006b68:	f02b 0304 	bic.w	r3, fp, #4
 8006b6c:	6023      	str	r3, [r4, #0]
 8006b6e:	4633      	mov	r3, r6
 8006b70:	4621      	mov	r1, r4
 8006b72:	4628      	mov	r0, r5
 8006b74:	9700      	str	r7, [sp, #0]
 8006b76:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006b78:	f000 f9d4 	bl	8006f24 <_printf_common>
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	f040 8090 	bne.w	8006ca2 <_printf_float+0x1d6>
 8006b82:	f04f 30ff 	mov.w	r0, #4294967295
 8006b86:	b011      	add	sp, #68	@ 0x44
 8006b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b8c:	4642      	mov	r2, r8
 8006b8e:	464b      	mov	r3, r9
 8006b90:	4640      	mov	r0, r8
 8006b92:	4649      	mov	r1, r9
 8006b94:	f7f9 ff3a 	bl	8000a0c <__aeabi_dcmpun>
 8006b98:	b148      	cbz	r0, 8006bae <_printf_float+0xe2>
 8006b9a:	464b      	mov	r3, r9
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	bfb8      	it	lt
 8006ba0:	232d      	movlt	r3, #45	@ 0x2d
 8006ba2:	4a80      	ldr	r2, [pc, #512]	@ (8006da4 <_printf_float+0x2d8>)
 8006ba4:	bfb8      	it	lt
 8006ba6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006baa:	4b7f      	ldr	r3, [pc, #508]	@ (8006da8 <_printf_float+0x2dc>)
 8006bac:	e7d3      	b.n	8006b56 <_printf_float+0x8a>
 8006bae:	6863      	ldr	r3, [r4, #4]
 8006bb0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006bb4:	1c5a      	adds	r2, r3, #1
 8006bb6:	d13f      	bne.n	8006c38 <_printf_float+0x16c>
 8006bb8:	2306      	movs	r3, #6
 8006bba:	6063      	str	r3, [r4, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006bc2:	6023      	str	r3, [r4, #0]
 8006bc4:	9206      	str	r2, [sp, #24]
 8006bc6:	aa0e      	add	r2, sp, #56	@ 0x38
 8006bc8:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006bcc:	aa0d      	add	r2, sp, #52	@ 0x34
 8006bce:	9203      	str	r2, [sp, #12]
 8006bd0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006bd4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006bd8:	6863      	ldr	r3, [r4, #4]
 8006bda:	4642      	mov	r2, r8
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	4628      	mov	r0, r5
 8006be0:	464b      	mov	r3, r9
 8006be2:	910a      	str	r1, [sp, #40]	@ 0x28
 8006be4:	f7ff fed4 	bl	8006990 <__cvt>
 8006be8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006bea:	4680      	mov	r8, r0
 8006bec:	2947      	cmp	r1, #71	@ 0x47
 8006bee:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006bf0:	d128      	bne.n	8006c44 <_printf_float+0x178>
 8006bf2:	1cc8      	adds	r0, r1, #3
 8006bf4:	db02      	blt.n	8006bfc <_printf_float+0x130>
 8006bf6:	6863      	ldr	r3, [r4, #4]
 8006bf8:	4299      	cmp	r1, r3
 8006bfa:	dd40      	ble.n	8006c7e <_printf_float+0x1b2>
 8006bfc:	f1aa 0a02 	sub.w	sl, sl, #2
 8006c00:	fa5f fa8a 	uxtb.w	sl, sl
 8006c04:	4652      	mov	r2, sl
 8006c06:	3901      	subs	r1, #1
 8006c08:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006c0c:	910d      	str	r1, [sp, #52]	@ 0x34
 8006c0e:	f7ff ff23 	bl	8006a58 <__exponent>
 8006c12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c14:	4681      	mov	r9, r0
 8006c16:	1813      	adds	r3, r2, r0
 8006c18:	2a01      	cmp	r2, #1
 8006c1a:	6123      	str	r3, [r4, #16]
 8006c1c:	dc02      	bgt.n	8006c24 <_printf_float+0x158>
 8006c1e:	6822      	ldr	r2, [r4, #0]
 8006c20:	07d2      	lsls	r2, r2, #31
 8006c22:	d501      	bpl.n	8006c28 <_printf_float+0x15c>
 8006c24:	3301      	adds	r3, #1
 8006c26:	6123      	str	r3, [r4, #16]
 8006c28:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d09e      	beq.n	8006b6e <_printf_float+0xa2>
 8006c30:	232d      	movs	r3, #45	@ 0x2d
 8006c32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c36:	e79a      	b.n	8006b6e <_printf_float+0xa2>
 8006c38:	2947      	cmp	r1, #71	@ 0x47
 8006c3a:	d1bf      	bne.n	8006bbc <_printf_float+0xf0>
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1bd      	bne.n	8006bbc <_printf_float+0xf0>
 8006c40:	2301      	movs	r3, #1
 8006c42:	e7ba      	b.n	8006bba <_printf_float+0xee>
 8006c44:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c48:	d9dc      	bls.n	8006c04 <_printf_float+0x138>
 8006c4a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006c4e:	d118      	bne.n	8006c82 <_printf_float+0x1b6>
 8006c50:	2900      	cmp	r1, #0
 8006c52:	6863      	ldr	r3, [r4, #4]
 8006c54:	dd0b      	ble.n	8006c6e <_printf_float+0x1a2>
 8006c56:	6121      	str	r1, [r4, #16]
 8006c58:	b913      	cbnz	r3, 8006c60 <_printf_float+0x194>
 8006c5a:	6822      	ldr	r2, [r4, #0]
 8006c5c:	07d0      	lsls	r0, r2, #31
 8006c5e:	d502      	bpl.n	8006c66 <_printf_float+0x19a>
 8006c60:	3301      	adds	r3, #1
 8006c62:	440b      	add	r3, r1
 8006c64:	6123      	str	r3, [r4, #16]
 8006c66:	f04f 0900 	mov.w	r9, #0
 8006c6a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006c6c:	e7dc      	b.n	8006c28 <_printf_float+0x15c>
 8006c6e:	b913      	cbnz	r3, 8006c76 <_printf_float+0x1aa>
 8006c70:	6822      	ldr	r2, [r4, #0]
 8006c72:	07d2      	lsls	r2, r2, #31
 8006c74:	d501      	bpl.n	8006c7a <_printf_float+0x1ae>
 8006c76:	3302      	adds	r3, #2
 8006c78:	e7f4      	b.n	8006c64 <_printf_float+0x198>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e7f2      	b.n	8006c64 <_printf_float+0x198>
 8006c7e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006c82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c84:	4299      	cmp	r1, r3
 8006c86:	db05      	blt.n	8006c94 <_printf_float+0x1c8>
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	6121      	str	r1, [r4, #16]
 8006c8c:	07d8      	lsls	r0, r3, #31
 8006c8e:	d5ea      	bpl.n	8006c66 <_printf_float+0x19a>
 8006c90:	1c4b      	adds	r3, r1, #1
 8006c92:	e7e7      	b.n	8006c64 <_printf_float+0x198>
 8006c94:	2900      	cmp	r1, #0
 8006c96:	bfcc      	ite	gt
 8006c98:	2201      	movgt	r2, #1
 8006c9a:	f1c1 0202 	rsble	r2, r1, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	e7e0      	b.n	8006c64 <_printf_float+0x198>
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	055a      	lsls	r2, r3, #21
 8006ca6:	d407      	bmi.n	8006cb8 <_printf_float+0x1ec>
 8006ca8:	6923      	ldr	r3, [r4, #16]
 8006caa:	4642      	mov	r2, r8
 8006cac:	4631      	mov	r1, r6
 8006cae:	4628      	mov	r0, r5
 8006cb0:	47b8      	blx	r7
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	d12b      	bne.n	8006d0e <_printf_float+0x242>
 8006cb6:	e764      	b.n	8006b82 <_printf_float+0xb6>
 8006cb8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006cbc:	f240 80dc 	bls.w	8006e78 <_printf_float+0x3ac>
 8006cc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	f7f9 fe6e 	bl	80009a8 <__aeabi_dcmpeq>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	d033      	beq.n	8006d38 <_printf_float+0x26c>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	4631      	mov	r1, r6
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	4a35      	ldr	r2, [pc, #212]	@ (8006dac <_printf_float+0x2e0>)
 8006cd8:	47b8      	blx	r7
 8006cda:	3001      	adds	r0, #1
 8006cdc:	f43f af51 	beq.w	8006b82 <_printf_float+0xb6>
 8006ce0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006ce4:	4543      	cmp	r3, r8
 8006ce6:	db02      	blt.n	8006cee <_printf_float+0x222>
 8006ce8:	6823      	ldr	r3, [r4, #0]
 8006cea:	07d8      	lsls	r0, r3, #31
 8006cec:	d50f      	bpl.n	8006d0e <_printf_float+0x242>
 8006cee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	47b8      	blx	r7
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	f43f af42 	beq.w	8006b82 <_printf_float+0xb6>
 8006cfe:	f04f 0900 	mov.w	r9, #0
 8006d02:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d06:	f104 0a1a 	add.w	sl, r4, #26
 8006d0a:	45c8      	cmp	r8, r9
 8006d0c:	dc09      	bgt.n	8006d22 <_printf_float+0x256>
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	079b      	lsls	r3, r3, #30
 8006d12:	f100 8102 	bmi.w	8006f1a <_printf_float+0x44e>
 8006d16:	68e0      	ldr	r0, [r4, #12]
 8006d18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d1a:	4298      	cmp	r0, r3
 8006d1c:	bfb8      	it	lt
 8006d1e:	4618      	movlt	r0, r3
 8006d20:	e731      	b.n	8006b86 <_printf_float+0xba>
 8006d22:	2301      	movs	r3, #1
 8006d24:	4652      	mov	r2, sl
 8006d26:	4631      	mov	r1, r6
 8006d28:	4628      	mov	r0, r5
 8006d2a:	47b8      	blx	r7
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	f43f af28 	beq.w	8006b82 <_printf_float+0xb6>
 8006d32:	f109 0901 	add.w	r9, r9, #1
 8006d36:	e7e8      	b.n	8006d0a <_printf_float+0x23e>
 8006d38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	dc38      	bgt.n	8006db0 <_printf_float+0x2e4>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	4631      	mov	r1, r6
 8006d42:	4628      	mov	r0, r5
 8006d44:	4a19      	ldr	r2, [pc, #100]	@ (8006dac <_printf_float+0x2e0>)
 8006d46:	47b8      	blx	r7
 8006d48:	3001      	adds	r0, #1
 8006d4a:	f43f af1a 	beq.w	8006b82 <_printf_float+0xb6>
 8006d4e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006d52:	ea59 0303 	orrs.w	r3, r9, r3
 8006d56:	d102      	bne.n	8006d5e <_printf_float+0x292>
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	07d9      	lsls	r1, r3, #31
 8006d5c:	d5d7      	bpl.n	8006d0e <_printf_float+0x242>
 8006d5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d62:	4631      	mov	r1, r6
 8006d64:	4628      	mov	r0, r5
 8006d66:	47b8      	blx	r7
 8006d68:	3001      	adds	r0, #1
 8006d6a:	f43f af0a 	beq.w	8006b82 <_printf_float+0xb6>
 8006d6e:	f04f 0a00 	mov.w	sl, #0
 8006d72:	f104 0b1a 	add.w	fp, r4, #26
 8006d76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d78:	425b      	negs	r3, r3
 8006d7a:	4553      	cmp	r3, sl
 8006d7c:	dc01      	bgt.n	8006d82 <_printf_float+0x2b6>
 8006d7e:	464b      	mov	r3, r9
 8006d80:	e793      	b.n	8006caa <_printf_float+0x1de>
 8006d82:	2301      	movs	r3, #1
 8006d84:	465a      	mov	r2, fp
 8006d86:	4631      	mov	r1, r6
 8006d88:	4628      	mov	r0, r5
 8006d8a:	47b8      	blx	r7
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	f43f aef8 	beq.w	8006b82 <_printf_float+0xb6>
 8006d92:	f10a 0a01 	add.w	sl, sl, #1
 8006d96:	e7ee      	b.n	8006d76 <_printf_float+0x2aa>
 8006d98:	7fefffff 	.word	0x7fefffff
 8006d9c:	0800c242 	.word	0x0800c242
 8006da0:	0800c246 	.word	0x0800c246
 8006da4:	0800c24a 	.word	0x0800c24a
 8006da8:	0800c24e 	.word	0x0800c24e
 8006dac:	0800c252 	.word	0x0800c252
 8006db0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006db2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006db6:	4553      	cmp	r3, sl
 8006db8:	bfa8      	it	ge
 8006dba:	4653      	movge	r3, sl
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	4699      	mov	r9, r3
 8006dc0:	dc36      	bgt.n	8006e30 <_printf_float+0x364>
 8006dc2:	f04f 0b00 	mov.w	fp, #0
 8006dc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dca:	f104 021a 	add.w	r2, r4, #26
 8006dce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006dd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dd2:	eba3 0309 	sub.w	r3, r3, r9
 8006dd6:	455b      	cmp	r3, fp
 8006dd8:	dc31      	bgt.n	8006e3e <_printf_float+0x372>
 8006dda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ddc:	459a      	cmp	sl, r3
 8006dde:	dc3a      	bgt.n	8006e56 <_printf_float+0x38a>
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	07da      	lsls	r2, r3, #31
 8006de4:	d437      	bmi.n	8006e56 <_printf_float+0x38a>
 8006de6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006de8:	ebaa 0903 	sub.w	r9, sl, r3
 8006dec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dee:	ebaa 0303 	sub.w	r3, sl, r3
 8006df2:	4599      	cmp	r9, r3
 8006df4:	bfa8      	it	ge
 8006df6:	4699      	movge	r9, r3
 8006df8:	f1b9 0f00 	cmp.w	r9, #0
 8006dfc:	dc33      	bgt.n	8006e66 <_printf_float+0x39a>
 8006dfe:	f04f 0800 	mov.w	r8, #0
 8006e02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e06:	f104 0b1a 	add.w	fp, r4, #26
 8006e0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e0c:	ebaa 0303 	sub.w	r3, sl, r3
 8006e10:	eba3 0309 	sub.w	r3, r3, r9
 8006e14:	4543      	cmp	r3, r8
 8006e16:	f77f af7a 	ble.w	8006d0e <_printf_float+0x242>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	465a      	mov	r2, fp
 8006e1e:	4631      	mov	r1, r6
 8006e20:	4628      	mov	r0, r5
 8006e22:	47b8      	blx	r7
 8006e24:	3001      	adds	r0, #1
 8006e26:	f43f aeac 	beq.w	8006b82 <_printf_float+0xb6>
 8006e2a:	f108 0801 	add.w	r8, r8, #1
 8006e2e:	e7ec      	b.n	8006e0a <_printf_float+0x33e>
 8006e30:	4642      	mov	r2, r8
 8006e32:	4631      	mov	r1, r6
 8006e34:	4628      	mov	r0, r5
 8006e36:	47b8      	blx	r7
 8006e38:	3001      	adds	r0, #1
 8006e3a:	d1c2      	bne.n	8006dc2 <_printf_float+0x2f6>
 8006e3c:	e6a1      	b.n	8006b82 <_printf_float+0xb6>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	4631      	mov	r1, r6
 8006e42:	4628      	mov	r0, r5
 8006e44:	920a      	str	r2, [sp, #40]	@ 0x28
 8006e46:	47b8      	blx	r7
 8006e48:	3001      	adds	r0, #1
 8006e4a:	f43f ae9a 	beq.w	8006b82 <_printf_float+0xb6>
 8006e4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e50:	f10b 0b01 	add.w	fp, fp, #1
 8006e54:	e7bb      	b.n	8006dce <_printf_float+0x302>
 8006e56:	4631      	mov	r1, r6
 8006e58:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	47b8      	blx	r7
 8006e60:	3001      	adds	r0, #1
 8006e62:	d1c0      	bne.n	8006de6 <_printf_float+0x31a>
 8006e64:	e68d      	b.n	8006b82 <_printf_float+0xb6>
 8006e66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e68:	464b      	mov	r3, r9
 8006e6a:	4631      	mov	r1, r6
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	4442      	add	r2, r8
 8006e70:	47b8      	blx	r7
 8006e72:	3001      	adds	r0, #1
 8006e74:	d1c3      	bne.n	8006dfe <_printf_float+0x332>
 8006e76:	e684      	b.n	8006b82 <_printf_float+0xb6>
 8006e78:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006e7c:	f1ba 0f01 	cmp.w	sl, #1
 8006e80:	dc01      	bgt.n	8006e86 <_printf_float+0x3ba>
 8006e82:	07db      	lsls	r3, r3, #31
 8006e84:	d536      	bpl.n	8006ef4 <_printf_float+0x428>
 8006e86:	2301      	movs	r3, #1
 8006e88:	4642      	mov	r2, r8
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	47b8      	blx	r7
 8006e90:	3001      	adds	r0, #1
 8006e92:	f43f ae76 	beq.w	8006b82 <_printf_float+0xb6>
 8006e96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	47b8      	blx	r7
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	f43f ae6e 	beq.w	8006b82 <_printf_float+0xb6>
 8006ea6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006eaa:	2200      	movs	r2, #0
 8006eac:	2300      	movs	r3, #0
 8006eae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006eb2:	f7f9 fd79 	bl	80009a8 <__aeabi_dcmpeq>
 8006eb6:	b9c0      	cbnz	r0, 8006eea <_printf_float+0x41e>
 8006eb8:	4653      	mov	r3, sl
 8006eba:	f108 0201 	add.w	r2, r8, #1
 8006ebe:	4631      	mov	r1, r6
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	47b8      	blx	r7
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	d10c      	bne.n	8006ee2 <_printf_float+0x416>
 8006ec8:	e65b      	b.n	8006b82 <_printf_float+0xb6>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	465a      	mov	r2, fp
 8006ece:	4631      	mov	r1, r6
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	47b8      	blx	r7
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	f43f ae54 	beq.w	8006b82 <_printf_float+0xb6>
 8006eda:	f108 0801 	add.w	r8, r8, #1
 8006ede:	45d0      	cmp	r8, sl
 8006ee0:	dbf3      	blt.n	8006eca <_printf_float+0x3fe>
 8006ee2:	464b      	mov	r3, r9
 8006ee4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006ee8:	e6e0      	b.n	8006cac <_printf_float+0x1e0>
 8006eea:	f04f 0800 	mov.w	r8, #0
 8006eee:	f104 0b1a 	add.w	fp, r4, #26
 8006ef2:	e7f4      	b.n	8006ede <_printf_float+0x412>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	4642      	mov	r2, r8
 8006ef8:	e7e1      	b.n	8006ebe <_printf_float+0x3f2>
 8006efa:	2301      	movs	r3, #1
 8006efc:	464a      	mov	r2, r9
 8006efe:	4631      	mov	r1, r6
 8006f00:	4628      	mov	r0, r5
 8006f02:	47b8      	blx	r7
 8006f04:	3001      	adds	r0, #1
 8006f06:	f43f ae3c 	beq.w	8006b82 <_printf_float+0xb6>
 8006f0a:	f108 0801 	add.w	r8, r8, #1
 8006f0e:	68e3      	ldr	r3, [r4, #12]
 8006f10:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006f12:	1a5b      	subs	r3, r3, r1
 8006f14:	4543      	cmp	r3, r8
 8006f16:	dcf0      	bgt.n	8006efa <_printf_float+0x42e>
 8006f18:	e6fd      	b.n	8006d16 <_printf_float+0x24a>
 8006f1a:	f04f 0800 	mov.w	r8, #0
 8006f1e:	f104 0919 	add.w	r9, r4, #25
 8006f22:	e7f4      	b.n	8006f0e <_printf_float+0x442>

08006f24 <_printf_common>:
 8006f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f28:	4616      	mov	r6, r2
 8006f2a:	4698      	mov	r8, r3
 8006f2c:	688a      	ldr	r2, [r1, #8]
 8006f2e:	690b      	ldr	r3, [r1, #16]
 8006f30:	4607      	mov	r7, r0
 8006f32:	4293      	cmp	r3, r2
 8006f34:	bfb8      	it	lt
 8006f36:	4613      	movlt	r3, r2
 8006f38:	6033      	str	r3, [r6, #0]
 8006f3a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f3e:	460c      	mov	r4, r1
 8006f40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f44:	b10a      	cbz	r2, 8006f4a <_printf_common+0x26>
 8006f46:	3301      	adds	r3, #1
 8006f48:	6033      	str	r3, [r6, #0]
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	0699      	lsls	r1, r3, #26
 8006f4e:	bf42      	ittt	mi
 8006f50:	6833      	ldrmi	r3, [r6, #0]
 8006f52:	3302      	addmi	r3, #2
 8006f54:	6033      	strmi	r3, [r6, #0]
 8006f56:	6825      	ldr	r5, [r4, #0]
 8006f58:	f015 0506 	ands.w	r5, r5, #6
 8006f5c:	d106      	bne.n	8006f6c <_printf_common+0x48>
 8006f5e:	f104 0a19 	add.w	sl, r4, #25
 8006f62:	68e3      	ldr	r3, [r4, #12]
 8006f64:	6832      	ldr	r2, [r6, #0]
 8006f66:	1a9b      	subs	r3, r3, r2
 8006f68:	42ab      	cmp	r3, r5
 8006f6a:	dc2b      	bgt.n	8006fc4 <_printf_common+0xa0>
 8006f6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f70:	6822      	ldr	r2, [r4, #0]
 8006f72:	3b00      	subs	r3, #0
 8006f74:	bf18      	it	ne
 8006f76:	2301      	movne	r3, #1
 8006f78:	0692      	lsls	r2, r2, #26
 8006f7a:	d430      	bmi.n	8006fde <_printf_common+0xba>
 8006f7c:	4641      	mov	r1, r8
 8006f7e:	4638      	mov	r0, r7
 8006f80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f84:	47c8      	blx	r9
 8006f86:	3001      	adds	r0, #1
 8006f88:	d023      	beq.n	8006fd2 <_printf_common+0xae>
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	6922      	ldr	r2, [r4, #16]
 8006f8e:	f003 0306 	and.w	r3, r3, #6
 8006f92:	2b04      	cmp	r3, #4
 8006f94:	bf14      	ite	ne
 8006f96:	2500      	movne	r5, #0
 8006f98:	6833      	ldreq	r3, [r6, #0]
 8006f9a:	f04f 0600 	mov.w	r6, #0
 8006f9e:	bf08      	it	eq
 8006fa0:	68e5      	ldreq	r5, [r4, #12]
 8006fa2:	f104 041a 	add.w	r4, r4, #26
 8006fa6:	bf08      	it	eq
 8006fa8:	1aed      	subeq	r5, r5, r3
 8006faa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006fae:	bf08      	it	eq
 8006fb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	bfc4      	itt	gt
 8006fb8:	1a9b      	subgt	r3, r3, r2
 8006fba:	18ed      	addgt	r5, r5, r3
 8006fbc:	42b5      	cmp	r5, r6
 8006fbe:	d11a      	bne.n	8006ff6 <_printf_common+0xd2>
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	e008      	b.n	8006fd6 <_printf_common+0xb2>
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	4652      	mov	r2, sl
 8006fc8:	4641      	mov	r1, r8
 8006fca:	4638      	mov	r0, r7
 8006fcc:	47c8      	blx	r9
 8006fce:	3001      	adds	r0, #1
 8006fd0:	d103      	bne.n	8006fda <_printf_common+0xb6>
 8006fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fda:	3501      	adds	r5, #1
 8006fdc:	e7c1      	b.n	8006f62 <_printf_common+0x3e>
 8006fde:	2030      	movs	r0, #48	@ 0x30
 8006fe0:	18e1      	adds	r1, r4, r3
 8006fe2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006fe6:	1c5a      	adds	r2, r3, #1
 8006fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006fec:	4422      	add	r2, r4
 8006fee:	3302      	adds	r3, #2
 8006ff0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ff4:	e7c2      	b.n	8006f7c <_printf_common+0x58>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	4622      	mov	r2, r4
 8006ffa:	4641      	mov	r1, r8
 8006ffc:	4638      	mov	r0, r7
 8006ffe:	47c8      	blx	r9
 8007000:	3001      	adds	r0, #1
 8007002:	d0e6      	beq.n	8006fd2 <_printf_common+0xae>
 8007004:	3601      	adds	r6, #1
 8007006:	e7d9      	b.n	8006fbc <_printf_common+0x98>

08007008 <_printf_i>:
 8007008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800700c:	7e0f      	ldrb	r7, [r1, #24]
 800700e:	4691      	mov	r9, r2
 8007010:	2f78      	cmp	r7, #120	@ 0x78
 8007012:	4680      	mov	r8, r0
 8007014:	460c      	mov	r4, r1
 8007016:	469a      	mov	sl, r3
 8007018:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800701a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800701e:	d807      	bhi.n	8007030 <_printf_i+0x28>
 8007020:	2f62      	cmp	r7, #98	@ 0x62
 8007022:	d80a      	bhi.n	800703a <_printf_i+0x32>
 8007024:	2f00      	cmp	r7, #0
 8007026:	f000 80d3 	beq.w	80071d0 <_printf_i+0x1c8>
 800702a:	2f58      	cmp	r7, #88	@ 0x58
 800702c:	f000 80ba 	beq.w	80071a4 <_printf_i+0x19c>
 8007030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007034:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007038:	e03a      	b.n	80070b0 <_printf_i+0xa8>
 800703a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800703e:	2b15      	cmp	r3, #21
 8007040:	d8f6      	bhi.n	8007030 <_printf_i+0x28>
 8007042:	a101      	add	r1, pc, #4	@ (adr r1, 8007048 <_printf_i+0x40>)
 8007044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007048:	080070a1 	.word	0x080070a1
 800704c:	080070b5 	.word	0x080070b5
 8007050:	08007031 	.word	0x08007031
 8007054:	08007031 	.word	0x08007031
 8007058:	08007031 	.word	0x08007031
 800705c:	08007031 	.word	0x08007031
 8007060:	080070b5 	.word	0x080070b5
 8007064:	08007031 	.word	0x08007031
 8007068:	08007031 	.word	0x08007031
 800706c:	08007031 	.word	0x08007031
 8007070:	08007031 	.word	0x08007031
 8007074:	080071b7 	.word	0x080071b7
 8007078:	080070df 	.word	0x080070df
 800707c:	08007171 	.word	0x08007171
 8007080:	08007031 	.word	0x08007031
 8007084:	08007031 	.word	0x08007031
 8007088:	080071d9 	.word	0x080071d9
 800708c:	08007031 	.word	0x08007031
 8007090:	080070df 	.word	0x080070df
 8007094:	08007031 	.word	0x08007031
 8007098:	08007031 	.word	0x08007031
 800709c:	08007179 	.word	0x08007179
 80070a0:	6833      	ldr	r3, [r6, #0]
 80070a2:	1d1a      	adds	r2, r3, #4
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6032      	str	r2, [r6, #0]
 80070a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070b0:	2301      	movs	r3, #1
 80070b2:	e09e      	b.n	80071f2 <_printf_i+0x1ea>
 80070b4:	6833      	ldr	r3, [r6, #0]
 80070b6:	6820      	ldr	r0, [r4, #0]
 80070b8:	1d19      	adds	r1, r3, #4
 80070ba:	6031      	str	r1, [r6, #0]
 80070bc:	0606      	lsls	r6, r0, #24
 80070be:	d501      	bpl.n	80070c4 <_printf_i+0xbc>
 80070c0:	681d      	ldr	r5, [r3, #0]
 80070c2:	e003      	b.n	80070cc <_printf_i+0xc4>
 80070c4:	0645      	lsls	r5, r0, #25
 80070c6:	d5fb      	bpl.n	80070c0 <_printf_i+0xb8>
 80070c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80070cc:	2d00      	cmp	r5, #0
 80070ce:	da03      	bge.n	80070d8 <_printf_i+0xd0>
 80070d0:	232d      	movs	r3, #45	@ 0x2d
 80070d2:	426d      	negs	r5, r5
 80070d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070d8:	230a      	movs	r3, #10
 80070da:	4859      	ldr	r0, [pc, #356]	@ (8007240 <_printf_i+0x238>)
 80070dc:	e011      	b.n	8007102 <_printf_i+0xfa>
 80070de:	6821      	ldr	r1, [r4, #0]
 80070e0:	6833      	ldr	r3, [r6, #0]
 80070e2:	0608      	lsls	r0, r1, #24
 80070e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80070e8:	d402      	bmi.n	80070f0 <_printf_i+0xe8>
 80070ea:	0649      	lsls	r1, r1, #25
 80070ec:	bf48      	it	mi
 80070ee:	b2ad      	uxthmi	r5, r5
 80070f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80070f2:	6033      	str	r3, [r6, #0]
 80070f4:	bf14      	ite	ne
 80070f6:	230a      	movne	r3, #10
 80070f8:	2308      	moveq	r3, #8
 80070fa:	4851      	ldr	r0, [pc, #324]	@ (8007240 <_printf_i+0x238>)
 80070fc:	2100      	movs	r1, #0
 80070fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007102:	6866      	ldr	r6, [r4, #4]
 8007104:	2e00      	cmp	r6, #0
 8007106:	bfa8      	it	ge
 8007108:	6821      	ldrge	r1, [r4, #0]
 800710a:	60a6      	str	r6, [r4, #8]
 800710c:	bfa4      	itt	ge
 800710e:	f021 0104 	bicge.w	r1, r1, #4
 8007112:	6021      	strge	r1, [r4, #0]
 8007114:	b90d      	cbnz	r5, 800711a <_printf_i+0x112>
 8007116:	2e00      	cmp	r6, #0
 8007118:	d04b      	beq.n	80071b2 <_printf_i+0x1aa>
 800711a:	4616      	mov	r6, r2
 800711c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007120:	fb03 5711 	mls	r7, r3, r1, r5
 8007124:	5dc7      	ldrb	r7, [r0, r7]
 8007126:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800712a:	462f      	mov	r7, r5
 800712c:	42bb      	cmp	r3, r7
 800712e:	460d      	mov	r5, r1
 8007130:	d9f4      	bls.n	800711c <_printf_i+0x114>
 8007132:	2b08      	cmp	r3, #8
 8007134:	d10b      	bne.n	800714e <_printf_i+0x146>
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	07df      	lsls	r7, r3, #31
 800713a:	d508      	bpl.n	800714e <_printf_i+0x146>
 800713c:	6923      	ldr	r3, [r4, #16]
 800713e:	6861      	ldr	r1, [r4, #4]
 8007140:	4299      	cmp	r1, r3
 8007142:	bfde      	ittt	le
 8007144:	2330      	movle	r3, #48	@ 0x30
 8007146:	f806 3c01 	strble.w	r3, [r6, #-1]
 800714a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800714e:	1b92      	subs	r2, r2, r6
 8007150:	6122      	str	r2, [r4, #16]
 8007152:	464b      	mov	r3, r9
 8007154:	4621      	mov	r1, r4
 8007156:	4640      	mov	r0, r8
 8007158:	f8cd a000 	str.w	sl, [sp]
 800715c:	aa03      	add	r2, sp, #12
 800715e:	f7ff fee1 	bl	8006f24 <_printf_common>
 8007162:	3001      	adds	r0, #1
 8007164:	d14a      	bne.n	80071fc <_printf_i+0x1f4>
 8007166:	f04f 30ff 	mov.w	r0, #4294967295
 800716a:	b004      	add	sp, #16
 800716c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007170:	6823      	ldr	r3, [r4, #0]
 8007172:	f043 0320 	orr.w	r3, r3, #32
 8007176:	6023      	str	r3, [r4, #0]
 8007178:	2778      	movs	r7, #120	@ 0x78
 800717a:	4832      	ldr	r0, [pc, #200]	@ (8007244 <_printf_i+0x23c>)
 800717c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	6831      	ldr	r1, [r6, #0]
 8007184:	061f      	lsls	r7, r3, #24
 8007186:	f851 5b04 	ldr.w	r5, [r1], #4
 800718a:	d402      	bmi.n	8007192 <_printf_i+0x18a>
 800718c:	065f      	lsls	r7, r3, #25
 800718e:	bf48      	it	mi
 8007190:	b2ad      	uxthmi	r5, r5
 8007192:	6031      	str	r1, [r6, #0]
 8007194:	07d9      	lsls	r1, r3, #31
 8007196:	bf44      	itt	mi
 8007198:	f043 0320 	orrmi.w	r3, r3, #32
 800719c:	6023      	strmi	r3, [r4, #0]
 800719e:	b11d      	cbz	r5, 80071a8 <_printf_i+0x1a0>
 80071a0:	2310      	movs	r3, #16
 80071a2:	e7ab      	b.n	80070fc <_printf_i+0xf4>
 80071a4:	4826      	ldr	r0, [pc, #152]	@ (8007240 <_printf_i+0x238>)
 80071a6:	e7e9      	b.n	800717c <_printf_i+0x174>
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	f023 0320 	bic.w	r3, r3, #32
 80071ae:	6023      	str	r3, [r4, #0]
 80071b0:	e7f6      	b.n	80071a0 <_printf_i+0x198>
 80071b2:	4616      	mov	r6, r2
 80071b4:	e7bd      	b.n	8007132 <_printf_i+0x12a>
 80071b6:	6833      	ldr	r3, [r6, #0]
 80071b8:	6825      	ldr	r5, [r4, #0]
 80071ba:	1d18      	adds	r0, r3, #4
 80071bc:	6961      	ldr	r1, [r4, #20]
 80071be:	6030      	str	r0, [r6, #0]
 80071c0:	062e      	lsls	r6, r5, #24
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	d501      	bpl.n	80071ca <_printf_i+0x1c2>
 80071c6:	6019      	str	r1, [r3, #0]
 80071c8:	e002      	b.n	80071d0 <_printf_i+0x1c8>
 80071ca:	0668      	lsls	r0, r5, #25
 80071cc:	d5fb      	bpl.n	80071c6 <_printf_i+0x1be>
 80071ce:	8019      	strh	r1, [r3, #0]
 80071d0:	2300      	movs	r3, #0
 80071d2:	4616      	mov	r6, r2
 80071d4:	6123      	str	r3, [r4, #16]
 80071d6:	e7bc      	b.n	8007152 <_printf_i+0x14a>
 80071d8:	6833      	ldr	r3, [r6, #0]
 80071da:	2100      	movs	r1, #0
 80071dc:	1d1a      	adds	r2, r3, #4
 80071de:	6032      	str	r2, [r6, #0]
 80071e0:	681e      	ldr	r6, [r3, #0]
 80071e2:	6862      	ldr	r2, [r4, #4]
 80071e4:	4630      	mov	r0, r6
 80071e6:	f000 fbe4 	bl	80079b2 <memchr>
 80071ea:	b108      	cbz	r0, 80071f0 <_printf_i+0x1e8>
 80071ec:	1b80      	subs	r0, r0, r6
 80071ee:	6060      	str	r0, [r4, #4]
 80071f0:	6863      	ldr	r3, [r4, #4]
 80071f2:	6123      	str	r3, [r4, #16]
 80071f4:	2300      	movs	r3, #0
 80071f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071fa:	e7aa      	b.n	8007152 <_printf_i+0x14a>
 80071fc:	4632      	mov	r2, r6
 80071fe:	4649      	mov	r1, r9
 8007200:	4640      	mov	r0, r8
 8007202:	6923      	ldr	r3, [r4, #16]
 8007204:	47d0      	blx	sl
 8007206:	3001      	adds	r0, #1
 8007208:	d0ad      	beq.n	8007166 <_printf_i+0x15e>
 800720a:	6823      	ldr	r3, [r4, #0]
 800720c:	079b      	lsls	r3, r3, #30
 800720e:	d413      	bmi.n	8007238 <_printf_i+0x230>
 8007210:	68e0      	ldr	r0, [r4, #12]
 8007212:	9b03      	ldr	r3, [sp, #12]
 8007214:	4298      	cmp	r0, r3
 8007216:	bfb8      	it	lt
 8007218:	4618      	movlt	r0, r3
 800721a:	e7a6      	b.n	800716a <_printf_i+0x162>
 800721c:	2301      	movs	r3, #1
 800721e:	4632      	mov	r2, r6
 8007220:	4649      	mov	r1, r9
 8007222:	4640      	mov	r0, r8
 8007224:	47d0      	blx	sl
 8007226:	3001      	adds	r0, #1
 8007228:	d09d      	beq.n	8007166 <_printf_i+0x15e>
 800722a:	3501      	adds	r5, #1
 800722c:	68e3      	ldr	r3, [r4, #12]
 800722e:	9903      	ldr	r1, [sp, #12]
 8007230:	1a5b      	subs	r3, r3, r1
 8007232:	42ab      	cmp	r3, r5
 8007234:	dcf2      	bgt.n	800721c <_printf_i+0x214>
 8007236:	e7eb      	b.n	8007210 <_printf_i+0x208>
 8007238:	2500      	movs	r5, #0
 800723a:	f104 0619 	add.w	r6, r4, #25
 800723e:	e7f5      	b.n	800722c <_printf_i+0x224>
 8007240:	0800c254 	.word	0x0800c254
 8007244:	0800c265 	.word	0x0800c265

08007248 <_scanf_float>:
 8007248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724c:	b087      	sub	sp, #28
 800724e:	9303      	str	r3, [sp, #12]
 8007250:	688b      	ldr	r3, [r1, #8]
 8007252:	4617      	mov	r7, r2
 8007254:	1e5a      	subs	r2, r3, #1
 8007256:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800725a:	bf82      	ittt	hi
 800725c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007260:	eb03 0b05 	addhi.w	fp, r3, r5
 8007264:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007268:	460a      	mov	r2, r1
 800726a:	f04f 0500 	mov.w	r5, #0
 800726e:	bf88      	it	hi
 8007270:	608b      	strhi	r3, [r1, #8]
 8007272:	680b      	ldr	r3, [r1, #0]
 8007274:	4680      	mov	r8, r0
 8007276:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800727a:	f842 3b1c 	str.w	r3, [r2], #28
 800727e:	460c      	mov	r4, r1
 8007280:	bf98      	it	ls
 8007282:	f04f 0b00 	movls.w	fp, #0
 8007286:	4616      	mov	r6, r2
 8007288:	46aa      	mov	sl, r5
 800728a:	46a9      	mov	r9, r5
 800728c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007290:	9201      	str	r2, [sp, #4]
 8007292:	9502      	str	r5, [sp, #8]
 8007294:	68a2      	ldr	r2, [r4, #8]
 8007296:	b152      	cbz	r2, 80072ae <_scanf_float+0x66>
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	2b4e      	cmp	r3, #78	@ 0x4e
 800729e:	d865      	bhi.n	800736c <_scanf_float+0x124>
 80072a0:	2b40      	cmp	r3, #64	@ 0x40
 80072a2:	d83d      	bhi.n	8007320 <_scanf_float+0xd8>
 80072a4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80072a8:	b2c8      	uxtb	r0, r1
 80072aa:	280e      	cmp	r0, #14
 80072ac:	d93b      	bls.n	8007326 <_scanf_float+0xde>
 80072ae:	f1b9 0f00 	cmp.w	r9, #0
 80072b2:	d003      	beq.n	80072bc <_scanf_float+0x74>
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072ba:	6023      	str	r3, [r4, #0]
 80072bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072c0:	f1ba 0f01 	cmp.w	sl, #1
 80072c4:	f200 8118 	bhi.w	80074f8 <_scanf_float+0x2b0>
 80072c8:	9b01      	ldr	r3, [sp, #4]
 80072ca:	429e      	cmp	r6, r3
 80072cc:	f200 8109 	bhi.w	80074e2 <_scanf_float+0x29a>
 80072d0:	2001      	movs	r0, #1
 80072d2:	b007      	add	sp, #28
 80072d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80072dc:	2a0d      	cmp	r2, #13
 80072de:	d8e6      	bhi.n	80072ae <_scanf_float+0x66>
 80072e0:	a101      	add	r1, pc, #4	@ (adr r1, 80072e8 <_scanf_float+0xa0>)
 80072e2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80072e6:	bf00      	nop
 80072e8:	0800742f 	.word	0x0800742f
 80072ec:	080072af 	.word	0x080072af
 80072f0:	080072af 	.word	0x080072af
 80072f4:	080072af 	.word	0x080072af
 80072f8:	0800748f 	.word	0x0800748f
 80072fc:	08007467 	.word	0x08007467
 8007300:	080072af 	.word	0x080072af
 8007304:	080072af 	.word	0x080072af
 8007308:	0800743d 	.word	0x0800743d
 800730c:	080072af 	.word	0x080072af
 8007310:	080072af 	.word	0x080072af
 8007314:	080072af 	.word	0x080072af
 8007318:	080072af 	.word	0x080072af
 800731c:	080073f5 	.word	0x080073f5
 8007320:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007324:	e7da      	b.n	80072dc <_scanf_float+0x94>
 8007326:	290e      	cmp	r1, #14
 8007328:	d8c1      	bhi.n	80072ae <_scanf_float+0x66>
 800732a:	a001      	add	r0, pc, #4	@ (adr r0, 8007330 <_scanf_float+0xe8>)
 800732c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007330:	080073e5 	.word	0x080073e5
 8007334:	080072af 	.word	0x080072af
 8007338:	080073e5 	.word	0x080073e5
 800733c:	0800747b 	.word	0x0800747b
 8007340:	080072af 	.word	0x080072af
 8007344:	0800738d 	.word	0x0800738d
 8007348:	080073cb 	.word	0x080073cb
 800734c:	080073cb 	.word	0x080073cb
 8007350:	080073cb 	.word	0x080073cb
 8007354:	080073cb 	.word	0x080073cb
 8007358:	080073cb 	.word	0x080073cb
 800735c:	080073cb 	.word	0x080073cb
 8007360:	080073cb 	.word	0x080073cb
 8007364:	080073cb 	.word	0x080073cb
 8007368:	080073cb 	.word	0x080073cb
 800736c:	2b6e      	cmp	r3, #110	@ 0x6e
 800736e:	d809      	bhi.n	8007384 <_scanf_float+0x13c>
 8007370:	2b60      	cmp	r3, #96	@ 0x60
 8007372:	d8b1      	bhi.n	80072d8 <_scanf_float+0x90>
 8007374:	2b54      	cmp	r3, #84	@ 0x54
 8007376:	d07b      	beq.n	8007470 <_scanf_float+0x228>
 8007378:	2b59      	cmp	r3, #89	@ 0x59
 800737a:	d198      	bne.n	80072ae <_scanf_float+0x66>
 800737c:	2d07      	cmp	r5, #7
 800737e:	d196      	bne.n	80072ae <_scanf_float+0x66>
 8007380:	2508      	movs	r5, #8
 8007382:	e02c      	b.n	80073de <_scanf_float+0x196>
 8007384:	2b74      	cmp	r3, #116	@ 0x74
 8007386:	d073      	beq.n	8007470 <_scanf_float+0x228>
 8007388:	2b79      	cmp	r3, #121	@ 0x79
 800738a:	e7f6      	b.n	800737a <_scanf_float+0x132>
 800738c:	6821      	ldr	r1, [r4, #0]
 800738e:	05c8      	lsls	r0, r1, #23
 8007390:	d51b      	bpl.n	80073ca <_scanf_float+0x182>
 8007392:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007396:	6021      	str	r1, [r4, #0]
 8007398:	f109 0901 	add.w	r9, r9, #1
 800739c:	f1bb 0f00 	cmp.w	fp, #0
 80073a0:	d003      	beq.n	80073aa <_scanf_float+0x162>
 80073a2:	3201      	adds	r2, #1
 80073a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80073a8:	60a2      	str	r2, [r4, #8]
 80073aa:	68a3      	ldr	r3, [r4, #8]
 80073ac:	3b01      	subs	r3, #1
 80073ae:	60a3      	str	r3, [r4, #8]
 80073b0:	6923      	ldr	r3, [r4, #16]
 80073b2:	3301      	adds	r3, #1
 80073b4:	6123      	str	r3, [r4, #16]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	3b01      	subs	r3, #1
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	607b      	str	r3, [r7, #4]
 80073be:	f340 8087 	ble.w	80074d0 <_scanf_float+0x288>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	3301      	adds	r3, #1
 80073c6:	603b      	str	r3, [r7, #0]
 80073c8:	e764      	b.n	8007294 <_scanf_float+0x4c>
 80073ca:	eb1a 0105 	adds.w	r1, sl, r5
 80073ce:	f47f af6e 	bne.w	80072ae <_scanf_float+0x66>
 80073d2:	460d      	mov	r5, r1
 80073d4:	468a      	mov	sl, r1
 80073d6:	6822      	ldr	r2, [r4, #0]
 80073d8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80073dc:	6022      	str	r2, [r4, #0]
 80073de:	f806 3b01 	strb.w	r3, [r6], #1
 80073e2:	e7e2      	b.n	80073aa <_scanf_float+0x162>
 80073e4:	6822      	ldr	r2, [r4, #0]
 80073e6:	0610      	lsls	r0, r2, #24
 80073e8:	f57f af61 	bpl.w	80072ae <_scanf_float+0x66>
 80073ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80073f0:	6022      	str	r2, [r4, #0]
 80073f2:	e7f4      	b.n	80073de <_scanf_float+0x196>
 80073f4:	f1ba 0f00 	cmp.w	sl, #0
 80073f8:	d10e      	bne.n	8007418 <_scanf_float+0x1d0>
 80073fa:	f1b9 0f00 	cmp.w	r9, #0
 80073fe:	d10e      	bne.n	800741e <_scanf_float+0x1d6>
 8007400:	6822      	ldr	r2, [r4, #0]
 8007402:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007406:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800740a:	d108      	bne.n	800741e <_scanf_float+0x1d6>
 800740c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007410:	f04f 0a01 	mov.w	sl, #1
 8007414:	6022      	str	r2, [r4, #0]
 8007416:	e7e2      	b.n	80073de <_scanf_float+0x196>
 8007418:	f1ba 0f02 	cmp.w	sl, #2
 800741c:	d055      	beq.n	80074ca <_scanf_float+0x282>
 800741e:	2d01      	cmp	r5, #1
 8007420:	d002      	beq.n	8007428 <_scanf_float+0x1e0>
 8007422:	2d04      	cmp	r5, #4
 8007424:	f47f af43 	bne.w	80072ae <_scanf_float+0x66>
 8007428:	3501      	adds	r5, #1
 800742a:	b2ed      	uxtb	r5, r5
 800742c:	e7d7      	b.n	80073de <_scanf_float+0x196>
 800742e:	f1ba 0f01 	cmp.w	sl, #1
 8007432:	f47f af3c 	bne.w	80072ae <_scanf_float+0x66>
 8007436:	f04f 0a02 	mov.w	sl, #2
 800743a:	e7d0      	b.n	80073de <_scanf_float+0x196>
 800743c:	b97d      	cbnz	r5, 800745e <_scanf_float+0x216>
 800743e:	f1b9 0f00 	cmp.w	r9, #0
 8007442:	f47f af37 	bne.w	80072b4 <_scanf_float+0x6c>
 8007446:	6822      	ldr	r2, [r4, #0]
 8007448:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800744c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007450:	f040 8103 	bne.w	800765a <_scanf_float+0x412>
 8007454:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007458:	2501      	movs	r5, #1
 800745a:	6022      	str	r2, [r4, #0]
 800745c:	e7bf      	b.n	80073de <_scanf_float+0x196>
 800745e:	2d03      	cmp	r5, #3
 8007460:	d0e2      	beq.n	8007428 <_scanf_float+0x1e0>
 8007462:	2d05      	cmp	r5, #5
 8007464:	e7de      	b.n	8007424 <_scanf_float+0x1dc>
 8007466:	2d02      	cmp	r5, #2
 8007468:	f47f af21 	bne.w	80072ae <_scanf_float+0x66>
 800746c:	2503      	movs	r5, #3
 800746e:	e7b6      	b.n	80073de <_scanf_float+0x196>
 8007470:	2d06      	cmp	r5, #6
 8007472:	f47f af1c 	bne.w	80072ae <_scanf_float+0x66>
 8007476:	2507      	movs	r5, #7
 8007478:	e7b1      	b.n	80073de <_scanf_float+0x196>
 800747a:	6822      	ldr	r2, [r4, #0]
 800747c:	0591      	lsls	r1, r2, #22
 800747e:	f57f af16 	bpl.w	80072ae <_scanf_float+0x66>
 8007482:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007486:	6022      	str	r2, [r4, #0]
 8007488:	f8cd 9008 	str.w	r9, [sp, #8]
 800748c:	e7a7      	b.n	80073de <_scanf_float+0x196>
 800748e:	6822      	ldr	r2, [r4, #0]
 8007490:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007494:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007498:	d006      	beq.n	80074a8 <_scanf_float+0x260>
 800749a:	0550      	lsls	r0, r2, #21
 800749c:	f57f af07 	bpl.w	80072ae <_scanf_float+0x66>
 80074a0:	f1b9 0f00 	cmp.w	r9, #0
 80074a4:	f000 80d9 	beq.w	800765a <_scanf_float+0x412>
 80074a8:	0591      	lsls	r1, r2, #22
 80074aa:	bf58      	it	pl
 80074ac:	9902      	ldrpl	r1, [sp, #8]
 80074ae:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80074b2:	bf58      	it	pl
 80074b4:	eba9 0101 	subpl.w	r1, r9, r1
 80074b8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80074bc:	f04f 0900 	mov.w	r9, #0
 80074c0:	bf58      	it	pl
 80074c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80074c6:	6022      	str	r2, [r4, #0]
 80074c8:	e789      	b.n	80073de <_scanf_float+0x196>
 80074ca:	f04f 0a03 	mov.w	sl, #3
 80074ce:	e786      	b.n	80073de <_scanf_float+0x196>
 80074d0:	4639      	mov	r1, r7
 80074d2:	4640      	mov	r0, r8
 80074d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80074d8:	4798      	blx	r3
 80074da:	2800      	cmp	r0, #0
 80074dc:	f43f aeda 	beq.w	8007294 <_scanf_float+0x4c>
 80074e0:	e6e5      	b.n	80072ae <_scanf_float+0x66>
 80074e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074e6:	463a      	mov	r2, r7
 80074e8:	4640      	mov	r0, r8
 80074ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80074ee:	4798      	blx	r3
 80074f0:	6923      	ldr	r3, [r4, #16]
 80074f2:	3b01      	subs	r3, #1
 80074f4:	6123      	str	r3, [r4, #16]
 80074f6:	e6e7      	b.n	80072c8 <_scanf_float+0x80>
 80074f8:	1e6b      	subs	r3, r5, #1
 80074fa:	2b06      	cmp	r3, #6
 80074fc:	d824      	bhi.n	8007548 <_scanf_float+0x300>
 80074fe:	2d02      	cmp	r5, #2
 8007500:	d836      	bhi.n	8007570 <_scanf_float+0x328>
 8007502:	9b01      	ldr	r3, [sp, #4]
 8007504:	429e      	cmp	r6, r3
 8007506:	f67f aee3 	bls.w	80072d0 <_scanf_float+0x88>
 800750a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800750e:	463a      	mov	r2, r7
 8007510:	4640      	mov	r0, r8
 8007512:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007516:	4798      	blx	r3
 8007518:	6923      	ldr	r3, [r4, #16]
 800751a:	3b01      	subs	r3, #1
 800751c:	6123      	str	r3, [r4, #16]
 800751e:	e7f0      	b.n	8007502 <_scanf_float+0x2ba>
 8007520:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007524:	463a      	mov	r2, r7
 8007526:	4640      	mov	r0, r8
 8007528:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800752c:	4798      	blx	r3
 800752e:	6923      	ldr	r3, [r4, #16]
 8007530:	3b01      	subs	r3, #1
 8007532:	6123      	str	r3, [r4, #16]
 8007534:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007538:	fa5f fa8a 	uxtb.w	sl, sl
 800753c:	f1ba 0f02 	cmp.w	sl, #2
 8007540:	d1ee      	bne.n	8007520 <_scanf_float+0x2d8>
 8007542:	3d03      	subs	r5, #3
 8007544:	b2ed      	uxtb	r5, r5
 8007546:	1b76      	subs	r6, r6, r5
 8007548:	6823      	ldr	r3, [r4, #0]
 800754a:	05da      	lsls	r2, r3, #23
 800754c:	d530      	bpl.n	80075b0 <_scanf_float+0x368>
 800754e:	055b      	lsls	r3, r3, #21
 8007550:	d511      	bpl.n	8007576 <_scanf_float+0x32e>
 8007552:	9b01      	ldr	r3, [sp, #4]
 8007554:	429e      	cmp	r6, r3
 8007556:	f67f aebb 	bls.w	80072d0 <_scanf_float+0x88>
 800755a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800755e:	463a      	mov	r2, r7
 8007560:	4640      	mov	r0, r8
 8007562:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007566:	4798      	blx	r3
 8007568:	6923      	ldr	r3, [r4, #16]
 800756a:	3b01      	subs	r3, #1
 800756c:	6123      	str	r3, [r4, #16]
 800756e:	e7f0      	b.n	8007552 <_scanf_float+0x30a>
 8007570:	46aa      	mov	sl, r5
 8007572:	46b3      	mov	fp, r6
 8007574:	e7de      	b.n	8007534 <_scanf_float+0x2ec>
 8007576:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800757a:	6923      	ldr	r3, [r4, #16]
 800757c:	2965      	cmp	r1, #101	@ 0x65
 800757e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007582:	f106 35ff 	add.w	r5, r6, #4294967295
 8007586:	6123      	str	r3, [r4, #16]
 8007588:	d00c      	beq.n	80075a4 <_scanf_float+0x35c>
 800758a:	2945      	cmp	r1, #69	@ 0x45
 800758c:	d00a      	beq.n	80075a4 <_scanf_float+0x35c>
 800758e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007592:	463a      	mov	r2, r7
 8007594:	4640      	mov	r0, r8
 8007596:	4798      	blx	r3
 8007598:	6923      	ldr	r3, [r4, #16]
 800759a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800759e:	3b01      	subs	r3, #1
 80075a0:	1eb5      	subs	r5, r6, #2
 80075a2:	6123      	str	r3, [r4, #16]
 80075a4:	463a      	mov	r2, r7
 80075a6:	4640      	mov	r0, r8
 80075a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075ac:	4798      	blx	r3
 80075ae:	462e      	mov	r6, r5
 80075b0:	6822      	ldr	r2, [r4, #0]
 80075b2:	f012 0210 	ands.w	r2, r2, #16
 80075b6:	d001      	beq.n	80075bc <_scanf_float+0x374>
 80075b8:	2000      	movs	r0, #0
 80075ba:	e68a      	b.n	80072d2 <_scanf_float+0x8a>
 80075bc:	7032      	strb	r2, [r6, #0]
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80075c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075c8:	d11c      	bne.n	8007604 <_scanf_float+0x3bc>
 80075ca:	9b02      	ldr	r3, [sp, #8]
 80075cc:	454b      	cmp	r3, r9
 80075ce:	eba3 0209 	sub.w	r2, r3, r9
 80075d2:	d123      	bne.n	800761c <_scanf_float+0x3d4>
 80075d4:	2200      	movs	r2, #0
 80075d6:	4640      	mov	r0, r8
 80075d8:	9901      	ldr	r1, [sp, #4]
 80075da:	f002 fbed 	bl	8009db8 <_strtod_r>
 80075de:	9b03      	ldr	r3, [sp, #12]
 80075e0:	6825      	ldr	r5, [r4, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f015 0f02 	tst.w	r5, #2
 80075e8:	4606      	mov	r6, r0
 80075ea:	460f      	mov	r7, r1
 80075ec:	f103 0204 	add.w	r2, r3, #4
 80075f0:	d01f      	beq.n	8007632 <_scanf_float+0x3ea>
 80075f2:	9903      	ldr	r1, [sp, #12]
 80075f4:	600a      	str	r2, [r1, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	e9c3 6700 	strd	r6, r7, [r3]
 80075fc:	68e3      	ldr	r3, [r4, #12]
 80075fe:	3301      	adds	r3, #1
 8007600:	60e3      	str	r3, [r4, #12]
 8007602:	e7d9      	b.n	80075b8 <_scanf_float+0x370>
 8007604:	9b04      	ldr	r3, [sp, #16]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d0e4      	beq.n	80075d4 <_scanf_float+0x38c>
 800760a:	9905      	ldr	r1, [sp, #20]
 800760c:	230a      	movs	r3, #10
 800760e:	4640      	mov	r0, r8
 8007610:	3101      	adds	r1, #1
 8007612:	f002 fc51 	bl	8009eb8 <_strtol_r>
 8007616:	9b04      	ldr	r3, [sp, #16]
 8007618:	9e05      	ldr	r6, [sp, #20]
 800761a:	1ac2      	subs	r2, r0, r3
 800761c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007620:	429e      	cmp	r6, r3
 8007622:	bf28      	it	cs
 8007624:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007628:	4630      	mov	r0, r6
 800762a:	490d      	ldr	r1, [pc, #52]	@ (8007660 <_scanf_float+0x418>)
 800762c:	f000 f8de 	bl	80077ec <siprintf>
 8007630:	e7d0      	b.n	80075d4 <_scanf_float+0x38c>
 8007632:	076d      	lsls	r5, r5, #29
 8007634:	d4dd      	bmi.n	80075f2 <_scanf_float+0x3aa>
 8007636:	9d03      	ldr	r5, [sp, #12]
 8007638:	602a      	str	r2, [r5, #0]
 800763a:	681d      	ldr	r5, [r3, #0]
 800763c:	4602      	mov	r2, r0
 800763e:	460b      	mov	r3, r1
 8007640:	f7f9 f9e4 	bl	8000a0c <__aeabi_dcmpun>
 8007644:	b120      	cbz	r0, 8007650 <_scanf_float+0x408>
 8007646:	4807      	ldr	r0, [pc, #28]	@ (8007664 <_scanf_float+0x41c>)
 8007648:	f000 f9c2 	bl	80079d0 <nanf>
 800764c:	6028      	str	r0, [r5, #0]
 800764e:	e7d5      	b.n	80075fc <_scanf_float+0x3b4>
 8007650:	4630      	mov	r0, r6
 8007652:	4639      	mov	r1, r7
 8007654:	f7f9 fa38 	bl	8000ac8 <__aeabi_d2f>
 8007658:	e7f8      	b.n	800764c <_scanf_float+0x404>
 800765a:	f04f 0900 	mov.w	r9, #0
 800765e:	e62d      	b.n	80072bc <_scanf_float+0x74>
 8007660:	0800c276 	.word	0x0800c276
 8007664:	0800c60d 	.word	0x0800c60d

08007668 <std>:
 8007668:	2300      	movs	r3, #0
 800766a:	b510      	push	{r4, lr}
 800766c:	4604      	mov	r4, r0
 800766e:	e9c0 3300 	strd	r3, r3, [r0]
 8007672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007676:	6083      	str	r3, [r0, #8]
 8007678:	8181      	strh	r1, [r0, #12]
 800767a:	6643      	str	r3, [r0, #100]	@ 0x64
 800767c:	81c2      	strh	r2, [r0, #14]
 800767e:	6183      	str	r3, [r0, #24]
 8007680:	4619      	mov	r1, r3
 8007682:	2208      	movs	r2, #8
 8007684:	305c      	adds	r0, #92	@ 0x5c
 8007686:	f000 f914 	bl	80078b2 <memset>
 800768a:	4b0d      	ldr	r3, [pc, #52]	@ (80076c0 <std+0x58>)
 800768c:	6224      	str	r4, [r4, #32]
 800768e:	6263      	str	r3, [r4, #36]	@ 0x24
 8007690:	4b0c      	ldr	r3, [pc, #48]	@ (80076c4 <std+0x5c>)
 8007692:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007694:	4b0c      	ldr	r3, [pc, #48]	@ (80076c8 <std+0x60>)
 8007696:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007698:	4b0c      	ldr	r3, [pc, #48]	@ (80076cc <std+0x64>)
 800769a:	6323      	str	r3, [r4, #48]	@ 0x30
 800769c:	4b0c      	ldr	r3, [pc, #48]	@ (80076d0 <std+0x68>)
 800769e:	429c      	cmp	r4, r3
 80076a0:	d006      	beq.n	80076b0 <std+0x48>
 80076a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80076a6:	4294      	cmp	r4, r2
 80076a8:	d002      	beq.n	80076b0 <std+0x48>
 80076aa:	33d0      	adds	r3, #208	@ 0xd0
 80076ac:	429c      	cmp	r4, r3
 80076ae:	d105      	bne.n	80076bc <std+0x54>
 80076b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80076b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076b8:	f000 b978 	b.w	80079ac <__retarget_lock_init_recursive>
 80076bc:	bd10      	pop	{r4, pc}
 80076be:	bf00      	nop
 80076c0:	0800782d 	.word	0x0800782d
 80076c4:	0800784f 	.word	0x0800784f
 80076c8:	08007887 	.word	0x08007887
 80076cc:	080078ab 	.word	0x080078ab
 80076d0:	2000046c 	.word	0x2000046c

080076d4 <stdio_exit_handler>:
 80076d4:	4a02      	ldr	r2, [pc, #8]	@ (80076e0 <stdio_exit_handler+0xc>)
 80076d6:	4903      	ldr	r1, [pc, #12]	@ (80076e4 <stdio_exit_handler+0x10>)
 80076d8:	4803      	ldr	r0, [pc, #12]	@ (80076e8 <stdio_exit_handler+0x14>)
 80076da:	f000 b869 	b.w	80077b0 <_fwalk_sglue>
 80076de:	bf00      	nop
 80076e0:	20000010 	.word	0x20000010
 80076e4:	0800a26d 	.word	0x0800a26d
 80076e8:	20000020 	.word	0x20000020

080076ec <cleanup_stdio>:
 80076ec:	6841      	ldr	r1, [r0, #4]
 80076ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007720 <cleanup_stdio+0x34>)
 80076f0:	b510      	push	{r4, lr}
 80076f2:	4299      	cmp	r1, r3
 80076f4:	4604      	mov	r4, r0
 80076f6:	d001      	beq.n	80076fc <cleanup_stdio+0x10>
 80076f8:	f002 fdb8 	bl	800a26c <_fflush_r>
 80076fc:	68a1      	ldr	r1, [r4, #8]
 80076fe:	4b09      	ldr	r3, [pc, #36]	@ (8007724 <cleanup_stdio+0x38>)
 8007700:	4299      	cmp	r1, r3
 8007702:	d002      	beq.n	800770a <cleanup_stdio+0x1e>
 8007704:	4620      	mov	r0, r4
 8007706:	f002 fdb1 	bl	800a26c <_fflush_r>
 800770a:	68e1      	ldr	r1, [r4, #12]
 800770c:	4b06      	ldr	r3, [pc, #24]	@ (8007728 <cleanup_stdio+0x3c>)
 800770e:	4299      	cmp	r1, r3
 8007710:	d004      	beq.n	800771c <cleanup_stdio+0x30>
 8007712:	4620      	mov	r0, r4
 8007714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007718:	f002 bda8 	b.w	800a26c <_fflush_r>
 800771c:	bd10      	pop	{r4, pc}
 800771e:	bf00      	nop
 8007720:	2000046c 	.word	0x2000046c
 8007724:	200004d4 	.word	0x200004d4
 8007728:	2000053c 	.word	0x2000053c

0800772c <global_stdio_init.part.0>:
 800772c:	b510      	push	{r4, lr}
 800772e:	4b0b      	ldr	r3, [pc, #44]	@ (800775c <global_stdio_init.part.0+0x30>)
 8007730:	4c0b      	ldr	r4, [pc, #44]	@ (8007760 <global_stdio_init.part.0+0x34>)
 8007732:	4a0c      	ldr	r2, [pc, #48]	@ (8007764 <global_stdio_init.part.0+0x38>)
 8007734:	4620      	mov	r0, r4
 8007736:	601a      	str	r2, [r3, #0]
 8007738:	2104      	movs	r1, #4
 800773a:	2200      	movs	r2, #0
 800773c:	f7ff ff94 	bl	8007668 <std>
 8007740:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007744:	2201      	movs	r2, #1
 8007746:	2109      	movs	r1, #9
 8007748:	f7ff ff8e 	bl	8007668 <std>
 800774c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007750:	2202      	movs	r2, #2
 8007752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007756:	2112      	movs	r1, #18
 8007758:	f7ff bf86 	b.w	8007668 <std>
 800775c:	200005a4 	.word	0x200005a4
 8007760:	2000046c 	.word	0x2000046c
 8007764:	080076d5 	.word	0x080076d5

08007768 <__sfp_lock_acquire>:
 8007768:	4801      	ldr	r0, [pc, #4]	@ (8007770 <__sfp_lock_acquire+0x8>)
 800776a:	f000 b920 	b.w	80079ae <__retarget_lock_acquire_recursive>
 800776e:	bf00      	nop
 8007770:	200005ad 	.word	0x200005ad

08007774 <__sfp_lock_release>:
 8007774:	4801      	ldr	r0, [pc, #4]	@ (800777c <__sfp_lock_release+0x8>)
 8007776:	f000 b91b 	b.w	80079b0 <__retarget_lock_release_recursive>
 800777a:	bf00      	nop
 800777c:	200005ad 	.word	0x200005ad

08007780 <__sinit>:
 8007780:	b510      	push	{r4, lr}
 8007782:	4604      	mov	r4, r0
 8007784:	f7ff fff0 	bl	8007768 <__sfp_lock_acquire>
 8007788:	6a23      	ldr	r3, [r4, #32]
 800778a:	b11b      	cbz	r3, 8007794 <__sinit+0x14>
 800778c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007790:	f7ff bff0 	b.w	8007774 <__sfp_lock_release>
 8007794:	4b04      	ldr	r3, [pc, #16]	@ (80077a8 <__sinit+0x28>)
 8007796:	6223      	str	r3, [r4, #32]
 8007798:	4b04      	ldr	r3, [pc, #16]	@ (80077ac <__sinit+0x2c>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1f5      	bne.n	800778c <__sinit+0xc>
 80077a0:	f7ff ffc4 	bl	800772c <global_stdio_init.part.0>
 80077a4:	e7f2      	b.n	800778c <__sinit+0xc>
 80077a6:	bf00      	nop
 80077a8:	080076ed 	.word	0x080076ed
 80077ac:	200005a4 	.word	0x200005a4

080077b0 <_fwalk_sglue>:
 80077b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077b4:	4607      	mov	r7, r0
 80077b6:	4688      	mov	r8, r1
 80077b8:	4614      	mov	r4, r2
 80077ba:	2600      	movs	r6, #0
 80077bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077c0:	f1b9 0901 	subs.w	r9, r9, #1
 80077c4:	d505      	bpl.n	80077d2 <_fwalk_sglue+0x22>
 80077c6:	6824      	ldr	r4, [r4, #0]
 80077c8:	2c00      	cmp	r4, #0
 80077ca:	d1f7      	bne.n	80077bc <_fwalk_sglue+0xc>
 80077cc:	4630      	mov	r0, r6
 80077ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077d2:	89ab      	ldrh	r3, [r5, #12]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d907      	bls.n	80077e8 <_fwalk_sglue+0x38>
 80077d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077dc:	3301      	adds	r3, #1
 80077de:	d003      	beq.n	80077e8 <_fwalk_sglue+0x38>
 80077e0:	4629      	mov	r1, r5
 80077e2:	4638      	mov	r0, r7
 80077e4:	47c0      	blx	r8
 80077e6:	4306      	orrs	r6, r0
 80077e8:	3568      	adds	r5, #104	@ 0x68
 80077ea:	e7e9      	b.n	80077c0 <_fwalk_sglue+0x10>

080077ec <siprintf>:
 80077ec:	b40e      	push	{r1, r2, r3}
 80077ee:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80077f2:	b500      	push	{lr}
 80077f4:	b09c      	sub	sp, #112	@ 0x70
 80077f6:	ab1d      	add	r3, sp, #116	@ 0x74
 80077f8:	9002      	str	r0, [sp, #8]
 80077fa:	9006      	str	r0, [sp, #24]
 80077fc:	9107      	str	r1, [sp, #28]
 80077fe:	9104      	str	r1, [sp, #16]
 8007800:	4808      	ldr	r0, [pc, #32]	@ (8007824 <siprintf+0x38>)
 8007802:	4909      	ldr	r1, [pc, #36]	@ (8007828 <siprintf+0x3c>)
 8007804:	f853 2b04 	ldr.w	r2, [r3], #4
 8007808:	9105      	str	r1, [sp, #20]
 800780a:	6800      	ldr	r0, [r0, #0]
 800780c:	a902      	add	r1, sp, #8
 800780e:	9301      	str	r3, [sp, #4]
 8007810:	f002 fbb0 	bl	8009f74 <_svfiprintf_r>
 8007814:	2200      	movs	r2, #0
 8007816:	9b02      	ldr	r3, [sp, #8]
 8007818:	701a      	strb	r2, [r3, #0]
 800781a:	b01c      	add	sp, #112	@ 0x70
 800781c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007820:	b003      	add	sp, #12
 8007822:	4770      	bx	lr
 8007824:	2000001c 	.word	0x2000001c
 8007828:	ffff0208 	.word	0xffff0208

0800782c <__sread>:
 800782c:	b510      	push	{r4, lr}
 800782e:	460c      	mov	r4, r1
 8007830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007834:	f000 f86c 	bl	8007910 <_read_r>
 8007838:	2800      	cmp	r0, #0
 800783a:	bfab      	itete	ge
 800783c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800783e:	89a3      	ldrhlt	r3, [r4, #12]
 8007840:	181b      	addge	r3, r3, r0
 8007842:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007846:	bfac      	ite	ge
 8007848:	6563      	strge	r3, [r4, #84]	@ 0x54
 800784a:	81a3      	strhlt	r3, [r4, #12]
 800784c:	bd10      	pop	{r4, pc}

0800784e <__swrite>:
 800784e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007852:	461f      	mov	r7, r3
 8007854:	898b      	ldrh	r3, [r1, #12]
 8007856:	4605      	mov	r5, r0
 8007858:	05db      	lsls	r3, r3, #23
 800785a:	460c      	mov	r4, r1
 800785c:	4616      	mov	r6, r2
 800785e:	d505      	bpl.n	800786c <__swrite+0x1e>
 8007860:	2302      	movs	r3, #2
 8007862:	2200      	movs	r2, #0
 8007864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007868:	f000 f840 	bl	80078ec <_lseek_r>
 800786c:	89a3      	ldrh	r3, [r4, #12]
 800786e:	4632      	mov	r2, r6
 8007870:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007874:	81a3      	strh	r3, [r4, #12]
 8007876:	4628      	mov	r0, r5
 8007878:	463b      	mov	r3, r7
 800787a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800787e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007882:	f000 b857 	b.w	8007934 <_write_r>

08007886 <__sseek>:
 8007886:	b510      	push	{r4, lr}
 8007888:	460c      	mov	r4, r1
 800788a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800788e:	f000 f82d 	bl	80078ec <_lseek_r>
 8007892:	1c43      	adds	r3, r0, #1
 8007894:	89a3      	ldrh	r3, [r4, #12]
 8007896:	bf15      	itete	ne
 8007898:	6560      	strne	r0, [r4, #84]	@ 0x54
 800789a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800789e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80078a2:	81a3      	strheq	r3, [r4, #12]
 80078a4:	bf18      	it	ne
 80078a6:	81a3      	strhne	r3, [r4, #12]
 80078a8:	bd10      	pop	{r4, pc}

080078aa <__sclose>:
 80078aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ae:	f000 b80d 	b.w	80078cc <_close_r>

080078b2 <memset>:
 80078b2:	4603      	mov	r3, r0
 80078b4:	4402      	add	r2, r0
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d100      	bne.n	80078bc <memset+0xa>
 80078ba:	4770      	bx	lr
 80078bc:	f803 1b01 	strb.w	r1, [r3], #1
 80078c0:	e7f9      	b.n	80078b6 <memset+0x4>
	...

080078c4 <_localeconv_r>:
 80078c4:	4800      	ldr	r0, [pc, #0]	@ (80078c8 <_localeconv_r+0x4>)
 80078c6:	4770      	bx	lr
 80078c8:	2000015c 	.word	0x2000015c

080078cc <_close_r>:
 80078cc:	b538      	push	{r3, r4, r5, lr}
 80078ce:	2300      	movs	r3, #0
 80078d0:	4d05      	ldr	r5, [pc, #20]	@ (80078e8 <_close_r+0x1c>)
 80078d2:	4604      	mov	r4, r0
 80078d4:	4608      	mov	r0, r1
 80078d6:	602b      	str	r3, [r5, #0]
 80078d8:	f7fb f87d 	bl	80029d6 <_close>
 80078dc:	1c43      	adds	r3, r0, #1
 80078de:	d102      	bne.n	80078e6 <_close_r+0x1a>
 80078e0:	682b      	ldr	r3, [r5, #0]
 80078e2:	b103      	cbz	r3, 80078e6 <_close_r+0x1a>
 80078e4:	6023      	str	r3, [r4, #0]
 80078e6:	bd38      	pop	{r3, r4, r5, pc}
 80078e8:	200005a8 	.word	0x200005a8

080078ec <_lseek_r>:
 80078ec:	b538      	push	{r3, r4, r5, lr}
 80078ee:	4604      	mov	r4, r0
 80078f0:	4608      	mov	r0, r1
 80078f2:	4611      	mov	r1, r2
 80078f4:	2200      	movs	r2, #0
 80078f6:	4d05      	ldr	r5, [pc, #20]	@ (800790c <_lseek_r+0x20>)
 80078f8:	602a      	str	r2, [r5, #0]
 80078fa:	461a      	mov	r2, r3
 80078fc:	f7fb f88f 	bl	8002a1e <_lseek>
 8007900:	1c43      	adds	r3, r0, #1
 8007902:	d102      	bne.n	800790a <_lseek_r+0x1e>
 8007904:	682b      	ldr	r3, [r5, #0]
 8007906:	b103      	cbz	r3, 800790a <_lseek_r+0x1e>
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	bd38      	pop	{r3, r4, r5, pc}
 800790c:	200005a8 	.word	0x200005a8

08007910 <_read_r>:
 8007910:	b538      	push	{r3, r4, r5, lr}
 8007912:	4604      	mov	r4, r0
 8007914:	4608      	mov	r0, r1
 8007916:	4611      	mov	r1, r2
 8007918:	2200      	movs	r2, #0
 800791a:	4d05      	ldr	r5, [pc, #20]	@ (8007930 <_read_r+0x20>)
 800791c:	602a      	str	r2, [r5, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	f7fb f820 	bl	8002964 <_read>
 8007924:	1c43      	adds	r3, r0, #1
 8007926:	d102      	bne.n	800792e <_read_r+0x1e>
 8007928:	682b      	ldr	r3, [r5, #0]
 800792a:	b103      	cbz	r3, 800792e <_read_r+0x1e>
 800792c:	6023      	str	r3, [r4, #0]
 800792e:	bd38      	pop	{r3, r4, r5, pc}
 8007930:	200005a8 	.word	0x200005a8

08007934 <_write_r>:
 8007934:	b538      	push	{r3, r4, r5, lr}
 8007936:	4604      	mov	r4, r0
 8007938:	4608      	mov	r0, r1
 800793a:	4611      	mov	r1, r2
 800793c:	2200      	movs	r2, #0
 800793e:	4d05      	ldr	r5, [pc, #20]	@ (8007954 <_write_r+0x20>)
 8007940:	602a      	str	r2, [r5, #0]
 8007942:	461a      	mov	r2, r3
 8007944:	f7fb f82b 	bl	800299e <_write>
 8007948:	1c43      	adds	r3, r0, #1
 800794a:	d102      	bne.n	8007952 <_write_r+0x1e>
 800794c:	682b      	ldr	r3, [r5, #0]
 800794e:	b103      	cbz	r3, 8007952 <_write_r+0x1e>
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	bd38      	pop	{r3, r4, r5, pc}
 8007954:	200005a8 	.word	0x200005a8

08007958 <__errno>:
 8007958:	4b01      	ldr	r3, [pc, #4]	@ (8007960 <__errno+0x8>)
 800795a:	6818      	ldr	r0, [r3, #0]
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	2000001c 	.word	0x2000001c

08007964 <__libc_init_array>:
 8007964:	b570      	push	{r4, r5, r6, lr}
 8007966:	2600      	movs	r6, #0
 8007968:	4d0c      	ldr	r5, [pc, #48]	@ (800799c <__libc_init_array+0x38>)
 800796a:	4c0d      	ldr	r4, [pc, #52]	@ (80079a0 <__libc_init_array+0x3c>)
 800796c:	1b64      	subs	r4, r4, r5
 800796e:	10a4      	asrs	r4, r4, #2
 8007970:	42a6      	cmp	r6, r4
 8007972:	d109      	bne.n	8007988 <__libc_init_array+0x24>
 8007974:	f003 fb66 	bl	800b044 <_init>
 8007978:	2600      	movs	r6, #0
 800797a:	4d0a      	ldr	r5, [pc, #40]	@ (80079a4 <__libc_init_array+0x40>)
 800797c:	4c0a      	ldr	r4, [pc, #40]	@ (80079a8 <__libc_init_array+0x44>)
 800797e:	1b64      	subs	r4, r4, r5
 8007980:	10a4      	asrs	r4, r4, #2
 8007982:	42a6      	cmp	r6, r4
 8007984:	d105      	bne.n	8007992 <__libc_init_array+0x2e>
 8007986:	bd70      	pop	{r4, r5, r6, pc}
 8007988:	f855 3b04 	ldr.w	r3, [r5], #4
 800798c:	4798      	blx	r3
 800798e:	3601      	adds	r6, #1
 8007990:	e7ee      	b.n	8007970 <__libc_init_array+0xc>
 8007992:	f855 3b04 	ldr.w	r3, [r5], #4
 8007996:	4798      	blx	r3
 8007998:	3601      	adds	r6, #1
 800799a:	e7f2      	b.n	8007982 <__libc_init_array+0x1e>
 800799c:	0800c678 	.word	0x0800c678
 80079a0:	0800c678 	.word	0x0800c678
 80079a4:	0800c678 	.word	0x0800c678
 80079a8:	0800c67c 	.word	0x0800c67c

080079ac <__retarget_lock_init_recursive>:
 80079ac:	4770      	bx	lr

080079ae <__retarget_lock_acquire_recursive>:
 80079ae:	4770      	bx	lr

080079b0 <__retarget_lock_release_recursive>:
 80079b0:	4770      	bx	lr

080079b2 <memchr>:
 80079b2:	4603      	mov	r3, r0
 80079b4:	b510      	push	{r4, lr}
 80079b6:	b2c9      	uxtb	r1, r1
 80079b8:	4402      	add	r2, r0
 80079ba:	4293      	cmp	r3, r2
 80079bc:	4618      	mov	r0, r3
 80079be:	d101      	bne.n	80079c4 <memchr+0x12>
 80079c0:	2000      	movs	r0, #0
 80079c2:	e003      	b.n	80079cc <memchr+0x1a>
 80079c4:	7804      	ldrb	r4, [r0, #0]
 80079c6:	3301      	adds	r3, #1
 80079c8:	428c      	cmp	r4, r1
 80079ca:	d1f6      	bne.n	80079ba <memchr+0x8>
 80079cc:	bd10      	pop	{r4, pc}
	...

080079d0 <nanf>:
 80079d0:	4800      	ldr	r0, [pc, #0]	@ (80079d4 <nanf+0x4>)
 80079d2:	4770      	bx	lr
 80079d4:	7fc00000 	.word	0x7fc00000

080079d8 <quorem>:
 80079d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079dc:	6903      	ldr	r3, [r0, #16]
 80079de:	690c      	ldr	r4, [r1, #16]
 80079e0:	4607      	mov	r7, r0
 80079e2:	42a3      	cmp	r3, r4
 80079e4:	db7e      	blt.n	8007ae4 <quorem+0x10c>
 80079e6:	3c01      	subs	r4, #1
 80079e8:	00a3      	lsls	r3, r4, #2
 80079ea:	f100 0514 	add.w	r5, r0, #20
 80079ee:	f101 0814 	add.w	r8, r1, #20
 80079f2:	9300      	str	r3, [sp, #0]
 80079f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079f8:	9301      	str	r3, [sp, #4]
 80079fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a02:	3301      	adds	r3, #1
 8007a04:	429a      	cmp	r2, r3
 8007a06:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a0a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a0e:	d32e      	bcc.n	8007a6e <quorem+0x96>
 8007a10:	f04f 0a00 	mov.w	sl, #0
 8007a14:	46c4      	mov	ip, r8
 8007a16:	46ae      	mov	lr, r5
 8007a18:	46d3      	mov	fp, sl
 8007a1a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a1e:	b298      	uxth	r0, r3
 8007a20:	fb06 a000 	mla	r0, r6, r0, sl
 8007a24:	0c1b      	lsrs	r3, r3, #16
 8007a26:	0c02      	lsrs	r2, r0, #16
 8007a28:	fb06 2303 	mla	r3, r6, r3, r2
 8007a2c:	f8de 2000 	ldr.w	r2, [lr]
 8007a30:	b280      	uxth	r0, r0
 8007a32:	b292      	uxth	r2, r2
 8007a34:	1a12      	subs	r2, r2, r0
 8007a36:	445a      	add	r2, fp
 8007a38:	f8de 0000 	ldr.w	r0, [lr]
 8007a3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007a46:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007a4a:	b292      	uxth	r2, r2
 8007a4c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007a50:	45e1      	cmp	r9, ip
 8007a52:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007a56:	f84e 2b04 	str.w	r2, [lr], #4
 8007a5a:	d2de      	bcs.n	8007a1a <quorem+0x42>
 8007a5c:	9b00      	ldr	r3, [sp, #0]
 8007a5e:	58eb      	ldr	r3, [r5, r3]
 8007a60:	b92b      	cbnz	r3, 8007a6e <quorem+0x96>
 8007a62:	9b01      	ldr	r3, [sp, #4]
 8007a64:	3b04      	subs	r3, #4
 8007a66:	429d      	cmp	r5, r3
 8007a68:	461a      	mov	r2, r3
 8007a6a:	d32f      	bcc.n	8007acc <quorem+0xf4>
 8007a6c:	613c      	str	r4, [r7, #16]
 8007a6e:	4638      	mov	r0, r7
 8007a70:	f001 f9c2 	bl	8008df8 <__mcmp>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	db25      	blt.n	8007ac4 <quorem+0xec>
 8007a78:	4629      	mov	r1, r5
 8007a7a:	2000      	movs	r0, #0
 8007a7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a80:	f8d1 c000 	ldr.w	ip, [r1]
 8007a84:	fa1f fe82 	uxth.w	lr, r2
 8007a88:	fa1f f38c 	uxth.w	r3, ip
 8007a8c:	eba3 030e 	sub.w	r3, r3, lr
 8007a90:	4403      	add	r3, r0
 8007a92:	0c12      	lsrs	r2, r2, #16
 8007a94:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007a98:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007aa2:	45c1      	cmp	r9, r8
 8007aa4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007aa8:	f841 3b04 	str.w	r3, [r1], #4
 8007aac:	d2e6      	bcs.n	8007a7c <quorem+0xa4>
 8007aae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ab2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ab6:	b922      	cbnz	r2, 8007ac2 <quorem+0xea>
 8007ab8:	3b04      	subs	r3, #4
 8007aba:	429d      	cmp	r5, r3
 8007abc:	461a      	mov	r2, r3
 8007abe:	d30b      	bcc.n	8007ad8 <quorem+0x100>
 8007ac0:	613c      	str	r4, [r7, #16]
 8007ac2:	3601      	adds	r6, #1
 8007ac4:	4630      	mov	r0, r6
 8007ac6:	b003      	add	sp, #12
 8007ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007acc:	6812      	ldr	r2, [r2, #0]
 8007ace:	3b04      	subs	r3, #4
 8007ad0:	2a00      	cmp	r2, #0
 8007ad2:	d1cb      	bne.n	8007a6c <quorem+0x94>
 8007ad4:	3c01      	subs	r4, #1
 8007ad6:	e7c6      	b.n	8007a66 <quorem+0x8e>
 8007ad8:	6812      	ldr	r2, [r2, #0]
 8007ada:	3b04      	subs	r3, #4
 8007adc:	2a00      	cmp	r2, #0
 8007ade:	d1ef      	bne.n	8007ac0 <quorem+0xe8>
 8007ae0:	3c01      	subs	r4, #1
 8007ae2:	e7ea      	b.n	8007aba <quorem+0xe2>
 8007ae4:	2000      	movs	r0, #0
 8007ae6:	e7ee      	b.n	8007ac6 <quorem+0xee>

08007ae8 <_dtoa_r>:
 8007ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aec:	4614      	mov	r4, r2
 8007aee:	461d      	mov	r5, r3
 8007af0:	69c7      	ldr	r7, [r0, #28]
 8007af2:	b097      	sub	sp, #92	@ 0x5c
 8007af4:	4683      	mov	fp, r0
 8007af6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007afa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007afc:	b97f      	cbnz	r7, 8007b1e <_dtoa_r+0x36>
 8007afe:	2010      	movs	r0, #16
 8007b00:	f000 fe02 	bl	8008708 <malloc>
 8007b04:	4602      	mov	r2, r0
 8007b06:	f8cb 001c 	str.w	r0, [fp, #28]
 8007b0a:	b920      	cbnz	r0, 8007b16 <_dtoa_r+0x2e>
 8007b0c:	21ef      	movs	r1, #239	@ 0xef
 8007b0e:	4ba8      	ldr	r3, [pc, #672]	@ (8007db0 <_dtoa_r+0x2c8>)
 8007b10:	48a8      	ldr	r0, [pc, #672]	@ (8007db4 <_dtoa_r+0x2cc>)
 8007b12:	f002 fc23 	bl	800a35c <__assert_func>
 8007b16:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007b1a:	6007      	str	r7, [r0, #0]
 8007b1c:	60c7      	str	r7, [r0, #12]
 8007b1e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b22:	6819      	ldr	r1, [r3, #0]
 8007b24:	b159      	cbz	r1, 8007b3e <_dtoa_r+0x56>
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	2301      	movs	r3, #1
 8007b2a:	4093      	lsls	r3, r2
 8007b2c:	604a      	str	r2, [r1, #4]
 8007b2e:	608b      	str	r3, [r1, #8]
 8007b30:	4658      	mov	r0, fp
 8007b32:	f000 fedf 	bl	80088f4 <_Bfree>
 8007b36:	2200      	movs	r2, #0
 8007b38:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	1e2b      	subs	r3, r5, #0
 8007b40:	bfaf      	iteee	ge
 8007b42:	2300      	movge	r3, #0
 8007b44:	2201      	movlt	r2, #1
 8007b46:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007b4a:	9303      	strlt	r3, [sp, #12]
 8007b4c:	bfa8      	it	ge
 8007b4e:	6033      	strge	r3, [r6, #0]
 8007b50:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007b54:	4b98      	ldr	r3, [pc, #608]	@ (8007db8 <_dtoa_r+0x2d0>)
 8007b56:	bfb8      	it	lt
 8007b58:	6032      	strlt	r2, [r6, #0]
 8007b5a:	ea33 0308 	bics.w	r3, r3, r8
 8007b5e:	d112      	bne.n	8007b86 <_dtoa_r+0x9e>
 8007b60:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007b64:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007b66:	6013      	str	r3, [r2, #0]
 8007b68:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007b6c:	4323      	orrs	r3, r4
 8007b6e:	f000 8550 	beq.w	8008612 <_dtoa_r+0xb2a>
 8007b72:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007b74:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007dbc <_dtoa_r+0x2d4>
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f000 8552 	beq.w	8008622 <_dtoa_r+0xb3a>
 8007b7e:	f10a 0303 	add.w	r3, sl, #3
 8007b82:	f000 bd4c 	b.w	800861e <_dtoa_r+0xb36>
 8007b86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b8a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007b8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b92:	2200      	movs	r2, #0
 8007b94:	2300      	movs	r3, #0
 8007b96:	f7f8 ff07 	bl	80009a8 <__aeabi_dcmpeq>
 8007b9a:	4607      	mov	r7, r0
 8007b9c:	b158      	cbz	r0, 8007bb6 <_dtoa_r+0xce>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007ba2:	6013      	str	r3, [r2, #0]
 8007ba4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007ba6:	b113      	cbz	r3, 8007bae <_dtoa_r+0xc6>
 8007ba8:	4b85      	ldr	r3, [pc, #532]	@ (8007dc0 <_dtoa_r+0x2d8>)
 8007baa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007bac:	6013      	str	r3, [r2, #0]
 8007bae:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007dc4 <_dtoa_r+0x2dc>
 8007bb2:	f000 bd36 	b.w	8008622 <_dtoa_r+0xb3a>
 8007bb6:	ab14      	add	r3, sp, #80	@ 0x50
 8007bb8:	9301      	str	r3, [sp, #4]
 8007bba:	ab15      	add	r3, sp, #84	@ 0x54
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	4658      	mov	r0, fp
 8007bc0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007bc4:	f001 fa30 	bl	8009028 <__d2b>
 8007bc8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007bcc:	4681      	mov	r9, r0
 8007bce:	2e00      	cmp	r6, #0
 8007bd0:	d077      	beq.n	8007cc2 <_dtoa_r+0x1da>
 8007bd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007bd8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007be0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007be4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007be8:	9712      	str	r7, [sp, #72]	@ 0x48
 8007bea:	4619      	mov	r1, r3
 8007bec:	2200      	movs	r2, #0
 8007bee:	4b76      	ldr	r3, [pc, #472]	@ (8007dc8 <_dtoa_r+0x2e0>)
 8007bf0:	f7f8 faba 	bl	8000168 <__aeabi_dsub>
 8007bf4:	a368      	add	r3, pc, #416	@ (adr r3, 8007d98 <_dtoa_r+0x2b0>)
 8007bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfa:	f7f8 fc6d 	bl	80004d8 <__aeabi_dmul>
 8007bfe:	a368      	add	r3, pc, #416	@ (adr r3, 8007da0 <_dtoa_r+0x2b8>)
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	f7f8 fab2 	bl	800016c <__adddf3>
 8007c08:	4604      	mov	r4, r0
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	460d      	mov	r5, r1
 8007c0e:	f7f8 fbf9 	bl	8000404 <__aeabi_i2d>
 8007c12:	a365      	add	r3, pc, #404	@ (adr r3, 8007da8 <_dtoa_r+0x2c0>)
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	f7f8 fc5e 	bl	80004d8 <__aeabi_dmul>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4620      	mov	r0, r4
 8007c22:	4629      	mov	r1, r5
 8007c24:	f7f8 faa2 	bl	800016c <__adddf3>
 8007c28:	4604      	mov	r4, r0
 8007c2a:	460d      	mov	r5, r1
 8007c2c:	f7f8 ff04 	bl	8000a38 <__aeabi_d2iz>
 8007c30:	2200      	movs	r2, #0
 8007c32:	4607      	mov	r7, r0
 8007c34:	2300      	movs	r3, #0
 8007c36:	4620      	mov	r0, r4
 8007c38:	4629      	mov	r1, r5
 8007c3a:	f7f8 febf 	bl	80009bc <__aeabi_dcmplt>
 8007c3e:	b140      	cbz	r0, 8007c52 <_dtoa_r+0x16a>
 8007c40:	4638      	mov	r0, r7
 8007c42:	f7f8 fbdf 	bl	8000404 <__aeabi_i2d>
 8007c46:	4622      	mov	r2, r4
 8007c48:	462b      	mov	r3, r5
 8007c4a:	f7f8 fead 	bl	80009a8 <__aeabi_dcmpeq>
 8007c4e:	b900      	cbnz	r0, 8007c52 <_dtoa_r+0x16a>
 8007c50:	3f01      	subs	r7, #1
 8007c52:	2f16      	cmp	r7, #22
 8007c54:	d853      	bhi.n	8007cfe <_dtoa_r+0x216>
 8007c56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c5a:	4b5c      	ldr	r3, [pc, #368]	@ (8007dcc <_dtoa_r+0x2e4>)
 8007c5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c64:	f7f8 feaa 	bl	80009bc <__aeabi_dcmplt>
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	d04a      	beq.n	8007d02 <_dtoa_r+0x21a>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	3f01      	subs	r7, #1
 8007c70:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c72:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007c74:	1b9b      	subs	r3, r3, r6
 8007c76:	1e5a      	subs	r2, r3, #1
 8007c78:	bf46      	itte	mi
 8007c7a:	f1c3 0801 	rsbmi	r8, r3, #1
 8007c7e:	2300      	movmi	r3, #0
 8007c80:	f04f 0800 	movpl.w	r8, #0
 8007c84:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c86:	bf48      	it	mi
 8007c88:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007c8a:	2f00      	cmp	r7, #0
 8007c8c:	db3b      	blt.n	8007d06 <_dtoa_r+0x21e>
 8007c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c90:	970e      	str	r7, [sp, #56]	@ 0x38
 8007c92:	443b      	add	r3, r7
 8007c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c96:	2300      	movs	r3, #0
 8007c98:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c9a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c9c:	2b09      	cmp	r3, #9
 8007c9e:	d866      	bhi.n	8007d6e <_dtoa_r+0x286>
 8007ca0:	2b05      	cmp	r3, #5
 8007ca2:	bfc4      	itt	gt
 8007ca4:	3b04      	subgt	r3, #4
 8007ca6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007ca8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007caa:	bfc8      	it	gt
 8007cac:	2400      	movgt	r4, #0
 8007cae:	f1a3 0302 	sub.w	r3, r3, #2
 8007cb2:	bfd8      	it	le
 8007cb4:	2401      	movle	r4, #1
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d864      	bhi.n	8007d84 <_dtoa_r+0x29c>
 8007cba:	e8df f003 	tbb	[pc, r3]
 8007cbe:	382b      	.short	0x382b
 8007cc0:	5636      	.short	0x5636
 8007cc2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007cc6:	441e      	add	r6, r3
 8007cc8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007ccc:	2b20      	cmp	r3, #32
 8007cce:	bfc1      	itttt	gt
 8007cd0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007cd4:	fa08 f803 	lslgt.w	r8, r8, r3
 8007cd8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007cdc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007ce0:	bfd6      	itet	le
 8007ce2:	f1c3 0320 	rsble	r3, r3, #32
 8007ce6:	ea48 0003 	orrgt.w	r0, r8, r3
 8007cea:	fa04 f003 	lslle.w	r0, r4, r3
 8007cee:	f7f8 fb79 	bl	80003e4 <__aeabi_ui2d>
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007cf8:	3e01      	subs	r6, #1
 8007cfa:	9212      	str	r2, [sp, #72]	@ 0x48
 8007cfc:	e775      	b.n	8007bea <_dtoa_r+0x102>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e7b6      	b.n	8007c70 <_dtoa_r+0x188>
 8007d02:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007d04:	e7b5      	b.n	8007c72 <_dtoa_r+0x18a>
 8007d06:	427b      	negs	r3, r7
 8007d08:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	eba8 0807 	sub.w	r8, r8, r7
 8007d10:	930e      	str	r3, [sp, #56]	@ 0x38
 8007d12:	e7c2      	b.n	8007c9a <_dtoa_r+0x1b2>
 8007d14:	2300      	movs	r3, #0
 8007d16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	dc35      	bgt.n	8007d8a <_dtoa_r+0x2a2>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	461a      	mov	r2, r3
 8007d22:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007d26:	9221      	str	r2, [sp, #132]	@ 0x84
 8007d28:	e00b      	b.n	8007d42 <_dtoa_r+0x25a>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e7f3      	b.n	8007d16 <_dtoa_r+0x22e>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d34:	18fb      	adds	r3, r7, r3
 8007d36:	9308      	str	r3, [sp, #32]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	9307      	str	r3, [sp, #28]
 8007d3e:	bfb8      	it	lt
 8007d40:	2301      	movlt	r3, #1
 8007d42:	2100      	movs	r1, #0
 8007d44:	2204      	movs	r2, #4
 8007d46:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007d4a:	f102 0514 	add.w	r5, r2, #20
 8007d4e:	429d      	cmp	r5, r3
 8007d50:	d91f      	bls.n	8007d92 <_dtoa_r+0x2aa>
 8007d52:	6041      	str	r1, [r0, #4]
 8007d54:	4658      	mov	r0, fp
 8007d56:	f000 fd8d 	bl	8008874 <_Balloc>
 8007d5a:	4682      	mov	sl, r0
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	d139      	bne.n	8007dd4 <_dtoa_r+0x2ec>
 8007d60:	4602      	mov	r2, r0
 8007d62:	f240 11af 	movw	r1, #431	@ 0x1af
 8007d66:	4b1a      	ldr	r3, [pc, #104]	@ (8007dd0 <_dtoa_r+0x2e8>)
 8007d68:	e6d2      	b.n	8007b10 <_dtoa_r+0x28>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e7e0      	b.n	8007d30 <_dtoa_r+0x248>
 8007d6e:	2401      	movs	r4, #1
 8007d70:	2300      	movs	r3, #0
 8007d72:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d74:	9320      	str	r3, [sp, #128]	@ 0x80
 8007d76:	f04f 33ff 	mov.w	r3, #4294967295
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007d80:	2312      	movs	r3, #18
 8007d82:	e7d0      	b.n	8007d26 <_dtoa_r+0x23e>
 8007d84:	2301      	movs	r3, #1
 8007d86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d88:	e7f5      	b.n	8007d76 <_dtoa_r+0x28e>
 8007d8a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d8c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007d90:	e7d7      	b.n	8007d42 <_dtoa_r+0x25a>
 8007d92:	3101      	adds	r1, #1
 8007d94:	0052      	lsls	r2, r2, #1
 8007d96:	e7d8      	b.n	8007d4a <_dtoa_r+0x262>
 8007d98:	636f4361 	.word	0x636f4361
 8007d9c:	3fd287a7 	.word	0x3fd287a7
 8007da0:	8b60c8b3 	.word	0x8b60c8b3
 8007da4:	3fc68a28 	.word	0x3fc68a28
 8007da8:	509f79fb 	.word	0x509f79fb
 8007dac:	3fd34413 	.word	0x3fd34413
 8007db0:	0800c288 	.word	0x0800c288
 8007db4:	0800c29f 	.word	0x0800c29f
 8007db8:	7ff00000 	.word	0x7ff00000
 8007dbc:	0800c284 	.word	0x0800c284
 8007dc0:	0800c253 	.word	0x0800c253
 8007dc4:	0800c252 	.word	0x0800c252
 8007dc8:	3ff80000 	.word	0x3ff80000
 8007dcc:	0800c398 	.word	0x0800c398
 8007dd0:	0800c2f7 	.word	0x0800c2f7
 8007dd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007dd8:	6018      	str	r0, [r3, #0]
 8007dda:	9b07      	ldr	r3, [sp, #28]
 8007ddc:	2b0e      	cmp	r3, #14
 8007dde:	f200 80a4 	bhi.w	8007f2a <_dtoa_r+0x442>
 8007de2:	2c00      	cmp	r4, #0
 8007de4:	f000 80a1 	beq.w	8007f2a <_dtoa_r+0x442>
 8007de8:	2f00      	cmp	r7, #0
 8007dea:	dd33      	ble.n	8007e54 <_dtoa_r+0x36c>
 8007dec:	4b86      	ldr	r3, [pc, #536]	@ (8008008 <_dtoa_r+0x520>)
 8007dee:	f007 020f 	and.w	r2, r7, #15
 8007df2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007df6:	05f8      	lsls	r0, r7, #23
 8007df8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007dfc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007e00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007e04:	d516      	bpl.n	8007e34 <_dtoa_r+0x34c>
 8007e06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e0a:	4b80      	ldr	r3, [pc, #512]	@ (800800c <_dtoa_r+0x524>)
 8007e0c:	2603      	movs	r6, #3
 8007e0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e12:	f7f8 fc8b 	bl	800072c <__aeabi_ddiv>
 8007e16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e1a:	f004 040f 	and.w	r4, r4, #15
 8007e1e:	4d7b      	ldr	r5, [pc, #492]	@ (800800c <_dtoa_r+0x524>)
 8007e20:	b954      	cbnz	r4, 8007e38 <_dtoa_r+0x350>
 8007e22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e2a:	f7f8 fc7f 	bl	800072c <__aeabi_ddiv>
 8007e2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e32:	e028      	b.n	8007e86 <_dtoa_r+0x39e>
 8007e34:	2602      	movs	r6, #2
 8007e36:	e7f2      	b.n	8007e1e <_dtoa_r+0x336>
 8007e38:	07e1      	lsls	r1, r4, #31
 8007e3a:	d508      	bpl.n	8007e4e <_dtoa_r+0x366>
 8007e3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e44:	f7f8 fb48 	bl	80004d8 <__aeabi_dmul>
 8007e48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e4c:	3601      	adds	r6, #1
 8007e4e:	1064      	asrs	r4, r4, #1
 8007e50:	3508      	adds	r5, #8
 8007e52:	e7e5      	b.n	8007e20 <_dtoa_r+0x338>
 8007e54:	f000 80d2 	beq.w	8007ffc <_dtoa_r+0x514>
 8007e58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e5c:	427c      	negs	r4, r7
 8007e5e:	4b6a      	ldr	r3, [pc, #424]	@ (8008008 <_dtoa_r+0x520>)
 8007e60:	f004 020f 	and.w	r2, r4, #15
 8007e64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6c:	f7f8 fb34 	bl	80004d8 <__aeabi_dmul>
 8007e70:	2602      	movs	r6, #2
 8007e72:	2300      	movs	r3, #0
 8007e74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e78:	4d64      	ldr	r5, [pc, #400]	@ (800800c <_dtoa_r+0x524>)
 8007e7a:	1124      	asrs	r4, r4, #4
 8007e7c:	2c00      	cmp	r4, #0
 8007e7e:	f040 80b2 	bne.w	8007fe6 <_dtoa_r+0x4fe>
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1d3      	bne.n	8007e2e <_dtoa_r+0x346>
 8007e86:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f000 80b7 	beq.w	8008000 <_dtoa_r+0x518>
 8007e92:	2200      	movs	r2, #0
 8007e94:	4620      	mov	r0, r4
 8007e96:	4629      	mov	r1, r5
 8007e98:	4b5d      	ldr	r3, [pc, #372]	@ (8008010 <_dtoa_r+0x528>)
 8007e9a:	f7f8 fd8f 	bl	80009bc <__aeabi_dcmplt>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	f000 80ae 	beq.w	8008000 <_dtoa_r+0x518>
 8007ea4:	9b07      	ldr	r3, [sp, #28]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 80aa 	beq.w	8008000 <_dtoa_r+0x518>
 8007eac:	9b08      	ldr	r3, [sp, #32]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	dd37      	ble.n	8007f22 <_dtoa_r+0x43a>
 8007eb2:	1e7b      	subs	r3, r7, #1
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	9304      	str	r3, [sp, #16]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	4629      	mov	r1, r5
 8007ebc:	4b55      	ldr	r3, [pc, #340]	@ (8008014 <_dtoa_r+0x52c>)
 8007ebe:	f7f8 fb0b 	bl	80004d8 <__aeabi_dmul>
 8007ec2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ec6:	9c08      	ldr	r4, [sp, #32]
 8007ec8:	3601      	adds	r6, #1
 8007eca:	4630      	mov	r0, r6
 8007ecc:	f7f8 fa9a 	bl	8000404 <__aeabi_i2d>
 8007ed0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ed4:	f7f8 fb00 	bl	80004d8 <__aeabi_dmul>
 8007ed8:	2200      	movs	r2, #0
 8007eda:	4b4f      	ldr	r3, [pc, #316]	@ (8008018 <_dtoa_r+0x530>)
 8007edc:	f7f8 f946 	bl	800016c <__adddf3>
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007ee6:	2c00      	cmp	r4, #0
 8007ee8:	f040 809a 	bne.w	8008020 <_dtoa_r+0x538>
 8007eec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	4b4a      	ldr	r3, [pc, #296]	@ (800801c <_dtoa_r+0x534>)
 8007ef4:	f7f8 f938 	bl	8000168 <__aeabi_dsub>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f00:	462a      	mov	r2, r5
 8007f02:	4633      	mov	r3, r6
 8007f04:	f7f8 fd78 	bl	80009f8 <__aeabi_dcmpgt>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	f040 828e 	bne.w	800842a <_dtoa_r+0x942>
 8007f0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f12:	462a      	mov	r2, r5
 8007f14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007f18:	f7f8 fd50 	bl	80009bc <__aeabi_dcmplt>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	f040 8127 	bne.w	8008170 <_dtoa_r+0x688>
 8007f22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007f26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007f2a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f2c0 8163 	blt.w	80081f8 <_dtoa_r+0x710>
 8007f32:	2f0e      	cmp	r7, #14
 8007f34:	f300 8160 	bgt.w	80081f8 <_dtoa_r+0x710>
 8007f38:	4b33      	ldr	r3, [pc, #204]	@ (8008008 <_dtoa_r+0x520>)
 8007f3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007f42:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007f46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	da03      	bge.n	8007f54 <_dtoa_r+0x46c>
 8007f4c:	9b07      	ldr	r3, [sp, #28]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f340 8100 	ble.w	8008154 <_dtoa_r+0x66c>
 8007f54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f58:	4656      	mov	r6, sl
 8007f5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f5e:	4620      	mov	r0, r4
 8007f60:	4629      	mov	r1, r5
 8007f62:	f7f8 fbe3 	bl	800072c <__aeabi_ddiv>
 8007f66:	f7f8 fd67 	bl	8000a38 <__aeabi_d2iz>
 8007f6a:	4680      	mov	r8, r0
 8007f6c:	f7f8 fa4a 	bl	8000404 <__aeabi_i2d>
 8007f70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f74:	f7f8 fab0 	bl	80004d8 <__aeabi_dmul>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	4629      	mov	r1, r5
 8007f80:	f7f8 f8f2 	bl	8000168 <__aeabi_dsub>
 8007f84:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007f88:	9d07      	ldr	r5, [sp, #28]
 8007f8a:	f806 4b01 	strb.w	r4, [r6], #1
 8007f8e:	eba6 040a 	sub.w	r4, r6, sl
 8007f92:	42a5      	cmp	r5, r4
 8007f94:	4602      	mov	r2, r0
 8007f96:	460b      	mov	r3, r1
 8007f98:	f040 8116 	bne.w	80081c8 <_dtoa_r+0x6e0>
 8007f9c:	f7f8 f8e6 	bl	800016c <__adddf3>
 8007fa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	460d      	mov	r5, r1
 8007fa8:	f7f8 fd26 	bl	80009f8 <__aeabi_dcmpgt>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	f040 80f8 	bne.w	80081a2 <_dtoa_r+0x6ba>
 8007fb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	4629      	mov	r1, r5
 8007fba:	f7f8 fcf5 	bl	80009a8 <__aeabi_dcmpeq>
 8007fbe:	b118      	cbz	r0, 8007fc8 <_dtoa_r+0x4e0>
 8007fc0:	f018 0f01 	tst.w	r8, #1
 8007fc4:	f040 80ed 	bne.w	80081a2 <_dtoa_r+0x6ba>
 8007fc8:	4649      	mov	r1, r9
 8007fca:	4658      	mov	r0, fp
 8007fcc:	f000 fc92 	bl	80088f4 <_Bfree>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	7033      	strb	r3, [r6, #0]
 8007fd4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007fd6:	3701      	adds	r7, #1
 8007fd8:	601f      	str	r7, [r3, #0]
 8007fda:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f000 8320 	beq.w	8008622 <_dtoa_r+0xb3a>
 8007fe2:	601e      	str	r6, [r3, #0]
 8007fe4:	e31d      	b.n	8008622 <_dtoa_r+0xb3a>
 8007fe6:	07e2      	lsls	r2, r4, #31
 8007fe8:	d505      	bpl.n	8007ff6 <_dtoa_r+0x50e>
 8007fea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fee:	f7f8 fa73 	bl	80004d8 <__aeabi_dmul>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	3601      	adds	r6, #1
 8007ff6:	1064      	asrs	r4, r4, #1
 8007ff8:	3508      	adds	r5, #8
 8007ffa:	e73f      	b.n	8007e7c <_dtoa_r+0x394>
 8007ffc:	2602      	movs	r6, #2
 8007ffe:	e742      	b.n	8007e86 <_dtoa_r+0x39e>
 8008000:	9c07      	ldr	r4, [sp, #28]
 8008002:	9704      	str	r7, [sp, #16]
 8008004:	e761      	b.n	8007eca <_dtoa_r+0x3e2>
 8008006:	bf00      	nop
 8008008:	0800c398 	.word	0x0800c398
 800800c:	0800c370 	.word	0x0800c370
 8008010:	3ff00000 	.word	0x3ff00000
 8008014:	40240000 	.word	0x40240000
 8008018:	401c0000 	.word	0x401c0000
 800801c:	40140000 	.word	0x40140000
 8008020:	4b70      	ldr	r3, [pc, #448]	@ (80081e4 <_dtoa_r+0x6fc>)
 8008022:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008024:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008028:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800802c:	4454      	add	r4, sl
 800802e:	2900      	cmp	r1, #0
 8008030:	d045      	beq.n	80080be <_dtoa_r+0x5d6>
 8008032:	2000      	movs	r0, #0
 8008034:	496c      	ldr	r1, [pc, #432]	@ (80081e8 <_dtoa_r+0x700>)
 8008036:	f7f8 fb79 	bl	800072c <__aeabi_ddiv>
 800803a:	4633      	mov	r3, r6
 800803c:	462a      	mov	r2, r5
 800803e:	f7f8 f893 	bl	8000168 <__aeabi_dsub>
 8008042:	4656      	mov	r6, sl
 8008044:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800804c:	f7f8 fcf4 	bl	8000a38 <__aeabi_d2iz>
 8008050:	4605      	mov	r5, r0
 8008052:	f7f8 f9d7 	bl	8000404 <__aeabi_i2d>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800805e:	f7f8 f883 	bl	8000168 <__aeabi_dsub>
 8008062:	4602      	mov	r2, r0
 8008064:	460b      	mov	r3, r1
 8008066:	3530      	adds	r5, #48	@ 0x30
 8008068:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800806c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008070:	f806 5b01 	strb.w	r5, [r6], #1
 8008074:	f7f8 fca2 	bl	80009bc <__aeabi_dcmplt>
 8008078:	2800      	cmp	r0, #0
 800807a:	d163      	bne.n	8008144 <_dtoa_r+0x65c>
 800807c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008080:	2000      	movs	r0, #0
 8008082:	495a      	ldr	r1, [pc, #360]	@ (80081ec <_dtoa_r+0x704>)
 8008084:	f7f8 f870 	bl	8000168 <__aeabi_dsub>
 8008088:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800808c:	f7f8 fc96 	bl	80009bc <__aeabi_dcmplt>
 8008090:	2800      	cmp	r0, #0
 8008092:	f040 8087 	bne.w	80081a4 <_dtoa_r+0x6bc>
 8008096:	42a6      	cmp	r6, r4
 8008098:	f43f af43 	beq.w	8007f22 <_dtoa_r+0x43a>
 800809c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80080a0:	2200      	movs	r2, #0
 80080a2:	4b53      	ldr	r3, [pc, #332]	@ (80081f0 <_dtoa_r+0x708>)
 80080a4:	f7f8 fa18 	bl	80004d8 <__aeabi_dmul>
 80080a8:	2200      	movs	r2, #0
 80080aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080b2:	4b4f      	ldr	r3, [pc, #316]	@ (80081f0 <_dtoa_r+0x708>)
 80080b4:	f7f8 fa10 	bl	80004d8 <__aeabi_dmul>
 80080b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080bc:	e7c4      	b.n	8008048 <_dtoa_r+0x560>
 80080be:	4631      	mov	r1, r6
 80080c0:	4628      	mov	r0, r5
 80080c2:	f7f8 fa09 	bl	80004d8 <__aeabi_dmul>
 80080c6:	4656      	mov	r6, sl
 80080c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080cc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80080ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080d2:	f7f8 fcb1 	bl	8000a38 <__aeabi_d2iz>
 80080d6:	4605      	mov	r5, r0
 80080d8:	f7f8 f994 	bl	8000404 <__aeabi_i2d>
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080e4:	f7f8 f840 	bl	8000168 <__aeabi_dsub>
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	3530      	adds	r5, #48	@ 0x30
 80080ee:	f806 5b01 	strb.w	r5, [r6], #1
 80080f2:	42a6      	cmp	r6, r4
 80080f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080f8:	f04f 0200 	mov.w	r2, #0
 80080fc:	d124      	bne.n	8008148 <_dtoa_r+0x660>
 80080fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008102:	4b39      	ldr	r3, [pc, #228]	@ (80081e8 <_dtoa_r+0x700>)
 8008104:	f7f8 f832 	bl	800016c <__adddf3>
 8008108:	4602      	mov	r2, r0
 800810a:	460b      	mov	r3, r1
 800810c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008110:	f7f8 fc72 	bl	80009f8 <__aeabi_dcmpgt>
 8008114:	2800      	cmp	r0, #0
 8008116:	d145      	bne.n	80081a4 <_dtoa_r+0x6bc>
 8008118:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800811c:	2000      	movs	r0, #0
 800811e:	4932      	ldr	r1, [pc, #200]	@ (80081e8 <_dtoa_r+0x700>)
 8008120:	f7f8 f822 	bl	8000168 <__aeabi_dsub>
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800812c:	f7f8 fc46 	bl	80009bc <__aeabi_dcmplt>
 8008130:	2800      	cmp	r0, #0
 8008132:	f43f aef6 	beq.w	8007f22 <_dtoa_r+0x43a>
 8008136:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008138:	1e73      	subs	r3, r6, #1
 800813a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800813c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008140:	2b30      	cmp	r3, #48	@ 0x30
 8008142:	d0f8      	beq.n	8008136 <_dtoa_r+0x64e>
 8008144:	9f04      	ldr	r7, [sp, #16]
 8008146:	e73f      	b.n	8007fc8 <_dtoa_r+0x4e0>
 8008148:	4b29      	ldr	r3, [pc, #164]	@ (80081f0 <_dtoa_r+0x708>)
 800814a:	f7f8 f9c5 	bl	80004d8 <__aeabi_dmul>
 800814e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008152:	e7bc      	b.n	80080ce <_dtoa_r+0x5e6>
 8008154:	d10c      	bne.n	8008170 <_dtoa_r+0x688>
 8008156:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800815a:	2200      	movs	r2, #0
 800815c:	4b25      	ldr	r3, [pc, #148]	@ (80081f4 <_dtoa_r+0x70c>)
 800815e:	f7f8 f9bb 	bl	80004d8 <__aeabi_dmul>
 8008162:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008166:	f7f8 fc3d 	bl	80009e4 <__aeabi_dcmpge>
 800816a:	2800      	cmp	r0, #0
 800816c:	f000 815b 	beq.w	8008426 <_dtoa_r+0x93e>
 8008170:	2400      	movs	r4, #0
 8008172:	4625      	mov	r5, r4
 8008174:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008176:	4656      	mov	r6, sl
 8008178:	43db      	mvns	r3, r3
 800817a:	9304      	str	r3, [sp, #16]
 800817c:	2700      	movs	r7, #0
 800817e:	4621      	mov	r1, r4
 8008180:	4658      	mov	r0, fp
 8008182:	f000 fbb7 	bl	80088f4 <_Bfree>
 8008186:	2d00      	cmp	r5, #0
 8008188:	d0dc      	beq.n	8008144 <_dtoa_r+0x65c>
 800818a:	b12f      	cbz	r7, 8008198 <_dtoa_r+0x6b0>
 800818c:	42af      	cmp	r7, r5
 800818e:	d003      	beq.n	8008198 <_dtoa_r+0x6b0>
 8008190:	4639      	mov	r1, r7
 8008192:	4658      	mov	r0, fp
 8008194:	f000 fbae 	bl	80088f4 <_Bfree>
 8008198:	4629      	mov	r1, r5
 800819a:	4658      	mov	r0, fp
 800819c:	f000 fbaa 	bl	80088f4 <_Bfree>
 80081a0:	e7d0      	b.n	8008144 <_dtoa_r+0x65c>
 80081a2:	9704      	str	r7, [sp, #16]
 80081a4:	4633      	mov	r3, r6
 80081a6:	461e      	mov	r6, r3
 80081a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081ac:	2a39      	cmp	r2, #57	@ 0x39
 80081ae:	d107      	bne.n	80081c0 <_dtoa_r+0x6d8>
 80081b0:	459a      	cmp	sl, r3
 80081b2:	d1f8      	bne.n	80081a6 <_dtoa_r+0x6be>
 80081b4:	9a04      	ldr	r2, [sp, #16]
 80081b6:	3201      	adds	r2, #1
 80081b8:	9204      	str	r2, [sp, #16]
 80081ba:	2230      	movs	r2, #48	@ 0x30
 80081bc:	f88a 2000 	strb.w	r2, [sl]
 80081c0:	781a      	ldrb	r2, [r3, #0]
 80081c2:	3201      	adds	r2, #1
 80081c4:	701a      	strb	r2, [r3, #0]
 80081c6:	e7bd      	b.n	8008144 <_dtoa_r+0x65c>
 80081c8:	2200      	movs	r2, #0
 80081ca:	4b09      	ldr	r3, [pc, #36]	@ (80081f0 <_dtoa_r+0x708>)
 80081cc:	f7f8 f984 	bl	80004d8 <__aeabi_dmul>
 80081d0:	2200      	movs	r2, #0
 80081d2:	2300      	movs	r3, #0
 80081d4:	4604      	mov	r4, r0
 80081d6:	460d      	mov	r5, r1
 80081d8:	f7f8 fbe6 	bl	80009a8 <__aeabi_dcmpeq>
 80081dc:	2800      	cmp	r0, #0
 80081de:	f43f aebc 	beq.w	8007f5a <_dtoa_r+0x472>
 80081e2:	e6f1      	b.n	8007fc8 <_dtoa_r+0x4e0>
 80081e4:	0800c398 	.word	0x0800c398
 80081e8:	3fe00000 	.word	0x3fe00000
 80081ec:	3ff00000 	.word	0x3ff00000
 80081f0:	40240000 	.word	0x40240000
 80081f4:	40140000 	.word	0x40140000
 80081f8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80081fa:	2a00      	cmp	r2, #0
 80081fc:	f000 80db 	beq.w	80083b6 <_dtoa_r+0x8ce>
 8008200:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008202:	2a01      	cmp	r2, #1
 8008204:	f300 80bf 	bgt.w	8008386 <_dtoa_r+0x89e>
 8008208:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800820a:	2a00      	cmp	r2, #0
 800820c:	f000 80b7 	beq.w	800837e <_dtoa_r+0x896>
 8008210:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008214:	4646      	mov	r6, r8
 8008216:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008218:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800821a:	2101      	movs	r1, #1
 800821c:	441a      	add	r2, r3
 800821e:	4658      	mov	r0, fp
 8008220:	4498      	add	r8, r3
 8008222:	9209      	str	r2, [sp, #36]	@ 0x24
 8008224:	f000 fc64 	bl	8008af0 <__i2b>
 8008228:	4605      	mov	r5, r0
 800822a:	b15e      	cbz	r6, 8008244 <_dtoa_r+0x75c>
 800822c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800822e:	2b00      	cmp	r3, #0
 8008230:	dd08      	ble.n	8008244 <_dtoa_r+0x75c>
 8008232:	42b3      	cmp	r3, r6
 8008234:	bfa8      	it	ge
 8008236:	4633      	movge	r3, r6
 8008238:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800823a:	eba8 0803 	sub.w	r8, r8, r3
 800823e:	1af6      	subs	r6, r6, r3
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	9309      	str	r3, [sp, #36]	@ 0x24
 8008244:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008246:	b1f3      	cbz	r3, 8008286 <_dtoa_r+0x79e>
 8008248:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 80b7 	beq.w	80083be <_dtoa_r+0x8d6>
 8008250:	b18c      	cbz	r4, 8008276 <_dtoa_r+0x78e>
 8008252:	4629      	mov	r1, r5
 8008254:	4622      	mov	r2, r4
 8008256:	4658      	mov	r0, fp
 8008258:	f000 fd08 	bl	8008c6c <__pow5mult>
 800825c:	464a      	mov	r2, r9
 800825e:	4601      	mov	r1, r0
 8008260:	4605      	mov	r5, r0
 8008262:	4658      	mov	r0, fp
 8008264:	f000 fc5a 	bl	8008b1c <__multiply>
 8008268:	4649      	mov	r1, r9
 800826a:	9004      	str	r0, [sp, #16]
 800826c:	4658      	mov	r0, fp
 800826e:	f000 fb41 	bl	80088f4 <_Bfree>
 8008272:	9b04      	ldr	r3, [sp, #16]
 8008274:	4699      	mov	r9, r3
 8008276:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008278:	1b1a      	subs	r2, r3, r4
 800827a:	d004      	beq.n	8008286 <_dtoa_r+0x79e>
 800827c:	4649      	mov	r1, r9
 800827e:	4658      	mov	r0, fp
 8008280:	f000 fcf4 	bl	8008c6c <__pow5mult>
 8008284:	4681      	mov	r9, r0
 8008286:	2101      	movs	r1, #1
 8008288:	4658      	mov	r0, fp
 800828a:	f000 fc31 	bl	8008af0 <__i2b>
 800828e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008290:	4604      	mov	r4, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	f000 81c9 	beq.w	800862a <_dtoa_r+0xb42>
 8008298:	461a      	mov	r2, r3
 800829a:	4601      	mov	r1, r0
 800829c:	4658      	mov	r0, fp
 800829e:	f000 fce5 	bl	8008c6c <__pow5mult>
 80082a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80082a4:	4604      	mov	r4, r0
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	f300 808f 	bgt.w	80083ca <_dtoa_r+0x8e2>
 80082ac:	9b02      	ldr	r3, [sp, #8]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f040 8087 	bne.w	80083c2 <_dtoa_r+0x8da>
 80082b4:	9b03      	ldr	r3, [sp, #12]
 80082b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f040 8083 	bne.w	80083c6 <_dtoa_r+0x8de>
 80082c0:	9b03      	ldr	r3, [sp, #12]
 80082c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80082c6:	0d1b      	lsrs	r3, r3, #20
 80082c8:	051b      	lsls	r3, r3, #20
 80082ca:	b12b      	cbz	r3, 80082d8 <_dtoa_r+0x7f0>
 80082cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082ce:	f108 0801 	add.w	r8, r8, #1
 80082d2:	3301      	adds	r3, #1
 80082d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80082d6:	2301      	movs	r3, #1
 80082d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80082da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 81aa 	beq.w	8008636 <_dtoa_r+0xb4e>
 80082e2:	6923      	ldr	r3, [r4, #16]
 80082e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80082e8:	6918      	ldr	r0, [r3, #16]
 80082ea:	f000 fbb5 	bl	8008a58 <__hi0bits>
 80082ee:	f1c0 0020 	rsb	r0, r0, #32
 80082f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082f4:	4418      	add	r0, r3
 80082f6:	f010 001f 	ands.w	r0, r0, #31
 80082fa:	d071      	beq.n	80083e0 <_dtoa_r+0x8f8>
 80082fc:	f1c0 0320 	rsb	r3, r0, #32
 8008300:	2b04      	cmp	r3, #4
 8008302:	dd65      	ble.n	80083d0 <_dtoa_r+0x8e8>
 8008304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008306:	f1c0 001c 	rsb	r0, r0, #28
 800830a:	4403      	add	r3, r0
 800830c:	4480      	add	r8, r0
 800830e:	4406      	add	r6, r0
 8008310:	9309      	str	r3, [sp, #36]	@ 0x24
 8008312:	f1b8 0f00 	cmp.w	r8, #0
 8008316:	dd05      	ble.n	8008324 <_dtoa_r+0x83c>
 8008318:	4649      	mov	r1, r9
 800831a:	4642      	mov	r2, r8
 800831c:	4658      	mov	r0, fp
 800831e:	f000 fcff 	bl	8008d20 <__lshift>
 8008322:	4681      	mov	r9, r0
 8008324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008326:	2b00      	cmp	r3, #0
 8008328:	dd05      	ble.n	8008336 <_dtoa_r+0x84e>
 800832a:	4621      	mov	r1, r4
 800832c:	461a      	mov	r2, r3
 800832e:	4658      	mov	r0, fp
 8008330:	f000 fcf6 	bl	8008d20 <__lshift>
 8008334:	4604      	mov	r4, r0
 8008336:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008338:	2b00      	cmp	r3, #0
 800833a:	d053      	beq.n	80083e4 <_dtoa_r+0x8fc>
 800833c:	4621      	mov	r1, r4
 800833e:	4648      	mov	r0, r9
 8008340:	f000 fd5a 	bl	8008df8 <__mcmp>
 8008344:	2800      	cmp	r0, #0
 8008346:	da4d      	bge.n	80083e4 <_dtoa_r+0x8fc>
 8008348:	1e7b      	subs	r3, r7, #1
 800834a:	4649      	mov	r1, r9
 800834c:	9304      	str	r3, [sp, #16]
 800834e:	220a      	movs	r2, #10
 8008350:	2300      	movs	r3, #0
 8008352:	4658      	mov	r0, fp
 8008354:	f000 faf0 	bl	8008938 <__multadd>
 8008358:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800835a:	4681      	mov	r9, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 816c 	beq.w	800863a <_dtoa_r+0xb52>
 8008362:	2300      	movs	r3, #0
 8008364:	4629      	mov	r1, r5
 8008366:	220a      	movs	r2, #10
 8008368:	4658      	mov	r0, fp
 800836a:	f000 fae5 	bl	8008938 <__multadd>
 800836e:	9b08      	ldr	r3, [sp, #32]
 8008370:	4605      	mov	r5, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	dc61      	bgt.n	800843a <_dtoa_r+0x952>
 8008376:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008378:	2b02      	cmp	r3, #2
 800837a:	dc3b      	bgt.n	80083f4 <_dtoa_r+0x90c>
 800837c:	e05d      	b.n	800843a <_dtoa_r+0x952>
 800837e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008380:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008384:	e746      	b.n	8008214 <_dtoa_r+0x72c>
 8008386:	9b07      	ldr	r3, [sp, #28]
 8008388:	1e5c      	subs	r4, r3, #1
 800838a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800838c:	42a3      	cmp	r3, r4
 800838e:	bfbf      	itttt	lt
 8008390:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008392:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008394:	1ae3      	sublt	r3, r4, r3
 8008396:	18d2      	addlt	r2, r2, r3
 8008398:	bfa8      	it	ge
 800839a:	1b1c      	subge	r4, r3, r4
 800839c:	9b07      	ldr	r3, [sp, #28]
 800839e:	bfbe      	ittt	lt
 80083a0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80083a2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80083a4:	2400      	movlt	r4, #0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	bfb5      	itete	lt
 80083aa:	eba8 0603 	sublt.w	r6, r8, r3
 80083ae:	4646      	movge	r6, r8
 80083b0:	2300      	movlt	r3, #0
 80083b2:	9b07      	ldrge	r3, [sp, #28]
 80083b4:	e730      	b.n	8008218 <_dtoa_r+0x730>
 80083b6:	4646      	mov	r6, r8
 80083b8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80083ba:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80083bc:	e735      	b.n	800822a <_dtoa_r+0x742>
 80083be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80083c0:	e75c      	b.n	800827c <_dtoa_r+0x794>
 80083c2:	2300      	movs	r3, #0
 80083c4:	e788      	b.n	80082d8 <_dtoa_r+0x7f0>
 80083c6:	9b02      	ldr	r3, [sp, #8]
 80083c8:	e786      	b.n	80082d8 <_dtoa_r+0x7f0>
 80083ca:	2300      	movs	r3, #0
 80083cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80083ce:	e788      	b.n	80082e2 <_dtoa_r+0x7fa>
 80083d0:	d09f      	beq.n	8008312 <_dtoa_r+0x82a>
 80083d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083d4:	331c      	adds	r3, #28
 80083d6:	441a      	add	r2, r3
 80083d8:	4498      	add	r8, r3
 80083da:	441e      	add	r6, r3
 80083dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80083de:	e798      	b.n	8008312 <_dtoa_r+0x82a>
 80083e0:	4603      	mov	r3, r0
 80083e2:	e7f6      	b.n	80083d2 <_dtoa_r+0x8ea>
 80083e4:	9b07      	ldr	r3, [sp, #28]
 80083e6:	9704      	str	r7, [sp, #16]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	dc20      	bgt.n	800842e <_dtoa_r+0x946>
 80083ec:	9308      	str	r3, [sp, #32]
 80083ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	dd1e      	ble.n	8008432 <_dtoa_r+0x94a>
 80083f4:	9b08      	ldr	r3, [sp, #32]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f47f aebc 	bne.w	8008174 <_dtoa_r+0x68c>
 80083fc:	4621      	mov	r1, r4
 80083fe:	2205      	movs	r2, #5
 8008400:	4658      	mov	r0, fp
 8008402:	f000 fa99 	bl	8008938 <__multadd>
 8008406:	4601      	mov	r1, r0
 8008408:	4604      	mov	r4, r0
 800840a:	4648      	mov	r0, r9
 800840c:	f000 fcf4 	bl	8008df8 <__mcmp>
 8008410:	2800      	cmp	r0, #0
 8008412:	f77f aeaf 	ble.w	8008174 <_dtoa_r+0x68c>
 8008416:	2331      	movs	r3, #49	@ 0x31
 8008418:	4656      	mov	r6, sl
 800841a:	f806 3b01 	strb.w	r3, [r6], #1
 800841e:	9b04      	ldr	r3, [sp, #16]
 8008420:	3301      	adds	r3, #1
 8008422:	9304      	str	r3, [sp, #16]
 8008424:	e6aa      	b.n	800817c <_dtoa_r+0x694>
 8008426:	9c07      	ldr	r4, [sp, #28]
 8008428:	9704      	str	r7, [sp, #16]
 800842a:	4625      	mov	r5, r4
 800842c:	e7f3      	b.n	8008416 <_dtoa_r+0x92e>
 800842e:	9b07      	ldr	r3, [sp, #28]
 8008430:	9308      	str	r3, [sp, #32]
 8008432:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008434:	2b00      	cmp	r3, #0
 8008436:	f000 8104 	beq.w	8008642 <_dtoa_r+0xb5a>
 800843a:	2e00      	cmp	r6, #0
 800843c:	dd05      	ble.n	800844a <_dtoa_r+0x962>
 800843e:	4629      	mov	r1, r5
 8008440:	4632      	mov	r2, r6
 8008442:	4658      	mov	r0, fp
 8008444:	f000 fc6c 	bl	8008d20 <__lshift>
 8008448:	4605      	mov	r5, r0
 800844a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800844c:	2b00      	cmp	r3, #0
 800844e:	d05a      	beq.n	8008506 <_dtoa_r+0xa1e>
 8008450:	4658      	mov	r0, fp
 8008452:	6869      	ldr	r1, [r5, #4]
 8008454:	f000 fa0e 	bl	8008874 <_Balloc>
 8008458:	4606      	mov	r6, r0
 800845a:	b928      	cbnz	r0, 8008468 <_dtoa_r+0x980>
 800845c:	4602      	mov	r2, r0
 800845e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008462:	4b83      	ldr	r3, [pc, #524]	@ (8008670 <_dtoa_r+0xb88>)
 8008464:	f7ff bb54 	b.w	8007b10 <_dtoa_r+0x28>
 8008468:	692a      	ldr	r2, [r5, #16]
 800846a:	f105 010c 	add.w	r1, r5, #12
 800846e:	3202      	adds	r2, #2
 8008470:	0092      	lsls	r2, r2, #2
 8008472:	300c      	adds	r0, #12
 8008474:	f001 ff5e 	bl	800a334 <memcpy>
 8008478:	2201      	movs	r2, #1
 800847a:	4631      	mov	r1, r6
 800847c:	4658      	mov	r0, fp
 800847e:	f000 fc4f 	bl	8008d20 <__lshift>
 8008482:	462f      	mov	r7, r5
 8008484:	4605      	mov	r5, r0
 8008486:	f10a 0301 	add.w	r3, sl, #1
 800848a:	9307      	str	r3, [sp, #28]
 800848c:	9b08      	ldr	r3, [sp, #32]
 800848e:	4453      	add	r3, sl
 8008490:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008492:	9b02      	ldr	r3, [sp, #8]
 8008494:	f003 0301 	and.w	r3, r3, #1
 8008498:	930a      	str	r3, [sp, #40]	@ 0x28
 800849a:	9b07      	ldr	r3, [sp, #28]
 800849c:	4621      	mov	r1, r4
 800849e:	3b01      	subs	r3, #1
 80084a0:	4648      	mov	r0, r9
 80084a2:	9302      	str	r3, [sp, #8]
 80084a4:	f7ff fa98 	bl	80079d8 <quorem>
 80084a8:	4639      	mov	r1, r7
 80084aa:	9008      	str	r0, [sp, #32]
 80084ac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80084b0:	4648      	mov	r0, r9
 80084b2:	f000 fca1 	bl	8008df8 <__mcmp>
 80084b6:	462a      	mov	r2, r5
 80084b8:	9009      	str	r0, [sp, #36]	@ 0x24
 80084ba:	4621      	mov	r1, r4
 80084bc:	4658      	mov	r0, fp
 80084be:	f000 fcb7 	bl	8008e30 <__mdiff>
 80084c2:	68c2      	ldr	r2, [r0, #12]
 80084c4:	4606      	mov	r6, r0
 80084c6:	bb02      	cbnz	r2, 800850a <_dtoa_r+0xa22>
 80084c8:	4601      	mov	r1, r0
 80084ca:	4648      	mov	r0, r9
 80084cc:	f000 fc94 	bl	8008df8 <__mcmp>
 80084d0:	4602      	mov	r2, r0
 80084d2:	4631      	mov	r1, r6
 80084d4:	4658      	mov	r0, fp
 80084d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80084d8:	f000 fa0c 	bl	80088f4 <_Bfree>
 80084dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80084de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80084e0:	9e07      	ldr	r6, [sp, #28]
 80084e2:	ea43 0102 	orr.w	r1, r3, r2
 80084e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084e8:	4319      	orrs	r1, r3
 80084ea:	d110      	bne.n	800850e <_dtoa_r+0xa26>
 80084ec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80084f0:	d029      	beq.n	8008546 <_dtoa_r+0xa5e>
 80084f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	dd02      	ble.n	80084fe <_dtoa_r+0xa16>
 80084f8:	9b08      	ldr	r3, [sp, #32]
 80084fa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80084fe:	9b02      	ldr	r3, [sp, #8]
 8008500:	f883 8000 	strb.w	r8, [r3]
 8008504:	e63b      	b.n	800817e <_dtoa_r+0x696>
 8008506:	4628      	mov	r0, r5
 8008508:	e7bb      	b.n	8008482 <_dtoa_r+0x99a>
 800850a:	2201      	movs	r2, #1
 800850c:	e7e1      	b.n	80084d2 <_dtoa_r+0x9ea>
 800850e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008510:	2b00      	cmp	r3, #0
 8008512:	db04      	blt.n	800851e <_dtoa_r+0xa36>
 8008514:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008516:	430b      	orrs	r3, r1
 8008518:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800851a:	430b      	orrs	r3, r1
 800851c:	d120      	bne.n	8008560 <_dtoa_r+0xa78>
 800851e:	2a00      	cmp	r2, #0
 8008520:	dded      	ble.n	80084fe <_dtoa_r+0xa16>
 8008522:	4649      	mov	r1, r9
 8008524:	2201      	movs	r2, #1
 8008526:	4658      	mov	r0, fp
 8008528:	f000 fbfa 	bl	8008d20 <__lshift>
 800852c:	4621      	mov	r1, r4
 800852e:	4681      	mov	r9, r0
 8008530:	f000 fc62 	bl	8008df8 <__mcmp>
 8008534:	2800      	cmp	r0, #0
 8008536:	dc03      	bgt.n	8008540 <_dtoa_r+0xa58>
 8008538:	d1e1      	bne.n	80084fe <_dtoa_r+0xa16>
 800853a:	f018 0f01 	tst.w	r8, #1
 800853e:	d0de      	beq.n	80084fe <_dtoa_r+0xa16>
 8008540:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008544:	d1d8      	bne.n	80084f8 <_dtoa_r+0xa10>
 8008546:	2339      	movs	r3, #57	@ 0x39
 8008548:	9a02      	ldr	r2, [sp, #8]
 800854a:	7013      	strb	r3, [r2, #0]
 800854c:	4633      	mov	r3, r6
 800854e:	461e      	mov	r6, r3
 8008550:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008554:	3b01      	subs	r3, #1
 8008556:	2a39      	cmp	r2, #57	@ 0x39
 8008558:	d052      	beq.n	8008600 <_dtoa_r+0xb18>
 800855a:	3201      	adds	r2, #1
 800855c:	701a      	strb	r2, [r3, #0]
 800855e:	e60e      	b.n	800817e <_dtoa_r+0x696>
 8008560:	2a00      	cmp	r2, #0
 8008562:	dd07      	ble.n	8008574 <_dtoa_r+0xa8c>
 8008564:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008568:	d0ed      	beq.n	8008546 <_dtoa_r+0xa5e>
 800856a:	9a02      	ldr	r2, [sp, #8]
 800856c:	f108 0301 	add.w	r3, r8, #1
 8008570:	7013      	strb	r3, [r2, #0]
 8008572:	e604      	b.n	800817e <_dtoa_r+0x696>
 8008574:	9b07      	ldr	r3, [sp, #28]
 8008576:	9a07      	ldr	r2, [sp, #28]
 8008578:	f803 8c01 	strb.w	r8, [r3, #-1]
 800857c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800857e:	4293      	cmp	r3, r2
 8008580:	d028      	beq.n	80085d4 <_dtoa_r+0xaec>
 8008582:	4649      	mov	r1, r9
 8008584:	2300      	movs	r3, #0
 8008586:	220a      	movs	r2, #10
 8008588:	4658      	mov	r0, fp
 800858a:	f000 f9d5 	bl	8008938 <__multadd>
 800858e:	42af      	cmp	r7, r5
 8008590:	4681      	mov	r9, r0
 8008592:	f04f 0300 	mov.w	r3, #0
 8008596:	f04f 020a 	mov.w	r2, #10
 800859a:	4639      	mov	r1, r7
 800859c:	4658      	mov	r0, fp
 800859e:	d107      	bne.n	80085b0 <_dtoa_r+0xac8>
 80085a0:	f000 f9ca 	bl	8008938 <__multadd>
 80085a4:	4607      	mov	r7, r0
 80085a6:	4605      	mov	r5, r0
 80085a8:	9b07      	ldr	r3, [sp, #28]
 80085aa:	3301      	adds	r3, #1
 80085ac:	9307      	str	r3, [sp, #28]
 80085ae:	e774      	b.n	800849a <_dtoa_r+0x9b2>
 80085b0:	f000 f9c2 	bl	8008938 <__multadd>
 80085b4:	4629      	mov	r1, r5
 80085b6:	4607      	mov	r7, r0
 80085b8:	2300      	movs	r3, #0
 80085ba:	220a      	movs	r2, #10
 80085bc:	4658      	mov	r0, fp
 80085be:	f000 f9bb 	bl	8008938 <__multadd>
 80085c2:	4605      	mov	r5, r0
 80085c4:	e7f0      	b.n	80085a8 <_dtoa_r+0xac0>
 80085c6:	9b08      	ldr	r3, [sp, #32]
 80085c8:	2700      	movs	r7, #0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	bfcc      	ite	gt
 80085ce:	461e      	movgt	r6, r3
 80085d0:	2601      	movle	r6, #1
 80085d2:	4456      	add	r6, sl
 80085d4:	4649      	mov	r1, r9
 80085d6:	2201      	movs	r2, #1
 80085d8:	4658      	mov	r0, fp
 80085da:	f000 fba1 	bl	8008d20 <__lshift>
 80085de:	4621      	mov	r1, r4
 80085e0:	4681      	mov	r9, r0
 80085e2:	f000 fc09 	bl	8008df8 <__mcmp>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	dcb0      	bgt.n	800854c <_dtoa_r+0xa64>
 80085ea:	d102      	bne.n	80085f2 <_dtoa_r+0xb0a>
 80085ec:	f018 0f01 	tst.w	r8, #1
 80085f0:	d1ac      	bne.n	800854c <_dtoa_r+0xa64>
 80085f2:	4633      	mov	r3, r6
 80085f4:	461e      	mov	r6, r3
 80085f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085fa:	2a30      	cmp	r2, #48	@ 0x30
 80085fc:	d0fa      	beq.n	80085f4 <_dtoa_r+0xb0c>
 80085fe:	e5be      	b.n	800817e <_dtoa_r+0x696>
 8008600:	459a      	cmp	sl, r3
 8008602:	d1a4      	bne.n	800854e <_dtoa_r+0xa66>
 8008604:	9b04      	ldr	r3, [sp, #16]
 8008606:	3301      	adds	r3, #1
 8008608:	9304      	str	r3, [sp, #16]
 800860a:	2331      	movs	r3, #49	@ 0x31
 800860c:	f88a 3000 	strb.w	r3, [sl]
 8008610:	e5b5      	b.n	800817e <_dtoa_r+0x696>
 8008612:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008614:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008674 <_dtoa_r+0xb8c>
 8008618:	b11b      	cbz	r3, 8008622 <_dtoa_r+0xb3a>
 800861a:	f10a 0308 	add.w	r3, sl, #8
 800861e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008620:	6013      	str	r3, [r2, #0]
 8008622:	4650      	mov	r0, sl
 8008624:	b017      	add	sp, #92	@ 0x5c
 8008626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800862a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800862c:	2b01      	cmp	r3, #1
 800862e:	f77f ae3d 	ble.w	80082ac <_dtoa_r+0x7c4>
 8008632:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008634:	930a      	str	r3, [sp, #40]	@ 0x28
 8008636:	2001      	movs	r0, #1
 8008638:	e65b      	b.n	80082f2 <_dtoa_r+0x80a>
 800863a:	9b08      	ldr	r3, [sp, #32]
 800863c:	2b00      	cmp	r3, #0
 800863e:	f77f aed6 	ble.w	80083ee <_dtoa_r+0x906>
 8008642:	4656      	mov	r6, sl
 8008644:	4621      	mov	r1, r4
 8008646:	4648      	mov	r0, r9
 8008648:	f7ff f9c6 	bl	80079d8 <quorem>
 800864c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008650:	9b08      	ldr	r3, [sp, #32]
 8008652:	f806 8b01 	strb.w	r8, [r6], #1
 8008656:	eba6 020a 	sub.w	r2, r6, sl
 800865a:	4293      	cmp	r3, r2
 800865c:	ddb3      	ble.n	80085c6 <_dtoa_r+0xade>
 800865e:	4649      	mov	r1, r9
 8008660:	2300      	movs	r3, #0
 8008662:	220a      	movs	r2, #10
 8008664:	4658      	mov	r0, fp
 8008666:	f000 f967 	bl	8008938 <__multadd>
 800866a:	4681      	mov	r9, r0
 800866c:	e7ea      	b.n	8008644 <_dtoa_r+0xb5c>
 800866e:	bf00      	nop
 8008670:	0800c2f7 	.word	0x0800c2f7
 8008674:	0800c27b 	.word	0x0800c27b

08008678 <_free_r>:
 8008678:	b538      	push	{r3, r4, r5, lr}
 800867a:	4605      	mov	r5, r0
 800867c:	2900      	cmp	r1, #0
 800867e:	d040      	beq.n	8008702 <_free_r+0x8a>
 8008680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008684:	1f0c      	subs	r4, r1, #4
 8008686:	2b00      	cmp	r3, #0
 8008688:	bfb8      	it	lt
 800868a:	18e4      	addlt	r4, r4, r3
 800868c:	f000 f8e6 	bl	800885c <__malloc_lock>
 8008690:	4a1c      	ldr	r2, [pc, #112]	@ (8008704 <_free_r+0x8c>)
 8008692:	6813      	ldr	r3, [r2, #0]
 8008694:	b933      	cbnz	r3, 80086a4 <_free_r+0x2c>
 8008696:	6063      	str	r3, [r4, #4]
 8008698:	6014      	str	r4, [r2, #0]
 800869a:	4628      	mov	r0, r5
 800869c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086a0:	f000 b8e2 	b.w	8008868 <__malloc_unlock>
 80086a4:	42a3      	cmp	r3, r4
 80086a6:	d908      	bls.n	80086ba <_free_r+0x42>
 80086a8:	6820      	ldr	r0, [r4, #0]
 80086aa:	1821      	adds	r1, r4, r0
 80086ac:	428b      	cmp	r3, r1
 80086ae:	bf01      	itttt	eq
 80086b0:	6819      	ldreq	r1, [r3, #0]
 80086b2:	685b      	ldreq	r3, [r3, #4]
 80086b4:	1809      	addeq	r1, r1, r0
 80086b6:	6021      	streq	r1, [r4, #0]
 80086b8:	e7ed      	b.n	8008696 <_free_r+0x1e>
 80086ba:	461a      	mov	r2, r3
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	b10b      	cbz	r3, 80086c4 <_free_r+0x4c>
 80086c0:	42a3      	cmp	r3, r4
 80086c2:	d9fa      	bls.n	80086ba <_free_r+0x42>
 80086c4:	6811      	ldr	r1, [r2, #0]
 80086c6:	1850      	adds	r0, r2, r1
 80086c8:	42a0      	cmp	r0, r4
 80086ca:	d10b      	bne.n	80086e4 <_free_r+0x6c>
 80086cc:	6820      	ldr	r0, [r4, #0]
 80086ce:	4401      	add	r1, r0
 80086d0:	1850      	adds	r0, r2, r1
 80086d2:	4283      	cmp	r3, r0
 80086d4:	6011      	str	r1, [r2, #0]
 80086d6:	d1e0      	bne.n	800869a <_free_r+0x22>
 80086d8:	6818      	ldr	r0, [r3, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	4408      	add	r0, r1
 80086de:	6010      	str	r0, [r2, #0]
 80086e0:	6053      	str	r3, [r2, #4]
 80086e2:	e7da      	b.n	800869a <_free_r+0x22>
 80086e4:	d902      	bls.n	80086ec <_free_r+0x74>
 80086e6:	230c      	movs	r3, #12
 80086e8:	602b      	str	r3, [r5, #0]
 80086ea:	e7d6      	b.n	800869a <_free_r+0x22>
 80086ec:	6820      	ldr	r0, [r4, #0]
 80086ee:	1821      	adds	r1, r4, r0
 80086f0:	428b      	cmp	r3, r1
 80086f2:	bf01      	itttt	eq
 80086f4:	6819      	ldreq	r1, [r3, #0]
 80086f6:	685b      	ldreq	r3, [r3, #4]
 80086f8:	1809      	addeq	r1, r1, r0
 80086fa:	6021      	streq	r1, [r4, #0]
 80086fc:	6063      	str	r3, [r4, #4]
 80086fe:	6054      	str	r4, [r2, #4]
 8008700:	e7cb      	b.n	800869a <_free_r+0x22>
 8008702:	bd38      	pop	{r3, r4, r5, pc}
 8008704:	200005b4 	.word	0x200005b4

08008708 <malloc>:
 8008708:	4b02      	ldr	r3, [pc, #8]	@ (8008714 <malloc+0xc>)
 800870a:	4601      	mov	r1, r0
 800870c:	6818      	ldr	r0, [r3, #0]
 800870e:	f000 b825 	b.w	800875c <_malloc_r>
 8008712:	bf00      	nop
 8008714:	2000001c 	.word	0x2000001c

08008718 <sbrk_aligned>:
 8008718:	b570      	push	{r4, r5, r6, lr}
 800871a:	4e0f      	ldr	r6, [pc, #60]	@ (8008758 <sbrk_aligned+0x40>)
 800871c:	460c      	mov	r4, r1
 800871e:	6831      	ldr	r1, [r6, #0]
 8008720:	4605      	mov	r5, r0
 8008722:	b911      	cbnz	r1, 800872a <sbrk_aligned+0x12>
 8008724:	f001 fdf6 	bl	800a314 <_sbrk_r>
 8008728:	6030      	str	r0, [r6, #0]
 800872a:	4621      	mov	r1, r4
 800872c:	4628      	mov	r0, r5
 800872e:	f001 fdf1 	bl	800a314 <_sbrk_r>
 8008732:	1c43      	adds	r3, r0, #1
 8008734:	d103      	bne.n	800873e <sbrk_aligned+0x26>
 8008736:	f04f 34ff 	mov.w	r4, #4294967295
 800873a:	4620      	mov	r0, r4
 800873c:	bd70      	pop	{r4, r5, r6, pc}
 800873e:	1cc4      	adds	r4, r0, #3
 8008740:	f024 0403 	bic.w	r4, r4, #3
 8008744:	42a0      	cmp	r0, r4
 8008746:	d0f8      	beq.n	800873a <sbrk_aligned+0x22>
 8008748:	1a21      	subs	r1, r4, r0
 800874a:	4628      	mov	r0, r5
 800874c:	f001 fde2 	bl	800a314 <_sbrk_r>
 8008750:	3001      	adds	r0, #1
 8008752:	d1f2      	bne.n	800873a <sbrk_aligned+0x22>
 8008754:	e7ef      	b.n	8008736 <sbrk_aligned+0x1e>
 8008756:	bf00      	nop
 8008758:	200005b0 	.word	0x200005b0

0800875c <_malloc_r>:
 800875c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008760:	1ccd      	adds	r5, r1, #3
 8008762:	f025 0503 	bic.w	r5, r5, #3
 8008766:	3508      	adds	r5, #8
 8008768:	2d0c      	cmp	r5, #12
 800876a:	bf38      	it	cc
 800876c:	250c      	movcc	r5, #12
 800876e:	2d00      	cmp	r5, #0
 8008770:	4606      	mov	r6, r0
 8008772:	db01      	blt.n	8008778 <_malloc_r+0x1c>
 8008774:	42a9      	cmp	r1, r5
 8008776:	d904      	bls.n	8008782 <_malloc_r+0x26>
 8008778:	230c      	movs	r3, #12
 800877a:	6033      	str	r3, [r6, #0]
 800877c:	2000      	movs	r0, #0
 800877e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008782:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008858 <_malloc_r+0xfc>
 8008786:	f000 f869 	bl	800885c <__malloc_lock>
 800878a:	f8d8 3000 	ldr.w	r3, [r8]
 800878e:	461c      	mov	r4, r3
 8008790:	bb44      	cbnz	r4, 80087e4 <_malloc_r+0x88>
 8008792:	4629      	mov	r1, r5
 8008794:	4630      	mov	r0, r6
 8008796:	f7ff ffbf 	bl	8008718 <sbrk_aligned>
 800879a:	1c43      	adds	r3, r0, #1
 800879c:	4604      	mov	r4, r0
 800879e:	d158      	bne.n	8008852 <_malloc_r+0xf6>
 80087a0:	f8d8 4000 	ldr.w	r4, [r8]
 80087a4:	4627      	mov	r7, r4
 80087a6:	2f00      	cmp	r7, #0
 80087a8:	d143      	bne.n	8008832 <_malloc_r+0xd6>
 80087aa:	2c00      	cmp	r4, #0
 80087ac:	d04b      	beq.n	8008846 <_malloc_r+0xea>
 80087ae:	6823      	ldr	r3, [r4, #0]
 80087b0:	4639      	mov	r1, r7
 80087b2:	4630      	mov	r0, r6
 80087b4:	eb04 0903 	add.w	r9, r4, r3
 80087b8:	f001 fdac 	bl	800a314 <_sbrk_r>
 80087bc:	4581      	cmp	r9, r0
 80087be:	d142      	bne.n	8008846 <_malloc_r+0xea>
 80087c0:	6821      	ldr	r1, [r4, #0]
 80087c2:	4630      	mov	r0, r6
 80087c4:	1a6d      	subs	r5, r5, r1
 80087c6:	4629      	mov	r1, r5
 80087c8:	f7ff ffa6 	bl	8008718 <sbrk_aligned>
 80087cc:	3001      	adds	r0, #1
 80087ce:	d03a      	beq.n	8008846 <_malloc_r+0xea>
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	442b      	add	r3, r5
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	f8d8 3000 	ldr.w	r3, [r8]
 80087da:	685a      	ldr	r2, [r3, #4]
 80087dc:	bb62      	cbnz	r2, 8008838 <_malloc_r+0xdc>
 80087de:	f8c8 7000 	str.w	r7, [r8]
 80087e2:	e00f      	b.n	8008804 <_malloc_r+0xa8>
 80087e4:	6822      	ldr	r2, [r4, #0]
 80087e6:	1b52      	subs	r2, r2, r5
 80087e8:	d420      	bmi.n	800882c <_malloc_r+0xd0>
 80087ea:	2a0b      	cmp	r2, #11
 80087ec:	d917      	bls.n	800881e <_malloc_r+0xc2>
 80087ee:	1961      	adds	r1, r4, r5
 80087f0:	42a3      	cmp	r3, r4
 80087f2:	6025      	str	r5, [r4, #0]
 80087f4:	bf18      	it	ne
 80087f6:	6059      	strne	r1, [r3, #4]
 80087f8:	6863      	ldr	r3, [r4, #4]
 80087fa:	bf08      	it	eq
 80087fc:	f8c8 1000 	streq.w	r1, [r8]
 8008800:	5162      	str	r2, [r4, r5]
 8008802:	604b      	str	r3, [r1, #4]
 8008804:	4630      	mov	r0, r6
 8008806:	f000 f82f 	bl	8008868 <__malloc_unlock>
 800880a:	f104 000b 	add.w	r0, r4, #11
 800880e:	1d23      	adds	r3, r4, #4
 8008810:	f020 0007 	bic.w	r0, r0, #7
 8008814:	1ac2      	subs	r2, r0, r3
 8008816:	bf1c      	itt	ne
 8008818:	1a1b      	subne	r3, r3, r0
 800881a:	50a3      	strne	r3, [r4, r2]
 800881c:	e7af      	b.n	800877e <_malloc_r+0x22>
 800881e:	6862      	ldr	r2, [r4, #4]
 8008820:	42a3      	cmp	r3, r4
 8008822:	bf0c      	ite	eq
 8008824:	f8c8 2000 	streq.w	r2, [r8]
 8008828:	605a      	strne	r2, [r3, #4]
 800882a:	e7eb      	b.n	8008804 <_malloc_r+0xa8>
 800882c:	4623      	mov	r3, r4
 800882e:	6864      	ldr	r4, [r4, #4]
 8008830:	e7ae      	b.n	8008790 <_malloc_r+0x34>
 8008832:	463c      	mov	r4, r7
 8008834:	687f      	ldr	r7, [r7, #4]
 8008836:	e7b6      	b.n	80087a6 <_malloc_r+0x4a>
 8008838:	461a      	mov	r2, r3
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	42a3      	cmp	r3, r4
 800883e:	d1fb      	bne.n	8008838 <_malloc_r+0xdc>
 8008840:	2300      	movs	r3, #0
 8008842:	6053      	str	r3, [r2, #4]
 8008844:	e7de      	b.n	8008804 <_malloc_r+0xa8>
 8008846:	230c      	movs	r3, #12
 8008848:	4630      	mov	r0, r6
 800884a:	6033      	str	r3, [r6, #0]
 800884c:	f000 f80c 	bl	8008868 <__malloc_unlock>
 8008850:	e794      	b.n	800877c <_malloc_r+0x20>
 8008852:	6005      	str	r5, [r0, #0]
 8008854:	e7d6      	b.n	8008804 <_malloc_r+0xa8>
 8008856:	bf00      	nop
 8008858:	200005b4 	.word	0x200005b4

0800885c <__malloc_lock>:
 800885c:	4801      	ldr	r0, [pc, #4]	@ (8008864 <__malloc_lock+0x8>)
 800885e:	f7ff b8a6 	b.w	80079ae <__retarget_lock_acquire_recursive>
 8008862:	bf00      	nop
 8008864:	200005ac 	.word	0x200005ac

08008868 <__malloc_unlock>:
 8008868:	4801      	ldr	r0, [pc, #4]	@ (8008870 <__malloc_unlock+0x8>)
 800886a:	f7ff b8a1 	b.w	80079b0 <__retarget_lock_release_recursive>
 800886e:	bf00      	nop
 8008870:	200005ac 	.word	0x200005ac

08008874 <_Balloc>:
 8008874:	b570      	push	{r4, r5, r6, lr}
 8008876:	69c6      	ldr	r6, [r0, #28]
 8008878:	4604      	mov	r4, r0
 800887a:	460d      	mov	r5, r1
 800887c:	b976      	cbnz	r6, 800889c <_Balloc+0x28>
 800887e:	2010      	movs	r0, #16
 8008880:	f7ff ff42 	bl	8008708 <malloc>
 8008884:	4602      	mov	r2, r0
 8008886:	61e0      	str	r0, [r4, #28]
 8008888:	b920      	cbnz	r0, 8008894 <_Balloc+0x20>
 800888a:	216b      	movs	r1, #107	@ 0x6b
 800888c:	4b17      	ldr	r3, [pc, #92]	@ (80088ec <_Balloc+0x78>)
 800888e:	4818      	ldr	r0, [pc, #96]	@ (80088f0 <_Balloc+0x7c>)
 8008890:	f001 fd64 	bl	800a35c <__assert_func>
 8008894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008898:	6006      	str	r6, [r0, #0]
 800889a:	60c6      	str	r6, [r0, #12]
 800889c:	69e6      	ldr	r6, [r4, #28]
 800889e:	68f3      	ldr	r3, [r6, #12]
 80088a0:	b183      	cbz	r3, 80088c4 <_Balloc+0x50>
 80088a2:	69e3      	ldr	r3, [r4, #28]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088aa:	b9b8      	cbnz	r0, 80088dc <_Balloc+0x68>
 80088ac:	2101      	movs	r1, #1
 80088ae:	fa01 f605 	lsl.w	r6, r1, r5
 80088b2:	1d72      	adds	r2, r6, #5
 80088b4:	4620      	mov	r0, r4
 80088b6:	0092      	lsls	r2, r2, #2
 80088b8:	f001 fd6e 	bl	800a398 <_calloc_r>
 80088bc:	b160      	cbz	r0, 80088d8 <_Balloc+0x64>
 80088be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088c2:	e00e      	b.n	80088e2 <_Balloc+0x6e>
 80088c4:	2221      	movs	r2, #33	@ 0x21
 80088c6:	2104      	movs	r1, #4
 80088c8:	4620      	mov	r0, r4
 80088ca:	f001 fd65 	bl	800a398 <_calloc_r>
 80088ce:	69e3      	ldr	r3, [r4, #28]
 80088d0:	60f0      	str	r0, [r6, #12]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1e4      	bne.n	80088a2 <_Balloc+0x2e>
 80088d8:	2000      	movs	r0, #0
 80088da:	bd70      	pop	{r4, r5, r6, pc}
 80088dc:	6802      	ldr	r2, [r0, #0]
 80088de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088e2:	2300      	movs	r3, #0
 80088e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088e8:	e7f7      	b.n	80088da <_Balloc+0x66>
 80088ea:	bf00      	nop
 80088ec:	0800c288 	.word	0x0800c288
 80088f0:	0800c308 	.word	0x0800c308

080088f4 <_Bfree>:
 80088f4:	b570      	push	{r4, r5, r6, lr}
 80088f6:	69c6      	ldr	r6, [r0, #28]
 80088f8:	4605      	mov	r5, r0
 80088fa:	460c      	mov	r4, r1
 80088fc:	b976      	cbnz	r6, 800891c <_Bfree+0x28>
 80088fe:	2010      	movs	r0, #16
 8008900:	f7ff ff02 	bl	8008708 <malloc>
 8008904:	4602      	mov	r2, r0
 8008906:	61e8      	str	r0, [r5, #28]
 8008908:	b920      	cbnz	r0, 8008914 <_Bfree+0x20>
 800890a:	218f      	movs	r1, #143	@ 0x8f
 800890c:	4b08      	ldr	r3, [pc, #32]	@ (8008930 <_Bfree+0x3c>)
 800890e:	4809      	ldr	r0, [pc, #36]	@ (8008934 <_Bfree+0x40>)
 8008910:	f001 fd24 	bl	800a35c <__assert_func>
 8008914:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008918:	6006      	str	r6, [r0, #0]
 800891a:	60c6      	str	r6, [r0, #12]
 800891c:	b13c      	cbz	r4, 800892e <_Bfree+0x3a>
 800891e:	69eb      	ldr	r3, [r5, #28]
 8008920:	6862      	ldr	r2, [r4, #4]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008928:	6021      	str	r1, [r4, #0]
 800892a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800892e:	bd70      	pop	{r4, r5, r6, pc}
 8008930:	0800c288 	.word	0x0800c288
 8008934:	0800c308 	.word	0x0800c308

08008938 <__multadd>:
 8008938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800893c:	4607      	mov	r7, r0
 800893e:	460c      	mov	r4, r1
 8008940:	461e      	mov	r6, r3
 8008942:	2000      	movs	r0, #0
 8008944:	690d      	ldr	r5, [r1, #16]
 8008946:	f101 0c14 	add.w	ip, r1, #20
 800894a:	f8dc 3000 	ldr.w	r3, [ip]
 800894e:	3001      	adds	r0, #1
 8008950:	b299      	uxth	r1, r3
 8008952:	fb02 6101 	mla	r1, r2, r1, r6
 8008956:	0c1e      	lsrs	r6, r3, #16
 8008958:	0c0b      	lsrs	r3, r1, #16
 800895a:	fb02 3306 	mla	r3, r2, r6, r3
 800895e:	b289      	uxth	r1, r1
 8008960:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008964:	4285      	cmp	r5, r0
 8008966:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800896a:	f84c 1b04 	str.w	r1, [ip], #4
 800896e:	dcec      	bgt.n	800894a <__multadd+0x12>
 8008970:	b30e      	cbz	r6, 80089b6 <__multadd+0x7e>
 8008972:	68a3      	ldr	r3, [r4, #8]
 8008974:	42ab      	cmp	r3, r5
 8008976:	dc19      	bgt.n	80089ac <__multadd+0x74>
 8008978:	6861      	ldr	r1, [r4, #4]
 800897a:	4638      	mov	r0, r7
 800897c:	3101      	adds	r1, #1
 800897e:	f7ff ff79 	bl	8008874 <_Balloc>
 8008982:	4680      	mov	r8, r0
 8008984:	b928      	cbnz	r0, 8008992 <__multadd+0x5a>
 8008986:	4602      	mov	r2, r0
 8008988:	21ba      	movs	r1, #186	@ 0xba
 800898a:	4b0c      	ldr	r3, [pc, #48]	@ (80089bc <__multadd+0x84>)
 800898c:	480c      	ldr	r0, [pc, #48]	@ (80089c0 <__multadd+0x88>)
 800898e:	f001 fce5 	bl	800a35c <__assert_func>
 8008992:	6922      	ldr	r2, [r4, #16]
 8008994:	f104 010c 	add.w	r1, r4, #12
 8008998:	3202      	adds	r2, #2
 800899a:	0092      	lsls	r2, r2, #2
 800899c:	300c      	adds	r0, #12
 800899e:	f001 fcc9 	bl	800a334 <memcpy>
 80089a2:	4621      	mov	r1, r4
 80089a4:	4638      	mov	r0, r7
 80089a6:	f7ff ffa5 	bl	80088f4 <_Bfree>
 80089aa:	4644      	mov	r4, r8
 80089ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80089b0:	3501      	adds	r5, #1
 80089b2:	615e      	str	r6, [r3, #20]
 80089b4:	6125      	str	r5, [r4, #16]
 80089b6:	4620      	mov	r0, r4
 80089b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089bc:	0800c2f7 	.word	0x0800c2f7
 80089c0:	0800c308 	.word	0x0800c308

080089c4 <__s2b>:
 80089c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089c8:	4615      	mov	r5, r2
 80089ca:	2209      	movs	r2, #9
 80089cc:	461f      	mov	r7, r3
 80089ce:	3308      	adds	r3, #8
 80089d0:	460c      	mov	r4, r1
 80089d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80089d6:	4606      	mov	r6, r0
 80089d8:	2201      	movs	r2, #1
 80089da:	2100      	movs	r1, #0
 80089dc:	429a      	cmp	r2, r3
 80089de:	db09      	blt.n	80089f4 <__s2b+0x30>
 80089e0:	4630      	mov	r0, r6
 80089e2:	f7ff ff47 	bl	8008874 <_Balloc>
 80089e6:	b940      	cbnz	r0, 80089fa <__s2b+0x36>
 80089e8:	4602      	mov	r2, r0
 80089ea:	21d3      	movs	r1, #211	@ 0xd3
 80089ec:	4b18      	ldr	r3, [pc, #96]	@ (8008a50 <__s2b+0x8c>)
 80089ee:	4819      	ldr	r0, [pc, #100]	@ (8008a54 <__s2b+0x90>)
 80089f0:	f001 fcb4 	bl	800a35c <__assert_func>
 80089f4:	0052      	lsls	r2, r2, #1
 80089f6:	3101      	adds	r1, #1
 80089f8:	e7f0      	b.n	80089dc <__s2b+0x18>
 80089fa:	9b08      	ldr	r3, [sp, #32]
 80089fc:	2d09      	cmp	r5, #9
 80089fe:	6143      	str	r3, [r0, #20]
 8008a00:	f04f 0301 	mov.w	r3, #1
 8008a04:	6103      	str	r3, [r0, #16]
 8008a06:	dd16      	ble.n	8008a36 <__s2b+0x72>
 8008a08:	f104 0909 	add.w	r9, r4, #9
 8008a0c:	46c8      	mov	r8, r9
 8008a0e:	442c      	add	r4, r5
 8008a10:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008a14:	4601      	mov	r1, r0
 8008a16:	220a      	movs	r2, #10
 8008a18:	4630      	mov	r0, r6
 8008a1a:	3b30      	subs	r3, #48	@ 0x30
 8008a1c:	f7ff ff8c 	bl	8008938 <__multadd>
 8008a20:	45a0      	cmp	r8, r4
 8008a22:	d1f5      	bne.n	8008a10 <__s2b+0x4c>
 8008a24:	f1a5 0408 	sub.w	r4, r5, #8
 8008a28:	444c      	add	r4, r9
 8008a2a:	1b2d      	subs	r5, r5, r4
 8008a2c:	1963      	adds	r3, r4, r5
 8008a2e:	42bb      	cmp	r3, r7
 8008a30:	db04      	blt.n	8008a3c <__s2b+0x78>
 8008a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a36:	2509      	movs	r5, #9
 8008a38:	340a      	adds	r4, #10
 8008a3a:	e7f6      	b.n	8008a2a <__s2b+0x66>
 8008a3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008a40:	4601      	mov	r1, r0
 8008a42:	220a      	movs	r2, #10
 8008a44:	4630      	mov	r0, r6
 8008a46:	3b30      	subs	r3, #48	@ 0x30
 8008a48:	f7ff ff76 	bl	8008938 <__multadd>
 8008a4c:	e7ee      	b.n	8008a2c <__s2b+0x68>
 8008a4e:	bf00      	nop
 8008a50:	0800c2f7 	.word	0x0800c2f7
 8008a54:	0800c308 	.word	0x0800c308

08008a58 <__hi0bits>:
 8008a58:	4603      	mov	r3, r0
 8008a5a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008a5e:	bf3a      	itte	cc
 8008a60:	0403      	lslcc	r3, r0, #16
 8008a62:	2010      	movcc	r0, #16
 8008a64:	2000      	movcs	r0, #0
 8008a66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a6a:	bf3c      	itt	cc
 8008a6c:	021b      	lslcc	r3, r3, #8
 8008a6e:	3008      	addcc	r0, #8
 8008a70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a74:	bf3c      	itt	cc
 8008a76:	011b      	lslcc	r3, r3, #4
 8008a78:	3004      	addcc	r0, #4
 8008a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a7e:	bf3c      	itt	cc
 8008a80:	009b      	lslcc	r3, r3, #2
 8008a82:	3002      	addcc	r0, #2
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	db05      	blt.n	8008a94 <__hi0bits+0x3c>
 8008a88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008a8c:	f100 0001 	add.w	r0, r0, #1
 8008a90:	bf08      	it	eq
 8008a92:	2020      	moveq	r0, #32
 8008a94:	4770      	bx	lr

08008a96 <__lo0bits>:
 8008a96:	6803      	ldr	r3, [r0, #0]
 8008a98:	4602      	mov	r2, r0
 8008a9a:	f013 0007 	ands.w	r0, r3, #7
 8008a9e:	d00b      	beq.n	8008ab8 <__lo0bits+0x22>
 8008aa0:	07d9      	lsls	r1, r3, #31
 8008aa2:	d421      	bmi.n	8008ae8 <__lo0bits+0x52>
 8008aa4:	0798      	lsls	r0, r3, #30
 8008aa6:	bf49      	itett	mi
 8008aa8:	085b      	lsrmi	r3, r3, #1
 8008aaa:	089b      	lsrpl	r3, r3, #2
 8008aac:	2001      	movmi	r0, #1
 8008aae:	6013      	strmi	r3, [r2, #0]
 8008ab0:	bf5c      	itt	pl
 8008ab2:	2002      	movpl	r0, #2
 8008ab4:	6013      	strpl	r3, [r2, #0]
 8008ab6:	4770      	bx	lr
 8008ab8:	b299      	uxth	r1, r3
 8008aba:	b909      	cbnz	r1, 8008ac0 <__lo0bits+0x2a>
 8008abc:	2010      	movs	r0, #16
 8008abe:	0c1b      	lsrs	r3, r3, #16
 8008ac0:	b2d9      	uxtb	r1, r3
 8008ac2:	b909      	cbnz	r1, 8008ac8 <__lo0bits+0x32>
 8008ac4:	3008      	adds	r0, #8
 8008ac6:	0a1b      	lsrs	r3, r3, #8
 8008ac8:	0719      	lsls	r1, r3, #28
 8008aca:	bf04      	itt	eq
 8008acc:	091b      	lsreq	r3, r3, #4
 8008ace:	3004      	addeq	r0, #4
 8008ad0:	0799      	lsls	r1, r3, #30
 8008ad2:	bf04      	itt	eq
 8008ad4:	089b      	lsreq	r3, r3, #2
 8008ad6:	3002      	addeq	r0, #2
 8008ad8:	07d9      	lsls	r1, r3, #31
 8008ada:	d403      	bmi.n	8008ae4 <__lo0bits+0x4e>
 8008adc:	085b      	lsrs	r3, r3, #1
 8008ade:	f100 0001 	add.w	r0, r0, #1
 8008ae2:	d003      	beq.n	8008aec <__lo0bits+0x56>
 8008ae4:	6013      	str	r3, [r2, #0]
 8008ae6:	4770      	bx	lr
 8008ae8:	2000      	movs	r0, #0
 8008aea:	4770      	bx	lr
 8008aec:	2020      	movs	r0, #32
 8008aee:	4770      	bx	lr

08008af0 <__i2b>:
 8008af0:	b510      	push	{r4, lr}
 8008af2:	460c      	mov	r4, r1
 8008af4:	2101      	movs	r1, #1
 8008af6:	f7ff febd 	bl	8008874 <_Balloc>
 8008afa:	4602      	mov	r2, r0
 8008afc:	b928      	cbnz	r0, 8008b0a <__i2b+0x1a>
 8008afe:	f240 1145 	movw	r1, #325	@ 0x145
 8008b02:	4b04      	ldr	r3, [pc, #16]	@ (8008b14 <__i2b+0x24>)
 8008b04:	4804      	ldr	r0, [pc, #16]	@ (8008b18 <__i2b+0x28>)
 8008b06:	f001 fc29 	bl	800a35c <__assert_func>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	6144      	str	r4, [r0, #20]
 8008b0e:	6103      	str	r3, [r0, #16]
 8008b10:	bd10      	pop	{r4, pc}
 8008b12:	bf00      	nop
 8008b14:	0800c2f7 	.word	0x0800c2f7
 8008b18:	0800c308 	.word	0x0800c308

08008b1c <__multiply>:
 8008b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b20:	4614      	mov	r4, r2
 8008b22:	690a      	ldr	r2, [r1, #16]
 8008b24:	6923      	ldr	r3, [r4, #16]
 8008b26:	460f      	mov	r7, r1
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	bfa2      	ittt	ge
 8008b2c:	4623      	movge	r3, r4
 8008b2e:	460c      	movge	r4, r1
 8008b30:	461f      	movge	r7, r3
 8008b32:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008b36:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008b3a:	68a3      	ldr	r3, [r4, #8]
 8008b3c:	6861      	ldr	r1, [r4, #4]
 8008b3e:	eb0a 0609 	add.w	r6, sl, r9
 8008b42:	42b3      	cmp	r3, r6
 8008b44:	b085      	sub	sp, #20
 8008b46:	bfb8      	it	lt
 8008b48:	3101      	addlt	r1, #1
 8008b4a:	f7ff fe93 	bl	8008874 <_Balloc>
 8008b4e:	b930      	cbnz	r0, 8008b5e <__multiply+0x42>
 8008b50:	4602      	mov	r2, r0
 8008b52:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008b56:	4b43      	ldr	r3, [pc, #268]	@ (8008c64 <__multiply+0x148>)
 8008b58:	4843      	ldr	r0, [pc, #268]	@ (8008c68 <__multiply+0x14c>)
 8008b5a:	f001 fbff 	bl	800a35c <__assert_func>
 8008b5e:	f100 0514 	add.w	r5, r0, #20
 8008b62:	462b      	mov	r3, r5
 8008b64:	2200      	movs	r2, #0
 8008b66:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b6a:	4543      	cmp	r3, r8
 8008b6c:	d321      	bcc.n	8008bb2 <__multiply+0x96>
 8008b6e:	f107 0114 	add.w	r1, r7, #20
 8008b72:	f104 0214 	add.w	r2, r4, #20
 8008b76:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008b7a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008b7e:	9302      	str	r3, [sp, #8]
 8008b80:	1b13      	subs	r3, r2, r4
 8008b82:	3b15      	subs	r3, #21
 8008b84:	f023 0303 	bic.w	r3, r3, #3
 8008b88:	3304      	adds	r3, #4
 8008b8a:	f104 0715 	add.w	r7, r4, #21
 8008b8e:	42ba      	cmp	r2, r7
 8008b90:	bf38      	it	cc
 8008b92:	2304      	movcc	r3, #4
 8008b94:	9301      	str	r3, [sp, #4]
 8008b96:	9b02      	ldr	r3, [sp, #8]
 8008b98:	9103      	str	r1, [sp, #12]
 8008b9a:	428b      	cmp	r3, r1
 8008b9c:	d80c      	bhi.n	8008bb8 <__multiply+0x9c>
 8008b9e:	2e00      	cmp	r6, #0
 8008ba0:	dd03      	ble.n	8008baa <__multiply+0x8e>
 8008ba2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d05a      	beq.n	8008c60 <__multiply+0x144>
 8008baa:	6106      	str	r6, [r0, #16]
 8008bac:	b005      	add	sp, #20
 8008bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb2:	f843 2b04 	str.w	r2, [r3], #4
 8008bb6:	e7d8      	b.n	8008b6a <__multiply+0x4e>
 8008bb8:	f8b1 a000 	ldrh.w	sl, [r1]
 8008bbc:	f1ba 0f00 	cmp.w	sl, #0
 8008bc0:	d023      	beq.n	8008c0a <__multiply+0xee>
 8008bc2:	46a9      	mov	r9, r5
 8008bc4:	f04f 0c00 	mov.w	ip, #0
 8008bc8:	f104 0e14 	add.w	lr, r4, #20
 8008bcc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008bd0:	f8d9 3000 	ldr.w	r3, [r9]
 8008bd4:	fa1f fb87 	uxth.w	fp, r7
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	fb0a 330b 	mla	r3, sl, fp, r3
 8008bde:	4463      	add	r3, ip
 8008be0:	f8d9 c000 	ldr.w	ip, [r9]
 8008be4:	0c3f      	lsrs	r7, r7, #16
 8008be6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008bea:	fb0a c707 	mla	r7, sl, r7, ip
 8008bee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008bf8:	4572      	cmp	r2, lr
 8008bfa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008bfe:	f849 3b04 	str.w	r3, [r9], #4
 8008c02:	d8e3      	bhi.n	8008bcc <__multiply+0xb0>
 8008c04:	9b01      	ldr	r3, [sp, #4]
 8008c06:	f845 c003 	str.w	ip, [r5, r3]
 8008c0a:	9b03      	ldr	r3, [sp, #12]
 8008c0c:	3104      	adds	r1, #4
 8008c0e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008c12:	f1b9 0f00 	cmp.w	r9, #0
 8008c16:	d021      	beq.n	8008c5c <__multiply+0x140>
 8008c18:	46ae      	mov	lr, r5
 8008c1a:	f04f 0a00 	mov.w	sl, #0
 8008c1e:	682b      	ldr	r3, [r5, #0]
 8008c20:	f104 0c14 	add.w	ip, r4, #20
 8008c24:	f8bc b000 	ldrh.w	fp, [ip]
 8008c28:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	fb09 770b 	mla	r7, r9, fp, r7
 8008c32:	4457      	add	r7, sl
 8008c34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008c38:	f84e 3b04 	str.w	r3, [lr], #4
 8008c3c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c44:	f8be 3000 	ldrh.w	r3, [lr]
 8008c48:	4562      	cmp	r2, ip
 8008c4a:	fb09 330a 	mla	r3, r9, sl, r3
 8008c4e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008c52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c56:	d8e5      	bhi.n	8008c24 <__multiply+0x108>
 8008c58:	9f01      	ldr	r7, [sp, #4]
 8008c5a:	51eb      	str	r3, [r5, r7]
 8008c5c:	3504      	adds	r5, #4
 8008c5e:	e79a      	b.n	8008b96 <__multiply+0x7a>
 8008c60:	3e01      	subs	r6, #1
 8008c62:	e79c      	b.n	8008b9e <__multiply+0x82>
 8008c64:	0800c2f7 	.word	0x0800c2f7
 8008c68:	0800c308 	.word	0x0800c308

08008c6c <__pow5mult>:
 8008c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c70:	4615      	mov	r5, r2
 8008c72:	f012 0203 	ands.w	r2, r2, #3
 8008c76:	4607      	mov	r7, r0
 8008c78:	460e      	mov	r6, r1
 8008c7a:	d007      	beq.n	8008c8c <__pow5mult+0x20>
 8008c7c:	4c25      	ldr	r4, [pc, #148]	@ (8008d14 <__pow5mult+0xa8>)
 8008c7e:	3a01      	subs	r2, #1
 8008c80:	2300      	movs	r3, #0
 8008c82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c86:	f7ff fe57 	bl	8008938 <__multadd>
 8008c8a:	4606      	mov	r6, r0
 8008c8c:	10ad      	asrs	r5, r5, #2
 8008c8e:	d03d      	beq.n	8008d0c <__pow5mult+0xa0>
 8008c90:	69fc      	ldr	r4, [r7, #28]
 8008c92:	b97c      	cbnz	r4, 8008cb4 <__pow5mult+0x48>
 8008c94:	2010      	movs	r0, #16
 8008c96:	f7ff fd37 	bl	8008708 <malloc>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	61f8      	str	r0, [r7, #28]
 8008c9e:	b928      	cbnz	r0, 8008cac <__pow5mult+0x40>
 8008ca0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8008d18 <__pow5mult+0xac>)
 8008ca6:	481d      	ldr	r0, [pc, #116]	@ (8008d1c <__pow5mult+0xb0>)
 8008ca8:	f001 fb58 	bl	800a35c <__assert_func>
 8008cac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cb0:	6004      	str	r4, [r0, #0]
 8008cb2:	60c4      	str	r4, [r0, #12]
 8008cb4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008cb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cbc:	b94c      	cbnz	r4, 8008cd2 <__pow5mult+0x66>
 8008cbe:	f240 2171 	movw	r1, #625	@ 0x271
 8008cc2:	4638      	mov	r0, r7
 8008cc4:	f7ff ff14 	bl	8008af0 <__i2b>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	4604      	mov	r4, r0
 8008ccc:	f8c8 0008 	str.w	r0, [r8, #8]
 8008cd0:	6003      	str	r3, [r0, #0]
 8008cd2:	f04f 0900 	mov.w	r9, #0
 8008cd6:	07eb      	lsls	r3, r5, #31
 8008cd8:	d50a      	bpl.n	8008cf0 <__pow5mult+0x84>
 8008cda:	4631      	mov	r1, r6
 8008cdc:	4622      	mov	r2, r4
 8008cde:	4638      	mov	r0, r7
 8008ce0:	f7ff ff1c 	bl	8008b1c <__multiply>
 8008ce4:	4680      	mov	r8, r0
 8008ce6:	4631      	mov	r1, r6
 8008ce8:	4638      	mov	r0, r7
 8008cea:	f7ff fe03 	bl	80088f4 <_Bfree>
 8008cee:	4646      	mov	r6, r8
 8008cf0:	106d      	asrs	r5, r5, #1
 8008cf2:	d00b      	beq.n	8008d0c <__pow5mult+0xa0>
 8008cf4:	6820      	ldr	r0, [r4, #0]
 8008cf6:	b938      	cbnz	r0, 8008d08 <__pow5mult+0x9c>
 8008cf8:	4622      	mov	r2, r4
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	4638      	mov	r0, r7
 8008cfe:	f7ff ff0d 	bl	8008b1c <__multiply>
 8008d02:	6020      	str	r0, [r4, #0]
 8008d04:	f8c0 9000 	str.w	r9, [r0]
 8008d08:	4604      	mov	r4, r0
 8008d0a:	e7e4      	b.n	8008cd6 <__pow5mult+0x6a>
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d12:	bf00      	nop
 8008d14:	0800c364 	.word	0x0800c364
 8008d18:	0800c288 	.word	0x0800c288
 8008d1c:	0800c308 	.word	0x0800c308

08008d20 <__lshift>:
 8008d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d24:	460c      	mov	r4, r1
 8008d26:	4607      	mov	r7, r0
 8008d28:	4691      	mov	r9, r2
 8008d2a:	6923      	ldr	r3, [r4, #16]
 8008d2c:	6849      	ldr	r1, [r1, #4]
 8008d2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d32:	68a3      	ldr	r3, [r4, #8]
 8008d34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d38:	f108 0601 	add.w	r6, r8, #1
 8008d3c:	42b3      	cmp	r3, r6
 8008d3e:	db0b      	blt.n	8008d58 <__lshift+0x38>
 8008d40:	4638      	mov	r0, r7
 8008d42:	f7ff fd97 	bl	8008874 <_Balloc>
 8008d46:	4605      	mov	r5, r0
 8008d48:	b948      	cbnz	r0, 8008d5e <__lshift+0x3e>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008d50:	4b27      	ldr	r3, [pc, #156]	@ (8008df0 <__lshift+0xd0>)
 8008d52:	4828      	ldr	r0, [pc, #160]	@ (8008df4 <__lshift+0xd4>)
 8008d54:	f001 fb02 	bl	800a35c <__assert_func>
 8008d58:	3101      	adds	r1, #1
 8008d5a:	005b      	lsls	r3, r3, #1
 8008d5c:	e7ee      	b.n	8008d3c <__lshift+0x1c>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	f100 0114 	add.w	r1, r0, #20
 8008d64:	f100 0210 	add.w	r2, r0, #16
 8008d68:	4618      	mov	r0, r3
 8008d6a:	4553      	cmp	r3, sl
 8008d6c:	db33      	blt.n	8008dd6 <__lshift+0xb6>
 8008d6e:	6920      	ldr	r0, [r4, #16]
 8008d70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d74:	f104 0314 	add.w	r3, r4, #20
 8008d78:	f019 091f 	ands.w	r9, r9, #31
 8008d7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d84:	d02b      	beq.n	8008dde <__lshift+0xbe>
 8008d86:	468a      	mov	sl, r1
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f1c9 0e20 	rsb	lr, r9, #32
 8008d8e:	6818      	ldr	r0, [r3, #0]
 8008d90:	fa00 f009 	lsl.w	r0, r0, r9
 8008d94:	4310      	orrs	r0, r2
 8008d96:	f84a 0b04 	str.w	r0, [sl], #4
 8008d9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d9e:	459c      	cmp	ip, r3
 8008da0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008da4:	d8f3      	bhi.n	8008d8e <__lshift+0x6e>
 8008da6:	ebac 0304 	sub.w	r3, ip, r4
 8008daa:	3b15      	subs	r3, #21
 8008dac:	f023 0303 	bic.w	r3, r3, #3
 8008db0:	3304      	adds	r3, #4
 8008db2:	f104 0015 	add.w	r0, r4, #21
 8008db6:	4584      	cmp	ip, r0
 8008db8:	bf38      	it	cc
 8008dba:	2304      	movcc	r3, #4
 8008dbc:	50ca      	str	r2, [r1, r3]
 8008dbe:	b10a      	cbz	r2, 8008dc4 <__lshift+0xa4>
 8008dc0:	f108 0602 	add.w	r6, r8, #2
 8008dc4:	3e01      	subs	r6, #1
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	4621      	mov	r1, r4
 8008dca:	612e      	str	r6, [r5, #16]
 8008dcc:	f7ff fd92 	bl	80088f4 <_Bfree>
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dd6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008dda:	3301      	adds	r3, #1
 8008ddc:	e7c5      	b.n	8008d6a <__lshift+0x4a>
 8008dde:	3904      	subs	r1, #4
 8008de0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008de4:	459c      	cmp	ip, r3
 8008de6:	f841 2f04 	str.w	r2, [r1, #4]!
 8008dea:	d8f9      	bhi.n	8008de0 <__lshift+0xc0>
 8008dec:	e7ea      	b.n	8008dc4 <__lshift+0xa4>
 8008dee:	bf00      	nop
 8008df0:	0800c2f7 	.word	0x0800c2f7
 8008df4:	0800c308 	.word	0x0800c308

08008df8 <__mcmp>:
 8008df8:	4603      	mov	r3, r0
 8008dfa:	690a      	ldr	r2, [r1, #16]
 8008dfc:	6900      	ldr	r0, [r0, #16]
 8008dfe:	b530      	push	{r4, r5, lr}
 8008e00:	1a80      	subs	r0, r0, r2
 8008e02:	d10e      	bne.n	8008e22 <__mcmp+0x2a>
 8008e04:	3314      	adds	r3, #20
 8008e06:	3114      	adds	r1, #20
 8008e08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008e0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008e10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008e18:	4295      	cmp	r5, r2
 8008e1a:	d003      	beq.n	8008e24 <__mcmp+0x2c>
 8008e1c:	d205      	bcs.n	8008e2a <__mcmp+0x32>
 8008e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e22:	bd30      	pop	{r4, r5, pc}
 8008e24:	42a3      	cmp	r3, r4
 8008e26:	d3f3      	bcc.n	8008e10 <__mcmp+0x18>
 8008e28:	e7fb      	b.n	8008e22 <__mcmp+0x2a>
 8008e2a:	2001      	movs	r0, #1
 8008e2c:	e7f9      	b.n	8008e22 <__mcmp+0x2a>
	...

08008e30 <__mdiff>:
 8008e30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e34:	4689      	mov	r9, r1
 8008e36:	4606      	mov	r6, r0
 8008e38:	4611      	mov	r1, r2
 8008e3a:	4648      	mov	r0, r9
 8008e3c:	4614      	mov	r4, r2
 8008e3e:	f7ff ffdb 	bl	8008df8 <__mcmp>
 8008e42:	1e05      	subs	r5, r0, #0
 8008e44:	d112      	bne.n	8008e6c <__mdiff+0x3c>
 8008e46:	4629      	mov	r1, r5
 8008e48:	4630      	mov	r0, r6
 8008e4a:	f7ff fd13 	bl	8008874 <_Balloc>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	b928      	cbnz	r0, 8008e5e <__mdiff+0x2e>
 8008e52:	f240 2137 	movw	r1, #567	@ 0x237
 8008e56:	4b3e      	ldr	r3, [pc, #248]	@ (8008f50 <__mdiff+0x120>)
 8008e58:	483e      	ldr	r0, [pc, #248]	@ (8008f54 <__mdiff+0x124>)
 8008e5a:	f001 fa7f 	bl	800a35c <__assert_func>
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e64:	4610      	mov	r0, r2
 8008e66:	b003      	add	sp, #12
 8008e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6c:	bfbc      	itt	lt
 8008e6e:	464b      	movlt	r3, r9
 8008e70:	46a1      	movlt	r9, r4
 8008e72:	4630      	mov	r0, r6
 8008e74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008e78:	bfba      	itte	lt
 8008e7a:	461c      	movlt	r4, r3
 8008e7c:	2501      	movlt	r5, #1
 8008e7e:	2500      	movge	r5, #0
 8008e80:	f7ff fcf8 	bl	8008874 <_Balloc>
 8008e84:	4602      	mov	r2, r0
 8008e86:	b918      	cbnz	r0, 8008e90 <__mdiff+0x60>
 8008e88:	f240 2145 	movw	r1, #581	@ 0x245
 8008e8c:	4b30      	ldr	r3, [pc, #192]	@ (8008f50 <__mdiff+0x120>)
 8008e8e:	e7e3      	b.n	8008e58 <__mdiff+0x28>
 8008e90:	f100 0b14 	add.w	fp, r0, #20
 8008e94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008e98:	f109 0310 	add.w	r3, r9, #16
 8008e9c:	60c5      	str	r5, [r0, #12]
 8008e9e:	f04f 0c00 	mov.w	ip, #0
 8008ea2:	f109 0514 	add.w	r5, r9, #20
 8008ea6:	46d9      	mov	r9, fp
 8008ea8:	6926      	ldr	r6, [r4, #16]
 8008eaa:	f104 0e14 	add.w	lr, r4, #20
 8008eae:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008eb2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	9b01      	ldr	r3, [sp, #4]
 8008eba:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008ebe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008ec2:	b281      	uxth	r1, r0
 8008ec4:	9301      	str	r3, [sp, #4]
 8008ec6:	fa1f f38a 	uxth.w	r3, sl
 8008eca:	1a5b      	subs	r3, r3, r1
 8008ecc:	0c00      	lsrs	r0, r0, #16
 8008ece:	4463      	add	r3, ip
 8008ed0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008ed4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008ede:	4576      	cmp	r6, lr
 8008ee0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ee4:	f849 3b04 	str.w	r3, [r9], #4
 8008ee8:	d8e6      	bhi.n	8008eb8 <__mdiff+0x88>
 8008eea:	1b33      	subs	r3, r6, r4
 8008eec:	3b15      	subs	r3, #21
 8008eee:	f023 0303 	bic.w	r3, r3, #3
 8008ef2:	3415      	adds	r4, #21
 8008ef4:	3304      	adds	r3, #4
 8008ef6:	42a6      	cmp	r6, r4
 8008ef8:	bf38      	it	cc
 8008efa:	2304      	movcc	r3, #4
 8008efc:	441d      	add	r5, r3
 8008efe:	445b      	add	r3, fp
 8008f00:	461e      	mov	r6, r3
 8008f02:	462c      	mov	r4, r5
 8008f04:	4544      	cmp	r4, r8
 8008f06:	d30e      	bcc.n	8008f26 <__mdiff+0xf6>
 8008f08:	f108 0103 	add.w	r1, r8, #3
 8008f0c:	1b49      	subs	r1, r1, r5
 8008f0e:	f021 0103 	bic.w	r1, r1, #3
 8008f12:	3d03      	subs	r5, #3
 8008f14:	45a8      	cmp	r8, r5
 8008f16:	bf38      	it	cc
 8008f18:	2100      	movcc	r1, #0
 8008f1a:	440b      	add	r3, r1
 8008f1c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f20:	b199      	cbz	r1, 8008f4a <__mdiff+0x11a>
 8008f22:	6117      	str	r7, [r2, #16]
 8008f24:	e79e      	b.n	8008e64 <__mdiff+0x34>
 8008f26:	46e6      	mov	lr, ip
 8008f28:	f854 1b04 	ldr.w	r1, [r4], #4
 8008f2c:	fa1f fc81 	uxth.w	ip, r1
 8008f30:	44f4      	add	ip, lr
 8008f32:	0c08      	lsrs	r0, r1, #16
 8008f34:	4471      	add	r1, lr
 8008f36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008f3a:	b289      	uxth	r1, r1
 8008f3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008f40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f44:	f846 1b04 	str.w	r1, [r6], #4
 8008f48:	e7dc      	b.n	8008f04 <__mdiff+0xd4>
 8008f4a:	3f01      	subs	r7, #1
 8008f4c:	e7e6      	b.n	8008f1c <__mdiff+0xec>
 8008f4e:	bf00      	nop
 8008f50:	0800c2f7 	.word	0x0800c2f7
 8008f54:	0800c308 	.word	0x0800c308

08008f58 <__ulp>:
 8008f58:	4b0e      	ldr	r3, [pc, #56]	@ (8008f94 <__ulp+0x3c>)
 8008f5a:	400b      	ands	r3, r1
 8008f5c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	dc08      	bgt.n	8008f76 <__ulp+0x1e>
 8008f64:	425b      	negs	r3, r3
 8008f66:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008f6a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008f6e:	da04      	bge.n	8008f7a <__ulp+0x22>
 8008f70:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008f74:	4113      	asrs	r3, r2
 8008f76:	2200      	movs	r2, #0
 8008f78:	e008      	b.n	8008f8c <__ulp+0x34>
 8008f7a:	f1a2 0314 	sub.w	r3, r2, #20
 8008f7e:	2b1e      	cmp	r3, #30
 8008f80:	bfd6      	itet	le
 8008f82:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008f86:	2201      	movgt	r2, #1
 8008f88:	40da      	lsrle	r2, r3
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	4610      	mov	r0, r2
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	7ff00000 	.word	0x7ff00000

08008f98 <__b2d>:
 8008f98:	6902      	ldr	r2, [r0, #16]
 8008f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9c:	f100 0614 	add.w	r6, r0, #20
 8008fa0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008fa4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008fa8:	4f1e      	ldr	r7, [pc, #120]	@ (8009024 <__b2d+0x8c>)
 8008faa:	4620      	mov	r0, r4
 8008fac:	f7ff fd54 	bl	8008a58 <__hi0bits>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	f1c0 0020 	rsb	r0, r0, #32
 8008fb6:	2b0a      	cmp	r3, #10
 8008fb8:	f1a2 0504 	sub.w	r5, r2, #4
 8008fbc:	6008      	str	r0, [r1, #0]
 8008fbe:	dc12      	bgt.n	8008fe6 <__b2d+0x4e>
 8008fc0:	42ae      	cmp	r6, r5
 8008fc2:	bf2c      	ite	cs
 8008fc4:	2200      	movcs	r2, #0
 8008fc6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008fca:	f1c3 0c0b 	rsb	ip, r3, #11
 8008fce:	3315      	adds	r3, #21
 8008fd0:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008fd4:	fa04 f303 	lsl.w	r3, r4, r3
 8008fd8:	fa22 f20c 	lsr.w	r2, r2, ip
 8008fdc:	ea4e 0107 	orr.w	r1, lr, r7
 8008fe0:	431a      	orrs	r2, r3
 8008fe2:	4610      	mov	r0, r2
 8008fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fe6:	42ae      	cmp	r6, r5
 8008fe8:	bf36      	itet	cc
 8008fea:	f1a2 0508 	subcc.w	r5, r2, #8
 8008fee:	2200      	movcs	r2, #0
 8008ff0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008ff4:	3b0b      	subs	r3, #11
 8008ff6:	d012      	beq.n	800901e <__b2d+0x86>
 8008ff8:	f1c3 0720 	rsb	r7, r3, #32
 8008ffc:	fa22 f107 	lsr.w	r1, r2, r7
 8009000:	409c      	lsls	r4, r3
 8009002:	430c      	orrs	r4, r1
 8009004:	42b5      	cmp	r5, r6
 8009006:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800900a:	bf94      	ite	ls
 800900c:	2400      	movls	r4, #0
 800900e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8009012:	409a      	lsls	r2, r3
 8009014:	40fc      	lsrs	r4, r7
 8009016:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800901a:	4322      	orrs	r2, r4
 800901c:	e7e1      	b.n	8008fe2 <__b2d+0x4a>
 800901e:	ea44 0107 	orr.w	r1, r4, r7
 8009022:	e7de      	b.n	8008fe2 <__b2d+0x4a>
 8009024:	3ff00000 	.word	0x3ff00000

08009028 <__d2b>:
 8009028:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800902c:	2101      	movs	r1, #1
 800902e:	4690      	mov	r8, r2
 8009030:	4699      	mov	r9, r3
 8009032:	9e08      	ldr	r6, [sp, #32]
 8009034:	f7ff fc1e 	bl	8008874 <_Balloc>
 8009038:	4604      	mov	r4, r0
 800903a:	b930      	cbnz	r0, 800904a <__d2b+0x22>
 800903c:	4602      	mov	r2, r0
 800903e:	f240 310f 	movw	r1, #783	@ 0x30f
 8009042:	4b23      	ldr	r3, [pc, #140]	@ (80090d0 <__d2b+0xa8>)
 8009044:	4823      	ldr	r0, [pc, #140]	@ (80090d4 <__d2b+0xac>)
 8009046:	f001 f989 	bl	800a35c <__assert_func>
 800904a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800904e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009052:	b10d      	cbz	r5, 8009058 <__d2b+0x30>
 8009054:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009058:	9301      	str	r3, [sp, #4]
 800905a:	f1b8 0300 	subs.w	r3, r8, #0
 800905e:	d024      	beq.n	80090aa <__d2b+0x82>
 8009060:	4668      	mov	r0, sp
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	f7ff fd17 	bl	8008a96 <__lo0bits>
 8009068:	e9dd 1200 	ldrd	r1, r2, [sp]
 800906c:	b1d8      	cbz	r0, 80090a6 <__d2b+0x7e>
 800906e:	f1c0 0320 	rsb	r3, r0, #32
 8009072:	fa02 f303 	lsl.w	r3, r2, r3
 8009076:	430b      	orrs	r3, r1
 8009078:	40c2      	lsrs	r2, r0
 800907a:	6163      	str	r3, [r4, #20]
 800907c:	9201      	str	r2, [sp, #4]
 800907e:	9b01      	ldr	r3, [sp, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	bf0c      	ite	eq
 8009084:	2201      	moveq	r2, #1
 8009086:	2202      	movne	r2, #2
 8009088:	61a3      	str	r3, [r4, #24]
 800908a:	6122      	str	r2, [r4, #16]
 800908c:	b1ad      	cbz	r5, 80090ba <__d2b+0x92>
 800908e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009092:	4405      	add	r5, r0
 8009094:	6035      	str	r5, [r6, #0]
 8009096:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800909a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800909c:	6018      	str	r0, [r3, #0]
 800909e:	4620      	mov	r0, r4
 80090a0:	b002      	add	sp, #8
 80090a2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80090a6:	6161      	str	r1, [r4, #20]
 80090a8:	e7e9      	b.n	800907e <__d2b+0x56>
 80090aa:	a801      	add	r0, sp, #4
 80090ac:	f7ff fcf3 	bl	8008a96 <__lo0bits>
 80090b0:	9b01      	ldr	r3, [sp, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	6163      	str	r3, [r4, #20]
 80090b6:	3020      	adds	r0, #32
 80090b8:	e7e7      	b.n	800908a <__d2b+0x62>
 80090ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80090be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80090c2:	6030      	str	r0, [r6, #0]
 80090c4:	6918      	ldr	r0, [r3, #16]
 80090c6:	f7ff fcc7 	bl	8008a58 <__hi0bits>
 80090ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80090ce:	e7e4      	b.n	800909a <__d2b+0x72>
 80090d0:	0800c2f7 	.word	0x0800c2f7
 80090d4:	0800c308 	.word	0x0800c308

080090d8 <__ratio>:
 80090d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090dc:	b085      	sub	sp, #20
 80090de:	e9cd 1000 	strd	r1, r0, [sp]
 80090e2:	a902      	add	r1, sp, #8
 80090e4:	f7ff ff58 	bl	8008f98 <__b2d>
 80090e8:	468b      	mov	fp, r1
 80090ea:	4606      	mov	r6, r0
 80090ec:	460f      	mov	r7, r1
 80090ee:	9800      	ldr	r0, [sp, #0]
 80090f0:	a903      	add	r1, sp, #12
 80090f2:	f7ff ff51 	bl	8008f98 <__b2d>
 80090f6:	460d      	mov	r5, r1
 80090f8:	9b01      	ldr	r3, [sp, #4]
 80090fa:	4689      	mov	r9, r1
 80090fc:	6919      	ldr	r1, [r3, #16]
 80090fe:	9b00      	ldr	r3, [sp, #0]
 8009100:	4604      	mov	r4, r0
 8009102:	691b      	ldr	r3, [r3, #16]
 8009104:	4630      	mov	r0, r6
 8009106:	1ac9      	subs	r1, r1, r3
 8009108:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800910c:	1a9b      	subs	r3, r3, r2
 800910e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009112:	2b00      	cmp	r3, #0
 8009114:	bfcd      	iteet	gt
 8009116:	463a      	movgt	r2, r7
 8009118:	462a      	movle	r2, r5
 800911a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800911e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009122:	bfd8      	it	le
 8009124:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009128:	464b      	mov	r3, r9
 800912a:	4622      	mov	r2, r4
 800912c:	4659      	mov	r1, fp
 800912e:	f7f7 fafd 	bl	800072c <__aeabi_ddiv>
 8009132:	b005      	add	sp, #20
 8009134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009138 <__copybits>:
 8009138:	3901      	subs	r1, #1
 800913a:	b570      	push	{r4, r5, r6, lr}
 800913c:	1149      	asrs	r1, r1, #5
 800913e:	6914      	ldr	r4, [r2, #16]
 8009140:	3101      	adds	r1, #1
 8009142:	f102 0314 	add.w	r3, r2, #20
 8009146:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800914a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800914e:	1f05      	subs	r5, r0, #4
 8009150:	42a3      	cmp	r3, r4
 8009152:	d30c      	bcc.n	800916e <__copybits+0x36>
 8009154:	1aa3      	subs	r3, r4, r2
 8009156:	3b11      	subs	r3, #17
 8009158:	f023 0303 	bic.w	r3, r3, #3
 800915c:	3211      	adds	r2, #17
 800915e:	42a2      	cmp	r2, r4
 8009160:	bf88      	it	hi
 8009162:	2300      	movhi	r3, #0
 8009164:	4418      	add	r0, r3
 8009166:	2300      	movs	r3, #0
 8009168:	4288      	cmp	r0, r1
 800916a:	d305      	bcc.n	8009178 <__copybits+0x40>
 800916c:	bd70      	pop	{r4, r5, r6, pc}
 800916e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009172:	f845 6f04 	str.w	r6, [r5, #4]!
 8009176:	e7eb      	b.n	8009150 <__copybits+0x18>
 8009178:	f840 3b04 	str.w	r3, [r0], #4
 800917c:	e7f4      	b.n	8009168 <__copybits+0x30>

0800917e <__any_on>:
 800917e:	f100 0214 	add.w	r2, r0, #20
 8009182:	6900      	ldr	r0, [r0, #16]
 8009184:	114b      	asrs	r3, r1, #5
 8009186:	4298      	cmp	r0, r3
 8009188:	b510      	push	{r4, lr}
 800918a:	db11      	blt.n	80091b0 <__any_on+0x32>
 800918c:	dd0a      	ble.n	80091a4 <__any_on+0x26>
 800918e:	f011 011f 	ands.w	r1, r1, #31
 8009192:	d007      	beq.n	80091a4 <__any_on+0x26>
 8009194:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009198:	fa24 f001 	lsr.w	r0, r4, r1
 800919c:	fa00 f101 	lsl.w	r1, r0, r1
 80091a0:	428c      	cmp	r4, r1
 80091a2:	d10b      	bne.n	80091bc <__any_on+0x3e>
 80091a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d803      	bhi.n	80091b4 <__any_on+0x36>
 80091ac:	2000      	movs	r0, #0
 80091ae:	bd10      	pop	{r4, pc}
 80091b0:	4603      	mov	r3, r0
 80091b2:	e7f7      	b.n	80091a4 <__any_on+0x26>
 80091b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80091b8:	2900      	cmp	r1, #0
 80091ba:	d0f5      	beq.n	80091a8 <__any_on+0x2a>
 80091bc:	2001      	movs	r0, #1
 80091be:	e7f6      	b.n	80091ae <__any_on+0x30>

080091c0 <sulp>:
 80091c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091c4:	460f      	mov	r7, r1
 80091c6:	4690      	mov	r8, r2
 80091c8:	f7ff fec6 	bl	8008f58 <__ulp>
 80091cc:	4604      	mov	r4, r0
 80091ce:	460d      	mov	r5, r1
 80091d0:	f1b8 0f00 	cmp.w	r8, #0
 80091d4:	d011      	beq.n	80091fa <sulp+0x3a>
 80091d6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80091da:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80091de:	2b00      	cmp	r3, #0
 80091e0:	dd0b      	ble.n	80091fa <sulp+0x3a>
 80091e2:	2400      	movs	r4, #0
 80091e4:	051b      	lsls	r3, r3, #20
 80091e6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80091ea:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80091ee:	4622      	mov	r2, r4
 80091f0:	462b      	mov	r3, r5
 80091f2:	f7f7 f971 	bl	80004d8 <__aeabi_dmul>
 80091f6:	4604      	mov	r4, r0
 80091f8:	460d      	mov	r5, r1
 80091fa:	4620      	mov	r0, r4
 80091fc:	4629      	mov	r1, r5
 80091fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009202:	0000      	movs	r0, r0
 8009204:	0000      	movs	r0, r0
	...

08009208 <_strtod_l>:
 8009208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800920c:	b09f      	sub	sp, #124	@ 0x7c
 800920e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009210:	2200      	movs	r2, #0
 8009212:	460c      	mov	r4, r1
 8009214:	921a      	str	r2, [sp, #104]	@ 0x68
 8009216:	f04f 0a00 	mov.w	sl, #0
 800921a:	f04f 0b00 	mov.w	fp, #0
 800921e:	460a      	mov	r2, r1
 8009220:	9005      	str	r0, [sp, #20]
 8009222:	9219      	str	r2, [sp, #100]	@ 0x64
 8009224:	7811      	ldrb	r1, [r2, #0]
 8009226:	292b      	cmp	r1, #43	@ 0x2b
 8009228:	d048      	beq.n	80092bc <_strtod_l+0xb4>
 800922a:	d836      	bhi.n	800929a <_strtod_l+0x92>
 800922c:	290d      	cmp	r1, #13
 800922e:	d830      	bhi.n	8009292 <_strtod_l+0x8a>
 8009230:	2908      	cmp	r1, #8
 8009232:	d830      	bhi.n	8009296 <_strtod_l+0x8e>
 8009234:	2900      	cmp	r1, #0
 8009236:	d039      	beq.n	80092ac <_strtod_l+0xa4>
 8009238:	2200      	movs	r2, #0
 800923a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800923c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800923e:	782a      	ldrb	r2, [r5, #0]
 8009240:	2a30      	cmp	r2, #48	@ 0x30
 8009242:	f040 80b1 	bne.w	80093a8 <_strtod_l+0x1a0>
 8009246:	786a      	ldrb	r2, [r5, #1]
 8009248:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800924c:	2a58      	cmp	r2, #88	@ 0x58
 800924e:	d16c      	bne.n	800932a <_strtod_l+0x122>
 8009250:	9302      	str	r3, [sp, #8]
 8009252:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009254:	4a8e      	ldr	r2, [pc, #568]	@ (8009490 <_strtod_l+0x288>)
 8009256:	9301      	str	r3, [sp, #4]
 8009258:	ab1a      	add	r3, sp, #104	@ 0x68
 800925a:	9300      	str	r3, [sp, #0]
 800925c:	9805      	ldr	r0, [sp, #20]
 800925e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009260:	a919      	add	r1, sp, #100	@ 0x64
 8009262:	f001 f915 	bl	800a490 <__gethex>
 8009266:	f010 060f 	ands.w	r6, r0, #15
 800926a:	4604      	mov	r4, r0
 800926c:	d005      	beq.n	800927a <_strtod_l+0x72>
 800926e:	2e06      	cmp	r6, #6
 8009270:	d126      	bne.n	80092c0 <_strtod_l+0xb8>
 8009272:	2300      	movs	r3, #0
 8009274:	3501      	adds	r5, #1
 8009276:	9519      	str	r5, [sp, #100]	@ 0x64
 8009278:	930b      	str	r3, [sp, #44]	@ 0x2c
 800927a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800927c:	2b00      	cmp	r3, #0
 800927e:	f040 8584 	bne.w	8009d8a <_strtod_l+0xb82>
 8009282:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009284:	b1bb      	cbz	r3, 80092b6 <_strtod_l+0xae>
 8009286:	4650      	mov	r0, sl
 8009288:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800928c:	b01f      	add	sp, #124	@ 0x7c
 800928e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009292:	2920      	cmp	r1, #32
 8009294:	d1d0      	bne.n	8009238 <_strtod_l+0x30>
 8009296:	3201      	adds	r2, #1
 8009298:	e7c3      	b.n	8009222 <_strtod_l+0x1a>
 800929a:	292d      	cmp	r1, #45	@ 0x2d
 800929c:	d1cc      	bne.n	8009238 <_strtod_l+0x30>
 800929e:	2101      	movs	r1, #1
 80092a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80092a2:	1c51      	adds	r1, r2, #1
 80092a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80092a6:	7852      	ldrb	r2, [r2, #1]
 80092a8:	2a00      	cmp	r2, #0
 80092aa:	d1c7      	bne.n	800923c <_strtod_l+0x34>
 80092ac:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80092ae:	9419      	str	r4, [sp, #100]	@ 0x64
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f040 8568 	bne.w	8009d86 <_strtod_l+0xb7e>
 80092b6:	4650      	mov	r0, sl
 80092b8:	4659      	mov	r1, fp
 80092ba:	e7e7      	b.n	800928c <_strtod_l+0x84>
 80092bc:	2100      	movs	r1, #0
 80092be:	e7ef      	b.n	80092a0 <_strtod_l+0x98>
 80092c0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80092c2:	b13a      	cbz	r2, 80092d4 <_strtod_l+0xcc>
 80092c4:	2135      	movs	r1, #53	@ 0x35
 80092c6:	a81c      	add	r0, sp, #112	@ 0x70
 80092c8:	f7ff ff36 	bl	8009138 <__copybits>
 80092cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092ce:	9805      	ldr	r0, [sp, #20]
 80092d0:	f7ff fb10 	bl	80088f4 <_Bfree>
 80092d4:	3e01      	subs	r6, #1
 80092d6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80092d8:	2e04      	cmp	r6, #4
 80092da:	d806      	bhi.n	80092ea <_strtod_l+0xe2>
 80092dc:	e8df f006 	tbb	[pc, r6]
 80092e0:	201d0314 	.word	0x201d0314
 80092e4:	14          	.byte	0x14
 80092e5:	00          	.byte	0x00
 80092e6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80092ea:	05e1      	lsls	r1, r4, #23
 80092ec:	bf48      	it	mi
 80092ee:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80092f2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80092f6:	0d1b      	lsrs	r3, r3, #20
 80092f8:	051b      	lsls	r3, r3, #20
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1bd      	bne.n	800927a <_strtod_l+0x72>
 80092fe:	f7fe fb2b 	bl	8007958 <__errno>
 8009302:	2322      	movs	r3, #34	@ 0x22
 8009304:	6003      	str	r3, [r0, #0]
 8009306:	e7b8      	b.n	800927a <_strtod_l+0x72>
 8009308:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800930c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009310:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009314:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009318:	e7e7      	b.n	80092ea <_strtod_l+0xe2>
 800931a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8009494 <_strtod_l+0x28c>
 800931e:	e7e4      	b.n	80092ea <_strtod_l+0xe2>
 8009320:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009324:	f04f 3aff 	mov.w	sl, #4294967295
 8009328:	e7df      	b.n	80092ea <_strtod_l+0xe2>
 800932a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800932c:	1c5a      	adds	r2, r3, #1
 800932e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009330:	785b      	ldrb	r3, [r3, #1]
 8009332:	2b30      	cmp	r3, #48	@ 0x30
 8009334:	d0f9      	beq.n	800932a <_strtod_l+0x122>
 8009336:	2b00      	cmp	r3, #0
 8009338:	d09f      	beq.n	800927a <_strtod_l+0x72>
 800933a:	2301      	movs	r3, #1
 800933c:	9309      	str	r3, [sp, #36]	@ 0x24
 800933e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009340:	220a      	movs	r2, #10
 8009342:	930c      	str	r3, [sp, #48]	@ 0x30
 8009344:	2300      	movs	r3, #0
 8009346:	461f      	mov	r7, r3
 8009348:	9308      	str	r3, [sp, #32]
 800934a:	930a      	str	r3, [sp, #40]	@ 0x28
 800934c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800934e:	7805      	ldrb	r5, [r0, #0]
 8009350:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009354:	b2d9      	uxtb	r1, r3
 8009356:	2909      	cmp	r1, #9
 8009358:	d928      	bls.n	80093ac <_strtod_l+0x1a4>
 800935a:	2201      	movs	r2, #1
 800935c:	494e      	ldr	r1, [pc, #312]	@ (8009498 <_strtod_l+0x290>)
 800935e:	f000 ffc7 	bl	800a2f0 <strncmp>
 8009362:	2800      	cmp	r0, #0
 8009364:	d032      	beq.n	80093cc <_strtod_l+0x1c4>
 8009366:	2000      	movs	r0, #0
 8009368:	462a      	mov	r2, r5
 800936a:	4681      	mov	r9, r0
 800936c:	463d      	mov	r5, r7
 800936e:	4603      	mov	r3, r0
 8009370:	2a65      	cmp	r2, #101	@ 0x65
 8009372:	d001      	beq.n	8009378 <_strtod_l+0x170>
 8009374:	2a45      	cmp	r2, #69	@ 0x45
 8009376:	d114      	bne.n	80093a2 <_strtod_l+0x19a>
 8009378:	b91d      	cbnz	r5, 8009382 <_strtod_l+0x17a>
 800937a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800937c:	4302      	orrs	r2, r0
 800937e:	d095      	beq.n	80092ac <_strtod_l+0xa4>
 8009380:	2500      	movs	r5, #0
 8009382:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009384:	1c62      	adds	r2, r4, #1
 8009386:	9219      	str	r2, [sp, #100]	@ 0x64
 8009388:	7862      	ldrb	r2, [r4, #1]
 800938a:	2a2b      	cmp	r2, #43	@ 0x2b
 800938c:	d077      	beq.n	800947e <_strtod_l+0x276>
 800938e:	2a2d      	cmp	r2, #45	@ 0x2d
 8009390:	d07b      	beq.n	800948a <_strtod_l+0x282>
 8009392:	f04f 0c00 	mov.w	ip, #0
 8009396:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800939a:	2909      	cmp	r1, #9
 800939c:	f240 8082 	bls.w	80094a4 <_strtod_l+0x29c>
 80093a0:	9419      	str	r4, [sp, #100]	@ 0x64
 80093a2:	f04f 0800 	mov.w	r8, #0
 80093a6:	e0a2      	b.n	80094ee <_strtod_l+0x2e6>
 80093a8:	2300      	movs	r3, #0
 80093aa:	e7c7      	b.n	800933c <_strtod_l+0x134>
 80093ac:	2f08      	cmp	r7, #8
 80093ae:	bfd5      	itete	le
 80093b0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80093b2:	9908      	ldrgt	r1, [sp, #32]
 80093b4:	fb02 3301 	mlale	r3, r2, r1, r3
 80093b8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80093bc:	f100 0001 	add.w	r0, r0, #1
 80093c0:	bfd4      	ite	le
 80093c2:	930a      	strle	r3, [sp, #40]	@ 0x28
 80093c4:	9308      	strgt	r3, [sp, #32]
 80093c6:	3701      	adds	r7, #1
 80093c8:	9019      	str	r0, [sp, #100]	@ 0x64
 80093ca:	e7bf      	b.n	800934c <_strtod_l+0x144>
 80093cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093ce:	1c5a      	adds	r2, r3, #1
 80093d0:	9219      	str	r2, [sp, #100]	@ 0x64
 80093d2:	785a      	ldrb	r2, [r3, #1]
 80093d4:	b37f      	cbz	r7, 8009436 <_strtod_l+0x22e>
 80093d6:	4681      	mov	r9, r0
 80093d8:	463d      	mov	r5, r7
 80093da:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80093de:	2b09      	cmp	r3, #9
 80093e0:	d912      	bls.n	8009408 <_strtod_l+0x200>
 80093e2:	2301      	movs	r3, #1
 80093e4:	e7c4      	b.n	8009370 <_strtod_l+0x168>
 80093e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093e8:	3001      	adds	r0, #1
 80093ea:	1c5a      	adds	r2, r3, #1
 80093ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80093ee:	785a      	ldrb	r2, [r3, #1]
 80093f0:	2a30      	cmp	r2, #48	@ 0x30
 80093f2:	d0f8      	beq.n	80093e6 <_strtod_l+0x1de>
 80093f4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80093f8:	2b08      	cmp	r3, #8
 80093fa:	f200 84cb 	bhi.w	8009d94 <_strtod_l+0xb8c>
 80093fe:	4681      	mov	r9, r0
 8009400:	2000      	movs	r0, #0
 8009402:	4605      	mov	r5, r0
 8009404:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009406:	930c      	str	r3, [sp, #48]	@ 0x30
 8009408:	3a30      	subs	r2, #48	@ 0x30
 800940a:	f100 0301 	add.w	r3, r0, #1
 800940e:	d02a      	beq.n	8009466 <_strtod_l+0x25e>
 8009410:	4499      	add	r9, r3
 8009412:	210a      	movs	r1, #10
 8009414:	462b      	mov	r3, r5
 8009416:	eb00 0c05 	add.w	ip, r0, r5
 800941a:	4563      	cmp	r3, ip
 800941c:	d10d      	bne.n	800943a <_strtod_l+0x232>
 800941e:	1c69      	adds	r1, r5, #1
 8009420:	4401      	add	r1, r0
 8009422:	4428      	add	r0, r5
 8009424:	2808      	cmp	r0, #8
 8009426:	dc16      	bgt.n	8009456 <_strtod_l+0x24e>
 8009428:	230a      	movs	r3, #10
 800942a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800942c:	fb03 2300 	mla	r3, r3, r0, r2
 8009430:	930a      	str	r3, [sp, #40]	@ 0x28
 8009432:	2300      	movs	r3, #0
 8009434:	e018      	b.n	8009468 <_strtod_l+0x260>
 8009436:	4638      	mov	r0, r7
 8009438:	e7da      	b.n	80093f0 <_strtod_l+0x1e8>
 800943a:	2b08      	cmp	r3, #8
 800943c:	f103 0301 	add.w	r3, r3, #1
 8009440:	dc03      	bgt.n	800944a <_strtod_l+0x242>
 8009442:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009444:	434e      	muls	r6, r1
 8009446:	960a      	str	r6, [sp, #40]	@ 0x28
 8009448:	e7e7      	b.n	800941a <_strtod_l+0x212>
 800944a:	2b10      	cmp	r3, #16
 800944c:	bfde      	ittt	le
 800944e:	9e08      	ldrle	r6, [sp, #32]
 8009450:	434e      	mulle	r6, r1
 8009452:	9608      	strle	r6, [sp, #32]
 8009454:	e7e1      	b.n	800941a <_strtod_l+0x212>
 8009456:	280f      	cmp	r0, #15
 8009458:	dceb      	bgt.n	8009432 <_strtod_l+0x22a>
 800945a:	230a      	movs	r3, #10
 800945c:	9808      	ldr	r0, [sp, #32]
 800945e:	fb03 2300 	mla	r3, r3, r0, r2
 8009462:	9308      	str	r3, [sp, #32]
 8009464:	e7e5      	b.n	8009432 <_strtod_l+0x22a>
 8009466:	4629      	mov	r1, r5
 8009468:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800946a:	460d      	mov	r5, r1
 800946c:	1c50      	adds	r0, r2, #1
 800946e:	9019      	str	r0, [sp, #100]	@ 0x64
 8009470:	7852      	ldrb	r2, [r2, #1]
 8009472:	4618      	mov	r0, r3
 8009474:	e7b1      	b.n	80093da <_strtod_l+0x1d2>
 8009476:	f04f 0900 	mov.w	r9, #0
 800947a:	2301      	movs	r3, #1
 800947c:	e77d      	b.n	800937a <_strtod_l+0x172>
 800947e:	f04f 0c00 	mov.w	ip, #0
 8009482:	1ca2      	adds	r2, r4, #2
 8009484:	9219      	str	r2, [sp, #100]	@ 0x64
 8009486:	78a2      	ldrb	r2, [r4, #2]
 8009488:	e785      	b.n	8009396 <_strtod_l+0x18e>
 800948a:	f04f 0c01 	mov.w	ip, #1
 800948e:	e7f8      	b.n	8009482 <_strtod_l+0x27a>
 8009490:	0800c478 	.word	0x0800c478
 8009494:	7ff00000 	.word	0x7ff00000
 8009498:	0800c460 	.word	0x0800c460
 800949c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800949e:	1c51      	adds	r1, r2, #1
 80094a0:	9119      	str	r1, [sp, #100]	@ 0x64
 80094a2:	7852      	ldrb	r2, [r2, #1]
 80094a4:	2a30      	cmp	r2, #48	@ 0x30
 80094a6:	d0f9      	beq.n	800949c <_strtod_l+0x294>
 80094a8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80094ac:	2908      	cmp	r1, #8
 80094ae:	f63f af78 	bhi.w	80093a2 <_strtod_l+0x19a>
 80094b2:	f04f 080a 	mov.w	r8, #10
 80094b6:	3a30      	subs	r2, #48	@ 0x30
 80094b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80094ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80094bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80094be:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80094c0:	1c56      	adds	r6, r2, #1
 80094c2:	9619      	str	r6, [sp, #100]	@ 0x64
 80094c4:	7852      	ldrb	r2, [r2, #1]
 80094c6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80094ca:	f1be 0f09 	cmp.w	lr, #9
 80094ce:	d939      	bls.n	8009544 <_strtod_l+0x33c>
 80094d0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80094d2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80094d6:	1a76      	subs	r6, r6, r1
 80094d8:	2e08      	cmp	r6, #8
 80094da:	dc03      	bgt.n	80094e4 <_strtod_l+0x2dc>
 80094dc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80094de:	4588      	cmp	r8, r1
 80094e0:	bfa8      	it	ge
 80094e2:	4688      	movge	r8, r1
 80094e4:	f1bc 0f00 	cmp.w	ip, #0
 80094e8:	d001      	beq.n	80094ee <_strtod_l+0x2e6>
 80094ea:	f1c8 0800 	rsb	r8, r8, #0
 80094ee:	2d00      	cmp	r5, #0
 80094f0:	d14e      	bne.n	8009590 <_strtod_l+0x388>
 80094f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80094f4:	4308      	orrs	r0, r1
 80094f6:	f47f aec0 	bne.w	800927a <_strtod_l+0x72>
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f47f aed6 	bne.w	80092ac <_strtod_l+0xa4>
 8009500:	2a69      	cmp	r2, #105	@ 0x69
 8009502:	d028      	beq.n	8009556 <_strtod_l+0x34e>
 8009504:	dc25      	bgt.n	8009552 <_strtod_l+0x34a>
 8009506:	2a49      	cmp	r2, #73	@ 0x49
 8009508:	d025      	beq.n	8009556 <_strtod_l+0x34e>
 800950a:	2a4e      	cmp	r2, #78	@ 0x4e
 800950c:	f47f aece 	bne.w	80092ac <_strtod_l+0xa4>
 8009510:	499a      	ldr	r1, [pc, #616]	@ (800977c <_strtod_l+0x574>)
 8009512:	a819      	add	r0, sp, #100	@ 0x64
 8009514:	f001 f9de 	bl	800a8d4 <__match>
 8009518:	2800      	cmp	r0, #0
 800951a:	f43f aec7 	beq.w	80092ac <_strtod_l+0xa4>
 800951e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	2b28      	cmp	r3, #40	@ 0x28
 8009524:	d12e      	bne.n	8009584 <_strtod_l+0x37c>
 8009526:	4996      	ldr	r1, [pc, #600]	@ (8009780 <_strtod_l+0x578>)
 8009528:	aa1c      	add	r2, sp, #112	@ 0x70
 800952a:	a819      	add	r0, sp, #100	@ 0x64
 800952c:	f001 f9e6 	bl	800a8fc <__hexnan>
 8009530:	2805      	cmp	r0, #5
 8009532:	d127      	bne.n	8009584 <_strtod_l+0x37c>
 8009534:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009536:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800953a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800953e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009542:	e69a      	b.n	800927a <_strtod_l+0x72>
 8009544:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009546:	fb08 2101 	mla	r1, r8, r1, r2
 800954a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800954e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009550:	e7b5      	b.n	80094be <_strtod_l+0x2b6>
 8009552:	2a6e      	cmp	r2, #110	@ 0x6e
 8009554:	e7da      	b.n	800950c <_strtod_l+0x304>
 8009556:	498b      	ldr	r1, [pc, #556]	@ (8009784 <_strtod_l+0x57c>)
 8009558:	a819      	add	r0, sp, #100	@ 0x64
 800955a:	f001 f9bb 	bl	800a8d4 <__match>
 800955e:	2800      	cmp	r0, #0
 8009560:	f43f aea4 	beq.w	80092ac <_strtod_l+0xa4>
 8009564:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009566:	4988      	ldr	r1, [pc, #544]	@ (8009788 <_strtod_l+0x580>)
 8009568:	3b01      	subs	r3, #1
 800956a:	a819      	add	r0, sp, #100	@ 0x64
 800956c:	9319      	str	r3, [sp, #100]	@ 0x64
 800956e:	f001 f9b1 	bl	800a8d4 <__match>
 8009572:	b910      	cbnz	r0, 800957a <_strtod_l+0x372>
 8009574:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009576:	3301      	adds	r3, #1
 8009578:	9319      	str	r3, [sp, #100]	@ 0x64
 800957a:	f04f 0a00 	mov.w	sl, #0
 800957e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800978c <_strtod_l+0x584>
 8009582:	e67a      	b.n	800927a <_strtod_l+0x72>
 8009584:	4882      	ldr	r0, [pc, #520]	@ (8009790 <_strtod_l+0x588>)
 8009586:	f000 fee3 	bl	800a350 <nan>
 800958a:	4682      	mov	sl, r0
 800958c:	468b      	mov	fp, r1
 800958e:	e674      	b.n	800927a <_strtod_l+0x72>
 8009590:	eba8 0309 	sub.w	r3, r8, r9
 8009594:	2f00      	cmp	r7, #0
 8009596:	bf08      	it	eq
 8009598:	462f      	moveq	r7, r5
 800959a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800959c:	2d10      	cmp	r5, #16
 800959e:	462c      	mov	r4, r5
 80095a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80095a2:	bfa8      	it	ge
 80095a4:	2410      	movge	r4, #16
 80095a6:	f7f6 ff1d 	bl	80003e4 <__aeabi_ui2d>
 80095aa:	2d09      	cmp	r5, #9
 80095ac:	4682      	mov	sl, r0
 80095ae:	468b      	mov	fp, r1
 80095b0:	dc11      	bgt.n	80095d6 <_strtod_l+0x3ce>
 80095b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f43f ae60 	beq.w	800927a <_strtod_l+0x72>
 80095ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095bc:	dd76      	ble.n	80096ac <_strtod_l+0x4a4>
 80095be:	2b16      	cmp	r3, #22
 80095c0:	dc5d      	bgt.n	800967e <_strtod_l+0x476>
 80095c2:	4974      	ldr	r1, [pc, #464]	@ (8009794 <_strtod_l+0x58c>)
 80095c4:	4652      	mov	r2, sl
 80095c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095ca:	465b      	mov	r3, fp
 80095cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095d0:	f7f6 ff82 	bl	80004d8 <__aeabi_dmul>
 80095d4:	e7d9      	b.n	800958a <_strtod_l+0x382>
 80095d6:	4b6f      	ldr	r3, [pc, #444]	@ (8009794 <_strtod_l+0x58c>)
 80095d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80095dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80095e0:	f7f6 ff7a 	bl	80004d8 <__aeabi_dmul>
 80095e4:	4682      	mov	sl, r0
 80095e6:	9808      	ldr	r0, [sp, #32]
 80095e8:	468b      	mov	fp, r1
 80095ea:	f7f6 fefb 	bl	80003e4 <__aeabi_ui2d>
 80095ee:	4602      	mov	r2, r0
 80095f0:	460b      	mov	r3, r1
 80095f2:	4650      	mov	r0, sl
 80095f4:	4659      	mov	r1, fp
 80095f6:	f7f6 fdb9 	bl	800016c <__adddf3>
 80095fa:	2d0f      	cmp	r5, #15
 80095fc:	4682      	mov	sl, r0
 80095fe:	468b      	mov	fp, r1
 8009600:	ddd7      	ble.n	80095b2 <_strtod_l+0x3aa>
 8009602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009604:	1b2c      	subs	r4, r5, r4
 8009606:	441c      	add	r4, r3
 8009608:	2c00      	cmp	r4, #0
 800960a:	f340 8096 	ble.w	800973a <_strtod_l+0x532>
 800960e:	f014 030f 	ands.w	r3, r4, #15
 8009612:	d00a      	beq.n	800962a <_strtod_l+0x422>
 8009614:	495f      	ldr	r1, [pc, #380]	@ (8009794 <_strtod_l+0x58c>)
 8009616:	4652      	mov	r2, sl
 8009618:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800961c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009620:	465b      	mov	r3, fp
 8009622:	f7f6 ff59 	bl	80004d8 <__aeabi_dmul>
 8009626:	4682      	mov	sl, r0
 8009628:	468b      	mov	fp, r1
 800962a:	f034 040f 	bics.w	r4, r4, #15
 800962e:	d073      	beq.n	8009718 <_strtod_l+0x510>
 8009630:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009634:	dd48      	ble.n	80096c8 <_strtod_l+0x4c0>
 8009636:	2400      	movs	r4, #0
 8009638:	46a0      	mov	r8, r4
 800963a:	46a1      	mov	r9, r4
 800963c:	940a      	str	r4, [sp, #40]	@ 0x28
 800963e:	2322      	movs	r3, #34	@ 0x22
 8009640:	f04f 0a00 	mov.w	sl, #0
 8009644:	9a05      	ldr	r2, [sp, #20]
 8009646:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800978c <_strtod_l+0x584>
 800964a:	6013      	str	r3, [r2, #0]
 800964c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800964e:	2b00      	cmp	r3, #0
 8009650:	f43f ae13 	beq.w	800927a <_strtod_l+0x72>
 8009654:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009656:	9805      	ldr	r0, [sp, #20]
 8009658:	f7ff f94c 	bl	80088f4 <_Bfree>
 800965c:	4649      	mov	r1, r9
 800965e:	9805      	ldr	r0, [sp, #20]
 8009660:	f7ff f948 	bl	80088f4 <_Bfree>
 8009664:	4641      	mov	r1, r8
 8009666:	9805      	ldr	r0, [sp, #20]
 8009668:	f7ff f944 	bl	80088f4 <_Bfree>
 800966c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800966e:	9805      	ldr	r0, [sp, #20]
 8009670:	f7ff f940 	bl	80088f4 <_Bfree>
 8009674:	4621      	mov	r1, r4
 8009676:	9805      	ldr	r0, [sp, #20]
 8009678:	f7ff f93c 	bl	80088f4 <_Bfree>
 800967c:	e5fd      	b.n	800927a <_strtod_l+0x72>
 800967e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009680:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009684:	4293      	cmp	r3, r2
 8009686:	dbbc      	blt.n	8009602 <_strtod_l+0x3fa>
 8009688:	4c42      	ldr	r4, [pc, #264]	@ (8009794 <_strtod_l+0x58c>)
 800968a:	f1c5 050f 	rsb	r5, r5, #15
 800968e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009692:	4652      	mov	r2, sl
 8009694:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009698:	465b      	mov	r3, fp
 800969a:	f7f6 ff1d 	bl	80004d8 <__aeabi_dmul>
 800969e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096a0:	1b5d      	subs	r5, r3, r5
 80096a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80096a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80096aa:	e791      	b.n	80095d0 <_strtod_l+0x3c8>
 80096ac:	3316      	adds	r3, #22
 80096ae:	dba8      	blt.n	8009602 <_strtod_l+0x3fa>
 80096b0:	4b38      	ldr	r3, [pc, #224]	@ (8009794 <_strtod_l+0x58c>)
 80096b2:	eba9 0808 	sub.w	r8, r9, r8
 80096b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80096ba:	4650      	mov	r0, sl
 80096bc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80096c0:	4659      	mov	r1, fp
 80096c2:	f7f7 f833 	bl	800072c <__aeabi_ddiv>
 80096c6:	e760      	b.n	800958a <_strtod_l+0x382>
 80096c8:	4b33      	ldr	r3, [pc, #204]	@ (8009798 <_strtod_l+0x590>)
 80096ca:	4650      	mov	r0, sl
 80096cc:	9308      	str	r3, [sp, #32]
 80096ce:	2300      	movs	r3, #0
 80096d0:	4659      	mov	r1, fp
 80096d2:	461e      	mov	r6, r3
 80096d4:	1124      	asrs	r4, r4, #4
 80096d6:	2c01      	cmp	r4, #1
 80096d8:	dc21      	bgt.n	800971e <_strtod_l+0x516>
 80096da:	b10b      	cbz	r3, 80096e0 <_strtod_l+0x4d8>
 80096dc:	4682      	mov	sl, r0
 80096de:	468b      	mov	fp, r1
 80096e0:	492d      	ldr	r1, [pc, #180]	@ (8009798 <_strtod_l+0x590>)
 80096e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80096e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80096ea:	4652      	mov	r2, sl
 80096ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096f0:	465b      	mov	r3, fp
 80096f2:	f7f6 fef1 	bl	80004d8 <__aeabi_dmul>
 80096f6:	4b25      	ldr	r3, [pc, #148]	@ (800978c <_strtod_l+0x584>)
 80096f8:	460a      	mov	r2, r1
 80096fa:	400b      	ands	r3, r1
 80096fc:	4927      	ldr	r1, [pc, #156]	@ (800979c <_strtod_l+0x594>)
 80096fe:	4682      	mov	sl, r0
 8009700:	428b      	cmp	r3, r1
 8009702:	d898      	bhi.n	8009636 <_strtod_l+0x42e>
 8009704:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009708:	428b      	cmp	r3, r1
 800970a:	bf86      	itte	hi
 800970c:	f04f 3aff 	movhi.w	sl, #4294967295
 8009710:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80097a0 <_strtod_l+0x598>
 8009714:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009718:	2300      	movs	r3, #0
 800971a:	9308      	str	r3, [sp, #32]
 800971c:	e07a      	b.n	8009814 <_strtod_l+0x60c>
 800971e:	07e2      	lsls	r2, r4, #31
 8009720:	d505      	bpl.n	800972e <_strtod_l+0x526>
 8009722:	9b08      	ldr	r3, [sp, #32]
 8009724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009728:	f7f6 fed6 	bl	80004d8 <__aeabi_dmul>
 800972c:	2301      	movs	r3, #1
 800972e:	9a08      	ldr	r2, [sp, #32]
 8009730:	3601      	adds	r6, #1
 8009732:	3208      	adds	r2, #8
 8009734:	1064      	asrs	r4, r4, #1
 8009736:	9208      	str	r2, [sp, #32]
 8009738:	e7cd      	b.n	80096d6 <_strtod_l+0x4ce>
 800973a:	d0ed      	beq.n	8009718 <_strtod_l+0x510>
 800973c:	4264      	negs	r4, r4
 800973e:	f014 020f 	ands.w	r2, r4, #15
 8009742:	d00a      	beq.n	800975a <_strtod_l+0x552>
 8009744:	4b13      	ldr	r3, [pc, #76]	@ (8009794 <_strtod_l+0x58c>)
 8009746:	4650      	mov	r0, sl
 8009748:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800974c:	4659      	mov	r1, fp
 800974e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009752:	f7f6 ffeb 	bl	800072c <__aeabi_ddiv>
 8009756:	4682      	mov	sl, r0
 8009758:	468b      	mov	fp, r1
 800975a:	1124      	asrs	r4, r4, #4
 800975c:	d0dc      	beq.n	8009718 <_strtod_l+0x510>
 800975e:	2c1f      	cmp	r4, #31
 8009760:	dd20      	ble.n	80097a4 <_strtod_l+0x59c>
 8009762:	2400      	movs	r4, #0
 8009764:	46a0      	mov	r8, r4
 8009766:	46a1      	mov	r9, r4
 8009768:	940a      	str	r4, [sp, #40]	@ 0x28
 800976a:	2322      	movs	r3, #34	@ 0x22
 800976c:	9a05      	ldr	r2, [sp, #20]
 800976e:	f04f 0a00 	mov.w	sl, #0
 8009772:	f04f 0b00 	mov.w	fp, #0
 8009776:	6013      	str	r3, [r2, #0]
 8009778:	e768      	b.n	800964c <_strtod_l+0x444>
 800977a:	bf00      	nop
 800977c:	0800c24f 	.word	0x0800c24f
 8009780:	0800c464 	.word	0x0800c464
 8009784:	0800c247 	.word	0x0800c247
 8009788:	0800c27e 	.word	0x0800c27e
 800978c:	7ff00000 	.word	0x7ff00000
 8009790:	0800c60d 	.word	0x0800c60d
 8009794:	0800c398 	.word	0x0800c398
 8009798:	0800c370 	.word	0x0800c370
 800979c:	7ca00000 	.word	0x7ca00000
 80097a0:	7fefffff 	.word	0x7fefffff
 80097a4:	f014 0310 	ands.w	r3, r4, #16
 80097a8:	bf18      	it	ne
 80097aa:	236a      	movne	r3, #106	@ 0x6a
 80097ac:	4650      	mov	r0, sl
 80097ae:	9308      	str	r3, [sp, #32]
 80097b0:	4659      	mov	r1, fp
 80097b2:	2300      	movs	r3, #0
 80097b4:	4ea9      	ldr	r6, [pc, #676]	@ (8009a5c <_strtod_l+0x854>)
 80097b6:	07e2      	lsls	r2, r4, #31
 80097b8:	d504      	bpl.n	80097c4 <_strtod_l+0x5bc>
 80097ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80097be:	f7f6 fe8b 	bl	80004d8 <__aeabi_dmul>
 80097c2:	2301      	movs	r3, #1
 80097c4:	1064      	asrs	r4, r4, #1
 80097c6:	f106 0608 	add.w	r6, r6, #8
 80097ca:	d1f4      	bne.n	80097b6 <_strtod_l+0x5ae>
 80097cc:	b10b      	cbz	r3, 80097d2 <_strtod_l+0x5ca>
 80097ce:	4682      	mov	sl, r0
 80097d0:	468b      	mov	fp, r1
 80097d2:	9b08      	ldr	r3, [sp, #32]
 80097d4:	b1b3      	cbz	r3, 8009804 <_strtod_l+0x5fc>
 80097d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80097da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80097de:	2b00      	cmp	r3, #0
 80097e0:	4659      	mov	r1, fp
 80097e2:	dd0f      	ble.n	8009804 <_strtod_l+0x5fc>
 80097e4:	2b1f      	cmp	r3, #31
 80097e6:	dd57      	ble.n	8009898 <_strtod_l+0x690>
 80097e8:	2b34      	cmp	r3, #52	@ 0x34
 80097ea:	bfd8      	it	le
 80097ec:	f04f 33ff 	movle.w	r3, #4294967295
 80097f0:	f04f 0a00 	mov.w	sl, #0
 80097f4:	bfcf      	iteee	gt
 80097f6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80097fa:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80097fe:	4093      	lslle	r3, r2
 8009800:	ea03 0b01 	andle.w	fp, r3, r1
 8009804:	2200      	movs	r2, #0
 8009806:	2300      	movs	r3, #0
 8009808:	4650      	mov	r0, sl
 800980a:	4659      	mov	r1, fp
 800980c:	f7f7 f8cc 	bl	80009a8 <__aeabi_dcmpeq>
 8009810:	2800      	cmp	r0, #0
 8009812:	d1a6      	bne.n	8009762 <_strtod_l+0x55a>
 8009814:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009816:	463a      	mov	r2, r7
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800981c:	462b      	mov	r3, r5
 800981e:	9805      	ldr	r0, [sp, #20]
 8009820:	f7ff f8d0 	bl	80089c4 <__s2b>
 8009824:	900a      	str	r0, [sp, #40]	@ 0x28
 8009826:	2800      	cmp	r0, #0
 8009828:	f43f af05 	beq.w	8009636 <_strtod_l+0x42e>
 800982c:	2400      	movs	r4, #0
 800982e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009830:	eba9 0308 	sub.w	r3, r9, r8
 8009834:	2a00      	cmp	r2, #0
 8009836:	bfa8      	it	ge
 8009838:	2300      	movge	r3, #0
 800983a:	46a0      	mov	r8, r4
 800983c:	9312      	str	r3, [sp, #72]	@ 0x48
 800983e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009842:	9316      	str	r3, [sp, #88]	@ 0x58
 8009844:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009846:	9805      	ldr	r0, [sp, #20]
 8009848:	6859      	ldr	r1, [r3, #4]
 800984a:	f7ff f813 	bl	8008874 <_Balloc>
 800984e:	4681      	mov	r9, r0
 8009850:	2800      	cmp	r0, #0
 8009852:	f43f aef4 	beq.w	800963e <_strtod_l+0x436>
 8009856:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009858:	300c      	adds	r0, #12
 800985a:	691a      	ldr	r2, [r3, #16]
 800985c:	f103 010c 	add.w	r1, r3, #12
 8009860:	3202      	adds	r2, #2
 8009862:	0092      	lsls	r2, r2, #2
 8009864:	f000 fd66 	bl	800a334 <memcpy>
 8009868:	ab1c      	add	r3, sp, #112	@ 0x70
 800986a:	9301      	str	r3, [sp, #4]
 800986c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	4652      	mov	r2, sl
 8009872:	465b      	mov	r3, fp
 8009874:	9805      	ldr	r0, [sp, #20]
 8009876:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800987a:	f7ff fbd5 	bl	8009028 <__d2b>
 800987e:	901a      	str	r0, [sp, #104]	@ 0x68
 8009880:	2800      	cmp	r0, #0
 8009882:	f43f aedc 	beq.w	800963e <_strtod_l+0x436>
 8009886:	2101      	movs	r1, #1
 8009888:	9805      	ldr	r0, [sp, #20]
 800988a:	f7ff f931 	bl	8008af0 <__i2b>
 800988e:	4680      	mov	r8, r0
 8009890:	b948      	cbnz	r0, 80098a6 <_strtod_l+0x69e>
 8009892:	f04f 0800 	mov.w	r8, #0
 8009896:	e6d2      	b.n	800963e <_strtod_l+0x436>
 8009898:	f04f 32ff 	mov.w	r2, #4294967295
 800989c:	fa02 f303 	lsl.w	r3, r2, r3
 80098a0:	ea03 0a0a 	and.w	sl, r3, sl
 80098a4:	e7ae      	b.n	8009804 <_strtod_l+0x5fc>
 80098a6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80098a8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80098aa:	2d00      	cmp	r5, #0
 80098ac:	bfab      	itete	ge
 80098ae:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80098b0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80098b2:	18ef      	addge	r7, r5, r3
 80098b4:	1b5e      	sublt	r6, r3, r5
 80098b6:	9b08      	ldr	r3, [sp, #32]
 80098b8:	bfa8      	it	ge
 80098ba:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80098bc:	eba5 0503 	sub.w	r5, r5, r3
 80098c0:	4415      	add	r5, r2
 80098c2:	4b67      	ldr	r3, [pc, #412]	@ (8009a60 <_strtod_l+0x858>)
 80098c4:	f105 35ff 	add.w	r5, r5, #4294967295
 80098c8:	bfb8      	it	lt
 80098ca:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80098cc:	429d      	cmp	r5, r3
 80098ce:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80098d2:	da50      	bge.n	8009976 <_strtod_l+0x76e>
 80098d4:	1b5b      	subs	r3, r3, r5
 80098d6:	2b1f      	cmp	r3, #31
 80098d8:	f04f 0101 	mov.w	r1, #1
 80098dc:	eba2 0203 	sub.w	r2, r2, r3
 80098e0:	dc3d      	bgt.n	800995e <_strtod_l+0x756>
 80098e2:	fa01 f303 	lsl.w	r3, r1, r3
 80098e6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80098e8:	2300      	movs	r3, #0
 80098ea:	9310      	str	r3, [sp, #64]	@ 0x40
 80098ec:	18bd      	adds	r5, r7, r2
 80098ee:	9b08      	ldr	r3, [sp, #32]
 80098f0:	42af      	cmp	r7, r5
 80098f2:	4416      	add	r6, r2
 80098f4:	441e      	add	r6, r3
 80098f6:	463b      	mov	r3, r7
 80098f8:	bfa8      	it	ge
 80098fa:	462b      	movge	r3, r5
 80098fc:	42b3      	cmp	r3, r6
 80098fe:	bfa8      	it	ge
 8009900:	4633      	movge	r3, r6
 8009902:	2b00      	cmp	r3, #0
 8009904:	bfc2      	ittt	gt
 8009906:	1aed      	subgt	r5, r5, r3
 8009908:	1af6      	subgt	r6, r6, r3
 800990a:	1aff      	subgt	r7, r7, r3
 800990c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800990e:	2b00      	cmp	r3, #0
 8009910:	dd16      	ble.n	8009940 <_strtod_l+0x738>
 8009912:	4641      	mov	r1, r8
 8009914:	461a      	mov	r2, r3
 8009916:	9805      	ldr	r0, [sp, #20]
 8009918:	f7ff f9a8 	bl	8008c6c <__pow5mult>
 800991c:	4680      	mov	r8, r0
 800991e:	2800      	cmp	r0, #0
 8009920:	d0b7      	beq.n	8009892 <_strtod_l+0x68a>
 8009922:	4601      	mov	r1, r0
 8009924:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009926:	9805      	ldr	r0, [sp, #20]
 8009928:	f7ff f8f8 	bl	8008b1c <__multiply>
 800992c:	900e      	str	r0, [sp, #56]	@ 0x38
 800992e:	2800      	cmp	r0, #0
 8009930:	f43f ae85 	beq.w	800963e <_strtod_l+0x436>
 8009934:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009936:	9805      	ldr	r0, [sp, #20]
 8009938:	f7fe ffdc 	bl	80088f4 <_Bfree>
 800993c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800993e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009940:	2d00      	cmp	r5, #0
 8009942:	dc1d      	bgt.n	8009980 <_strtod_l+0x778>
 8009944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009946:	2b00      	cmp	r3, #0
 8009948:	dd23      	ble.n	8009992 <_strtod_l+0x78a>
 800994a:	4649      	mov	r1, r9
 800994c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800994e:	9805      	ldr	r0, [sp, #20]
 8009950:	f7ff f98c 	bl	8008c6c <__pow5mult>
 8009954:	4681      	mov	r9, r0
 8009956:	b9e0      	cbnz	r0, 8009992 <_strtod_l+0x78a>
 8009958:	f04f 0900 	mov.w	r9, #0
 800995c:	e66f      	b.n	800963e <_strtod_l+0x436>
 800995e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009962:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009966:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800996a:	35e2      	adds	r5, #226	@ 0xe2
 800996c:	fa01 f305 	lsl.w	r3, r1, r5
 8009970:	9310      	str	r3, [sp, #64]	@ 0x40
 8009972:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009974:	e7ba      	b.n	80098ec <_strtod_l+0x6e4>
 8009976:	2300      	movs	r3, #0
 8009978:	9310      	str	r3, [sp, #64]	@ 0x40
 800997a:	2301      	movs	r3, #1
 800997c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800997e:	e7b5      	b.n	80098ec <_strtod_l+0x6e4>
 8009980:	462a      	mov	r2, r5
 8009982:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009984:	9805      	ldr	r0, [sp, #20]
 8009986:	f7ff f9cb 	bl	8008d20 <__lshift>
 800998a:	901a      	str	r0, [sp, #104]	@ 0x68
 800998c:	2800      	cmp	r0, #0
 800998e:	d1d9      	bne.n	8009944 <_strtod_l+0x73c>
 8009990:	e655      	b.n	800963e <_strtod_l+0x436>
 8009992:	2e00      	cmp	r6, #0
 8009994:	dd07      	ble.n	80099a6 <_strtod_l+0x79e>
 8009996:	4649      	mov	r1, r9
 8009998:	4632      	mov	r2, r6
 800999a:	9805      	ldr	r0, [sp, #20]
 800999c:	f7ff f9c0 	bl	8008d20 <__lshift>
 80099a0:	4681      	mov	r9, r0
 80099a2:	2800      	cmp	r0, #0
 80099a4:	d0d8      	beq.n	8009958 <_strtod_l+0x750>
 80099a6:	2f00      	cmp	r7, #0
 80099a8:	dd08      	ble.n	80099bc <_strtod_l+0x7b4>
 80099aa:	4641      	mov	r1, r8
 80099ac:	463a      	mov	r2, r7
 80099ae:	9805      	ldr	r0, [sp, #20]
 80099b0:	f7ff f9b6 	bl	8008d20 <__lshift>
 80099b4:	4680      	mov	r8, r0
 80099b6:	2800      	cmp	r0, #0
 80099b8:	f43f ae41 	beq.w	800963e <_strtod_l+0x436>
 80099bc:	464a      	mov	r2, r9
 80099be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099c0:	9805      	ldr	r0, [sp, #20]
 80099c2:	f7ff fa35 	bl	8008e30 <__mdiff>
 80099c6:	4604      	mov	r4, r0
 80099c8:	2800      	cmp	r0, #0
 80099ca:	f43f ae38 	beq.w	800963e <_strtod_l+0x436>
 80099ce:	68c3      	ldr	r3, [r0, #12]
 80099d0:	4641      	mov	r1, r8
 80099d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80099d4:	2300      	movs	r3, #0
 80099d6:	60c3      	str	r3, [r0, #12]
 80099d8:	f7ff fa0e 	bl	8008df8 <__mcmp>
 80099dc:	2800      	cmp	r0, #0
 80099de:	da45      	bge.n	8009a6c <_strtod_l+0x864>
 80099e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099e2:	ea53 030a 	orrs.w	r3, r3, sl
 80099e6:	d16b      	bne.n	8009ac0 <_strtod_l+0x8b8>
 80099e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d167      	bne.n	8009ac0 <_strtod_l+0x8b8>
 80099f0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80099f4:	0d1b      	lsrs	r3, r3, #20
 80099f6:	051b      	lsls	r3, r3, #20
 80099f8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80099fc:	d960      	bls.n	8009ac0 <_strtod_l+0x8b8>
 80099fe:	6963      	ldr	r3, [r4, #20]
 8009a00:	b913      	cbnz	r3, 8009a08 <_strtod_l+0x800>
 8009a02:	6923      	ldr	r3, [r4, #16]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	dd5b      	ble.n	8009ac0 <_strtod_l+0x8b8>
 8009a08:	4621      	mov	r1, r4
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	9805      	ldr	r0, [sp, #20]
 8009a0e:	f7ff f987 	bl	8008d20 <__lshift>
 8009a12:	4641      	mov	r1, r8
 8009a14:	4604      	mov	r4, r0
 8009a16:	f7ff f9ef 	bl	8008df8 <__mcmp>
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	dd50      	ble.n	8009ac0 <_strtod_l+0x8b8>
 8009a1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a22:	9a08      	ldr	r2, [sp, #32]
 8009a24:	0d1b      	lsrs	r3, r3, #20
 8009a26:	051b      	lsls	r3, r3, #20
 8009a28:	2a00      	cmp	r2, #0
 8009a2a:	d06a      	beq.n	8009b02 <_strtod_l+0x8fa>
 8009a2c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009a30:	d867      	bhi.n	8009b02 <_strtod_l+0x8fa>
 8009a32:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009a36:	f67f ae98 	bls.w	800976a <_strtod_l+0x562>
 8009a3a:	4650      	mov	r0, sl
 8009a3c:	4659      	mov	r1, fp
 8009a3e:	4b09      	ldr	r3, [pc, #36]	@ (8009a64 <_strtod_l+0x85c>)
 8009a40:	2200      	movs	r2, #0
 8009a42:	f7f6 fd49 	bl	80004d8 <__aeabi_dmul>
 8009a46:	4b08      	ldr	r3, [pc, #32]	@ (8009a68 <_strtod_l+0x860>)
 8009a48:	4682      	mov	sl, r0
 8009a4a:	400b      	ands	r3, r1
 8009a4c:	468b      	mov	fp, r1
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f47f ae00 	bne.w	8009654 <_strtod_l+0x44c>
 8009a54:	2322      	movs	r3, #34	@ 0x22
 8009a56:	9a05      	ldr	r2, [sp, #20]
 8009a58:	6013      	str	r3, [r2, #0]
 8009a5a:	e5fb      	b.n	8009654 <_strtod_l+0x44c>
 8009a5c:	0800c490 	.word	0x0800c490
 8009a60:	fffffc02 	.word	0xfffffc02
 8009a64:	39500000 	.word	0x39500000
 8009a68:	7ff00000 	.word	0x7ff00000
 8009a6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009a70:	d165      	bne.n	8009b3e <_strtod_l+0x936>
 8009a72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009a74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a78:	b35a      	cbz	r2, 8009ad2 <_strtod_l+0x8ca>
 8009a7a:	4a99      	ldr	r2, [pc, #612]	@ (8009ce0 <_strtod_l+0xad8>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d12b      	bne.n	8009ad8 <_strtod_l+0x8d0>
 8009a80:	9b08      	ldr	r3, [sp, #32]
 8009a82:	4651      	mov	r1, sl
 8009a84:	b303      	cbz	r3, 8009ac8 <_strtod_l+0x8c0>
 8009a86:	465a      	mov	r2, fp
 8009a88:	4b96      	ldr	r3, [pc, #600]	@ (8009ce4 <_strtod_l+0xadc>)
 8009a8a:	4013      	ands	r3, r2
 8009a8c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009a90:	f04f 32ff 	mov.w	r2, #4294967295
 8009a94:	d81b      	bhi.n	8009ace <_strtod_l+0x8c6>
 8009a96:	0d1b      	lsrs	r3, r3, #20
 8009a98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa0:	4299      	cmp	r1, r3
 8009aa2:	d119      	bne.n	8009ad8 <_strtod_l+0x8d0>
 8009aa4:	4b90      	ldr	r3, [pc, #576]	@ (8009ce8 <_strtod_l+0xae0>)
 8009aa6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d102      	bne.n	8009ab2 <_strtod_l+0x8aa>
 8009aac:	3101      	adds	r1, #1
 8009aae:	f43f adc6 	beq.w	800963e <_strtod_l+0x436>
 8009ab2:	f04f 0a00 	mov.w	sl, #0
 8009ab6:	4b8b      	ldr	r3, [pc, #556]	@ (8009ce4 <_strtod_l+0xadc>)
 8009ab8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009aba:	401a      	ands	r2, r3
 8009abc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009ac0:	9b08      	ldr	r3, [sp, #32]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1b9      	bne.n	8009a3a <_strtod_l+0x832>
 8009ac6:	e5c5      	b.n	8009654 <_strtod_l+0x44c>
 8009ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8009acc:	e7e8      	b.n	8009aa0 <_strtod_l+0x898>
 8009ace:	4613      	mov	r3, r2
 8009ad0:	e7e6      	b.n	8009aa0 <_strtod_l+0x898>
 8009ad2:	ea53 030a 	orrs.w	r3, r3, sl
 8009ad6:	d0a2      	beq.n	8009a1e <_strtod_l+0x816>
 8009ad8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009ada:	b1db      	cbz	r3, 8009b14 <_strtod_l+0x90c>
 8009adc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ade:	4213      	tst	r3, r2
 8009ae0:	d0ee      	beq.n	8009ac0 <_strtod_l+0x8b8>
 8009ae2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ae4:	4650      	mov	r0, sl
 8009ae6:	4659      	mov	r1, fp
 8009ae8:	9a08      	ldr	r2, [sp, #32]
 8009aea:	b1bb      	cbz	r3, 8009b1c <_strtod_l+0x914>
 8009aec:	f7ff fb68 	bl	80091c0 <sulp>
 8009af0:	4602      	mov	r2, r0
 8009af2:	460b      	mov	r3, r1
 8009af4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009af8:	f7f6 fb38 	bl	800016c <__adddf3>
 8009afc:	4682      	mov	sl, r0
 8009afe:	468b      	mov	fp, r1
 8009b00:	e7de      	b.n	8009ac0 <_strtod_l+0x8b8>
 8009b02:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009b06:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009b0a:	f04f 3aff 	mov.w	sl, #4294967295
 8009b0e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009b12:	e7d5      	b.n	8009ac0 <_strtod_l+0x8b8>
 8009b14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b16:	ea13 0f0a 	tst.w	r3, sl
 8009b1a:	e7e1      	b.n	8009ae0 <_strtod_l+0x8d8>
 8009b1c:	f7ff fb50 	bl	80091c0 <sulp>
 8009b20:	4602      	mov	r2, r0
 8009b22:	460b      	mov	r3, r1
 8009b24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b28:	f7f6 fb1e 	bl	8000168 <__aeabi_dsub>
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	2300      	movs	r3, #0
 8009b30:	4682      	mov	sl, r0
 8009b32:	468b      	mov	fp, r1
 8009b34:	f7f6 ff38 	bl	80009a8 <__aeabi_dcmpeq>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d0c1      	beq.n	8009ac0 <_strtod_l+0x8b8>
 8009b3c:	e615      	b.n	800976a <_strtod_l+0x562>
 8009b3e:	4641      	mov	r1, r8
 8009b40:	4620      	mov	r0, r4
 8009b42:	f7ff fac9 	bl	80090d8 <__ratio>
 8009b46:	2200      	movs	r2, #0
 8009b48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009b4c:	4606      	mov	r6, r0
 8009b4e:	460f      	mov	r7, r1
 8009b50:	f7f6 ff3e 	bl	80009d0 <__aeabi_dcmple>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	d06d      	beq.n	8009c34 <_strtod_l+0xa2c>
 8009b58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d178      	bne.n	8009c50 <_strtod_l+0xa48>
 8009b5e:	f1ba 0f00 	cmp.w	sl, #0
 8009b62:	d156      	bne.n	8009c12 <_strtod_l+0xa0a>
 8009b64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d158      	bne.n	8009c20 <_strtod_l+0xa18>
 8009b6e:	2200      	movs	r2, #0
 8009b70:	4630      	mov	r0, r6
 8009b72:	4639      	mov	r1, r7
 8009b74:	4b5d      	ldr	r3, [pc, #372]	@ (8009cec <_strtod_l+0xae4>)
 8009b76:	f7f6 ff21 	bl	80009bc <__aeabi_dcmplt>
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	d157      	bne.n	8009c2e <_strtod_l+0xa26>
 8009b7e:	4630      	mov	r0, r6
 8009b80:	4639      	mov	r1, r7
 8009b82:	2200      	movs	r2, #0
 8009b84:	4b5a      	ldr	r3, [pc, #360]	@ (8009cf0 <_strtod_l+0xae8>)
 8009b86:	f7f6 fca7 	bl	80004d8 <__aeabi_dmul>
 8009b8a:	4606      	mov	r6, r0
 8009b8c:	460f      	mov	r7, r1
 8009b8e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009b92:	9606      	str	r6, [sp, #24]
 8009b94:	9307      	str	r3, [sp, #28]
 8009b96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b9a:	4d52      	ldr	r5, [pc, #328]	@ (8009ce4 <_strtod_l+0xadc>)
 8009b9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009ba0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ba2:	401d      	ands	r5, r3
 8009ba4:	4b53      	ldr	r3, [pc, #332]	@ (8009cf4 <_strtod_l+0xaec>)
 8009ba6:	429d      	cmp	r5, r3
 8009ba8:	f040 80aa 	bne.w	8009d00 <_strtod_l+0xaf8>
 8009bac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bae:	4650      	mov	r0, sl
 8009bb0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009bb4:	4659      	mov	r1, fp
 8009bb6:	f7ff f9cf 	bl	8008f58 <__ulp>
 8009bba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bbe:	f7f6 fc8b 	bl	80004d8 <__aeabi_dmul>
 8009bc2:	4652      	mov	r2, sl
 8009bc4:	465b      	mov	r3, fp
 8009bc6:	f7f6 fad1 	bl	800016c <__adddf3>
 8009bca:	460b      	mov	r3, r1
 8009bcc:	4945      	ldr	r1, [pc, #276]	@ (8009ce4 <_strtod_l+0xadc>)
 8009bce:	4a4a      	ldr	r2, [pc, #296]	@ (8009cf8 <_strtod_l+0xaf0>)
 8009bd0:	4019      	ands	r1, r3
 8009bd2:	4291      	cmp	r1, r2
 8009bd4:	4682      	mov	sl, r0
 8009bd6:	d942      	bls.n	8009c5e <_strtod_l+0xa56>
 8009bd8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009bda:	4b43      	ldr	r3, [pc, #268]	@ (8009ce8 <_strtod_l+0xae0>)
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d103      	bne.n	8009be8 <_strtod_l+0x9e0>
 8009be0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009be2:	3301      	adds	r3, #1
 8009be4:	f43f ad2b 	beq.w	800963e <_strtod_l+0x436>
 8009be8:	f04f 3aff 	mov.w	sl, #4294967295
 8009bec:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009ce8 <_strtod_l+0xae0>
 8009bf0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009bf2:	9805      	ldr	r0, [sp, #20]
 8009bf4:	f7fe fe7e 	bl	80088f4 <_Bfree>
 8009bf8:	4649      	mov	r1, r9
 8009bfa:	9805      	ldr	r0, [sp, #20]
 8009bfc:	f7fe fe7a 	bl	80088f4 <_Bfree>
 8009c00:	4641      	mov	r1, r8
 8009c02:	9805      	ldr	r0, [sp, #20]
 8009c04:	f7fe fe76 	bl	80088f4 <_Bfree>
 8009c08:	4621      	mov	r1, r4
 8009c0a:	9805      	ldr	r0, [sp, #20]
 8009c0c:	f7fe fe72 	bl	80088f4 <_Bfree>
 8009c10:	e618      	b.n	8009844 <_strtod_l+0x63c>
 8009c12:	f1ba 0f01 	cmp.w	sl, #1
 8009c16:	d103      	bne.n	8009c20 <_strtod_l+0xa18>
 8009c18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	f43f ada5 	beq.w	800976a <_strtod_l+0x562>
 8009c20:	2200      	movs	r2, #0
 8009c22:	4b36      	ldr	r3, [pc, #216]	@ (8009cfc <_strtod_l+0xaf4>)
 8009c24:	2600      	movs	r6, #0
 8009c26:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009c2a:	4f30      	ldr	r7, [pc, #192]	@ (8009cec <_strtod_l+0xae4>)
 8009c2c:	e7b3      	b.n	8009b96 <_strtod_l+0x98e>
 8009c2e:	2600      	movs	r6, #0
 8009c30:	4f2f      	ldr	r7, [pc, #188]	@ (8009cf0 <_strtod_l+0xae8>)
 8009c32:	e7ac      	b.n	8009b8e <_strtod_l+0x986>
 8009c34:	4630      	mov	r0, r6
 8009c36:	4639      	mov	r1, r7
 8009c38:	4b2d      	ldr	r3, [pc, #180]	@ (8009cf0 <_strtod_l+0xae8>)
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f7f6 fc4c 	bl	80004d8 <__aeabi_dmul>
 8009c40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c42:	4606      	mov	r6, r0
 8009c44:	460f      	mov	r7, r1
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d0a1      	beq.n	8009b8e <_strtod_l+0x986>
 8009c4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009c4e:	e7a2      	b.n	8009b96 <_strtod_l+0x98e>
 8009c50:	2200      	movs	r2, #0
 8009c52:	4b26      	ldr	r3, [pc, #152]	@ (8009cec <_strtod_l+0xae4>)
 8009c54:	4616      	mov	r6, r2
 8009c56:	461f      	mov	r7, r3
 8009c58:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009c5c:	e79b      	b.n	8009b96 <_strtod_l+0x98e>
 8009c5e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009c62:	9b08      	ldr	r3, [sp, #32]
 8009c64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d1c1      	bne.n	8009bf0 <_strtod_l+0x9e8>
 8009c6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009c70:	0d1b      	lsrs	r3, r3, #20
 8009c72:	051b      	lsls	r3, r3, #20
 8009c74:	429d      	cmp	r5, r3
 8009c76:	d1bb      	bne.n	8009bf0 <_strtod_l+0x9e8>
 8009c78:	4630      	mov	r0, r6
 8009c7a:	4639      	mov	r1, r7
 8009c7c:	f7f7 f8a2 	bl	8000dc4 <__aeabi_d2lz>
 8009c80:	f7f6 fbfc 	bl	800047c <__aeabi_l2d>
 8009c84:	4602      	mov	r2, r0
 8009c86:	460b      	mov	r3, r1
 8009c88:	4630      	mov	r0, r6
 8009c8a:	4639      	mov	r1, r7
 8009c8c:	f7f6 fa6c 	bl	8000168 <__aeabi_dsub>
 8009c90:	460b      	mov	r3, r1
 8009c92:	4602      	mov	r2, r0
 8009c94:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009c98:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009c9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c9e:	ea46 060a 	orr.w	r6, r6, sl
 8009ca2:	431e      	orrs	r6, r3
 8009ca4:	d069      	beq.n	8009d7a <_strtod_l+0xb72>
 8009ca6:	a30a      	add	r3, pc, #40	@ (adr r3, 8009cd0 <_strtod_l+0xac8>)
 8009ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cac:	f7f6 fe86 	bl	80009bc <__aeabi_dcmplt>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	f47f accf 	bne.w	8009654 <_strtod_l+0x44c>
 8009cb6:	a308      	add	r3, pc, #32	@ (adr r3, 8009cd8 <_strtod_l+0xad0>)
 8009cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cc0:	f7f6 fe9a 	bl	80009f8 <__aeabi_dcmpgt>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d093      	beq.n	8009bf0 <_strtod_l+0x9e8>
 8009cc8:	e4c4      	b.n	8009654 <_strtod_l+0x44c>
 8009cca:	bf00      	nop
 8009ccc:	f3af 8000 	nop.w
 8009cd0:	94a03595 	.word	0x94a03595
 8009cd4:	3fdfffff 	.word	0x3fdfffff
 8009cd8:	35afe535 	.word	0x35afe535
 8009cdc:	3fe00000 	.word	0x3fe00000
 8009ce0:	000fffff 	.word	0x000fffff
 8009ce4:	7ff00000 	.word	0x7ff00000
 8009ce8:	7fefffff 	.word	0x7fefffff
 8009cec:	3ff00000 	.word	0x3ff00000
 8009cf0:	3fe00000 	.word	0x3fe00000
 8009cf4:	7fe00000 	.word	0x7fe00000
 8009cf8:	7c9fffff 	.word	0x7c9fffff
 8009cfc:	bff00000 	.word	0xbff00000
 8009d00:	9b08      	ldr	r3, [sp, #32]
 8009d02:	b323      	cbz	r3, 8009d4e <_strtod_l+0xb46>
 8009d04:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009d08:	d821      	bhi.n	8009d4e <_strtod_l+0xb46>
 8009d0a:	a327      	add	r3, pc, #156	@ (adr r3, 8009da8 <_strtod_l+0xba0>)
 8009d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d10:	4630      	mov	r0, r6
 8009d12:	4639      	mov	r1, r7
 8009d14:	f7f6 fe5c 	bl	80009d0 <__aeabi_dcmple>
 8009d18:	b1a0      	cbz	r0, 8009d44 <_strtod_l+0xb3c>
 8009d1a:	4639      	mov	r1, r7
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	f7f6 feb3 	bl	8000a88 <__aeabi_d2uiz>
 8009d22:	2801      	cmp	r0, #1
 8009d24:	bf38      	it	cc
 8009d26:	2001      	movcc	r0, #1
 8009d28:	f7f6 fb5c 	bl	80003e4 <__aeabi_ui2d>
 8009d2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d2e:	4606      	mov	r6, r0
 8009d30:	460f      	mov	r7, r1
 8009d32:	b9fb      	cbnz	r3, 8009d74 <_strtod_l+0xb6c>
 8009d34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009d38:	9014      	str	r0, [sp, #80]	@ 0x50
 8009d3a:	9315      	str	r3, [sp, #84]	@ 0x54
 8009d3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009d40:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009d44:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009d46:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009d4a:	1b5b      	subs	r3, r3, r5
 8009d4c:	9311      	str	r3, [sp, #68]	@ 0x44
 8009d4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d52:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009d56:	f7ff f8ff 	bl	8008f58 <__ulp>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	4650      	mov	r0, sl
 8009d60:	4659      	mov	r1, fp
 8009d62:	f7f6 fbb9 	bl	80004d8 <__aeabi_dmul>
 8009d66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009d6a:	f7f6 f9ff 	bl	800016c <__adddf3>
 8009d6e:	4682      	mov	sl, r0
 8009d70:	468b      	mov	fp, r1
 8009d72:	e776      	b.n	8009c62 <_strtod_l+0xa5a>
 8009d74:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009d78:	e7e0      	b.n	8009d3c <_strtod_l+0xb34>
 8009d7a:	a30d      	add	r3, pc, #52	@ (adr r3, 8009db0 <_strtod_l+0xba8>)
 8009d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d80:	f7f6 fe1c 	bl	80009bc <__aeabi_dcmplt>
 8009d84:	e79e      	b.n	8009cc4 <_strtod_l+0xabc>
 8009d86:	2300      	movs	r3, #0
 8009d88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d8c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009d8e:	6013      	str	r3, [r2, #0]
 8009d90:	f7ff ba77 	b.w	8009282 <_strtod_l+0x7a>
 8009d94:	2a65      	cmp	r2, #101	@ 0x65
 8009d96:	f43f ab6e 	beq.w	8009476 <_strtod_l+0x26e>
 8009d9a:	2a45      	cmp	r2, #69	@ 0x45
 8009d9c:	f43f ab6b 	beq.w	8009476 <_strtod_l+0x26e>
 8009da0:	2301      	movs	r3, #1
 8009da2:	f7ff bba6 	b.w	80094f2 <_strtod_l+0x2ea>
 8009da6:	bf00      	nop
 8009da8:	ffc00000 	.word	0xffc00000
 8009dac:	41dfffff 	.word	0x41dfffff
 8009db0:	94a03595 	.word	0x94a03595
 8009db4:	3fcfffff 	.word	0x3fcfffff

08009db8 <_strtod_r>:
 8009db8:	4b01      	ldr	r3, [pc, #4]	@ (8009dc0 <_strtod_r+0x8>)
 8009dba:	f7ff ba25 	b.w	8009208 <_strtod_l>
 8009dbe:	bf00      	nop
 8009dc0:	2000006c 	.word	0x2000006c

08009dc4 <_strtol_l.constprop.0>:
 8009dc4:	2b24      	cmp	r3, #36	@ 0x24
 8009dc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dca:	4686      	mov	lr, r0
 8009dcc:	4690      	mov	r8, r2
 8009dce:	d801      	bhi.n	8009dd4 <_strtol_l.constprop.0+0x10>
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d106      	bne.n	8009de2 <_strtol_l.constprop.0+0x1e>
 8009dd4:	f7fd fdc0 	bl	8007958 <__errno>
 8009dd8:	2316      	movs	r3, #22
 8009dda:	6003      	str	r3, [r0, #0]
 8009ddc:	2000      	movs	r0, #0
 8009dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009de2:	460d      	mov	r5, r1
 8009de4:	4833      	ldr	r0, [pc, #204]	@ (8009eb4 <_strtol_l.constprop.0+0xf0>)
 8009de6:	462a      	mov	r2, r5
 8009de8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009dec:	5d06      	ldrb	r6, [r0, r4]
 8009dee:	f016 0608 	ands.w	r6, r6, #8
 8009df2:	d1f8      	bne.n	8009de6 <_strtol_l.constprop.0+0x22>
 8009df4:	2c2d      	cmp	r4, #45	@ 0x2d
 8009df6:	d12d      	bne.n	8009e54 <_strtol_l.constprop.0+0x90>
 8009df8:	2601      	movs	r6, #1
 8009dfa:	782c      	ldrb	r4, [r5, #0]
 8009dfc:	1c95      	adds	r5, r2, #2
 8009dfe:	f033 0210 	bics.w	r2, r3, #16
 8009e02:	d109      	bne.n	8009e18 <_strtol_l.constprop.0+0x54>
 8009e04:	2c30      	cmp	r4, #48	@ 0x30
 8009e06:	d12a      	bne.n	8009e5e <_strtol_l.constprop.0+0x9a>
 8009e08:	782a      	ldrb	r2, [r5, #0]
 8009e0a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009e0e:	2a58      	cmp	r2, #88	@ 0x58
 8009e10:	d125      	bne.n	8009e5e <_strtol_l.constprop.0+0x9a>
 8009e12:	2310      	movs	r3, #16
 8009e14:	786c      	ldrb	r4, [r5, #1]
 8009e16:	3502      	adds	r5, #2
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009e1e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009e22:	fbbc f9f3 	udiv	r9, ip, r3
 8009e26:	4610      	mov	r0, r2
 8009e28:	fb03 ca19 	mls	sl, r3, r9, ip
 8009e2c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009e30:	2f09      	cmp	r7, #9
 8009e32:	d81b      	bhi.n	8009e6c <_strtol_l.constprop.0+0xa8>
 8009e34:	463c      	mov	r4, r7
 8009e36:	42a3      	cmp	r3, r4
 8009e38:	dd27      	ble.n	8009e8a <_strtol_l.constprop.0+0xc6>
 8009e3a:	1c57      	adds	r7, r2, #1
 8009e3c:	d007      	beq.n	8009e4e <_strtol_l.constprop.0+0x8a>
 8009e3e:	4581      	cmp	r9, r0
 8009e40:	d320      	bcc.n	8009e84 <_strtol_l.constprop.0+0xc0>
 8009e42:	d101      	bne.n	8009e48 <_strtol_l.constprop.0+0x84>
 8009e44:	45a2      	cmp	sl, r4
 8009e46:	db1d      	blt.n	8009e84 <_strtol_l.constprop.0+0xc0>
 8009e48:	2201      	movs	r2, #1
 8009e4a:	fb00 4003 	mla	r0, r0, r3, r4
 8009e4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e52:	e7eb      	b.n	8009e2c <_strtol_l.constprop.0+0x68>
 8009e54:	2c2b      	cmp	r4, #43	@ 0x2b
 8009e56:	bf04      	itt	eq
 8009e58:	782c      	ldrbeq	r4, [r5, #0]
 8009e5a:	1c95      	addeq	r5, r2, #2
 8009e5c:	e7cf      	b.n	8009dfe <_strtol_l.constprop.0+0x3a>
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d1da      	bne.n	8009e18 <_strtol_l.constprop.0+0x54>
 8009e62:	2c30      	cmp	r4, #48	@ 0x30
 8009e64:	bf0c      	ite	eq
 8009e66:	2308      	moveq	r3, #8
 8009e68:	230a      	movne	r3, #10
 8009e6a:	e7d5      	b.n	8009e18 <_strtol_l.constprop.0+0x54>
 8009e6c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009e70:	2f19      	cmp	r7, #25
 8009e72:	d801      	bhi.n	8009e78 <_strtol_l.constprop.0+0xb4>
 8009e74:	3c37      	subs	r4, #55	@ 0x37
 8009e76:	e7de      	b.n	8009e36 <_strtol_l.constprop.0+0x72>
 8009e78:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009e7c:	2f19      	cmp	r7, #25
 8009e7e:	d804      	bhi.n	8009e8a <_strtol_l.constprop.0+0xc6>
 8009e80:	3c57      	subs	r4, #87	@ 0x57
 8009e82:	e7d8      	b.n	8009e36 <_strtol_l.constprop.0+0x72>
 8009e84:	f04f 32ff 	mov.w	r2, #4294967295
 8009e88:	e7e1      	b.n	8009e4e <_strtol_l.constprop.0+0x8a>
 8009e8a:	1c53      	adds	r3, r2, #1
 8009e8c:	d108      	bne.n	8009ea0 <_strtol_l.constprop.0+0xdc>
 8009e8e:	2322      	movs	r3, #34	@ 0x22
 8009e90:	4660      	mov	r0, ip
 8009e92:	f8ce 3000 	str.w	r3, [lr]
 8009e96:	f1b8 0f00 	cmp.w	r8, #0
 8009e9a:	d0a0      	beq.n	8009dde <_strtol_l.constprop.0+0x1a>
 8009e9c:	1e69      	subs	r1, r5, #1
 8009e9e:	e006      	b.n	8009eae <_strtol_l.constprop.0+0xea>
 8009ea0:	b106      	cbz	r6, 8009ea4 <_strtol_l.constprop.0+0xe0>
 8009ea2:	4240      	negs	r0, r0
 8009ea4:	f1b8 0f00 	cmp.w	r8, #0
 8009ea8:	d099      	beq.n	8009dde <_strtol_l.constprop.0+0x1a>
 8009eaa:	2a00      	cmp	r2, #0
 8009eac:	d1f6      	bne.n	8009e9c <_strtol_l.constprop.0+0xd8>
 8009eae:	f8c8 1000 	str.w	r1, [r8]
 8009eb2:	e794      	b.n	8009dde <_strtol_l.constprop.0+0x1a>
 8009eb4:	0800c4b9 	.word	0x0800c4b9

08009eb8 <_strtol_r>:
 8009eb8:	f7ff bf84 	b.w	8009dc4 <_strtol_l.constprop.0>

08009ebc <__ssputs_r>:
 8009ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec0:	461f      	mov	r7, r3
 8009ec2:	688e      	ldr	r6, [r1, #8]
 8009ec4:	4682      	mov	sl, r0
 8009ec6:	42be      	cmp	r6, r7
 8009ec8:	460c      	mov	r4, r1
 8009eca:	4690      	mov	r8, r2
 8009ecc:	680b      	ldr	r3, [r1, #0]
 8009ece:	d82d      	bhi.n	8009f2c <__ssputs_r+0x70>
 8009ed0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ed4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009ed8:	d026      	beq.n	8009f28 <__ssputs_r+0x6c>
 8009eda:	6965      	ldr	r5, [r4, #20]
 8009edc:	6909      	ldr	r1, [r1, #16]
 8009ede:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ee2:	eba3 0901 	sub.w	r9, r3, r1
 8009ee6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009eea:	1c7b      	adds	r3, r7, #1
 8009eec:	444b      	add	r3, r9
 8009eee:	106d      	asrs	r5, r5, #1
 8009ef0:	429d      	cmp	r5, r3
 8009ef2:	bf38      	it	cc
 8009ef4:	461d      	movcc	r5, r3
 8009ef6:	0553      	lsls	r3, r2, #21
 8009ef8:	d527      	bpl.n	8009f4a <__ssputs_r+0x8e>
 8009efa:	4629      	mov	r1, r5
 8009efc:	f7fe fc2e 	bl	800875c <_malloc_r>
 8009f00:	4606      	mov	r6, r0
 8009f02:	b360      	cbz	r0, 8009f5e <__ssputs_r+0xa2>
 8009f04:	464a      	mov	r2, r9
 8009f06:	6921      	ldr	r1, [r4, #16]
 8009f08:	f000 fa14 	bl	800a334 <memcpy>
 8009f0c:	89a3      	ldrh	r3, [r4, #12]
 8009f0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f16:	81a3      	strh	r3, [r4, #12]
 8009f18:	6126      	str	r6, [r4, #16]
 8009f1a:	444e      	add	r6, r9
 8009f1c:	6026      	str	r6, [r4, #0]
 8009f1e:	463e      	mov	r6, r7
 8009f20:	6165      	str	r5, [r4, #20]
 8009f22:	eba5 0509 	sub.w	r5, r5, r9
 8009f26:	60a5      	str	r5, [r4, #8]
 8009f28:	42be      	cmp	r6, r7
 8009f2a:	d900      	bls.n	8009f2e <__ssputs_r+0x72>
 8009f2c:	463e      	mov	r6, r7
 8009f2e:	4632      	mov	r2, r6
 8009f30:	4641      	mov	r1, r8
 8009f32:	6820      	ldr	r0, [r4, #0]
 8009f34:	f000 f9c2 	bl	800a2bc <memmove>
 8009f38:	2000      	movs	r0, #0
 8009f3a:	68a3      	ldr	r3, [r4, #8]
 8009f3c:	1b9b      	subs	r3, r3, r6
 8009f3e:	60a3      	str	r3, [r4, #8]
 8009f40:	6823      	ldr	r3, [r4, #0]
 8009f42:	4433      	add	r3, r6
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f4a:	462a      	mov	r2, r5
 8009f4c:	f000 fd83 	bl	800aa56 <_realloc_r>
 8009f50:	4606      	mov	r6, r0
 8009f52:	2800      	cmp	r0, #0
 8009f54:	d1e0      	bne.n	8009f18 <__ssputs_r+0x5c>
 8009f56:	4650      	mov	r0, sl
 8009f58:	6921      	ldr	r1, [r4, #16]
 8009f5a:	f7fe fb8d 	bl	8008678 <_free_r>
 8009f5e:	230c      	movs	r3, #12
 8009f60:	f8ca 3000 	str.w	r3, [sl]
 8009f64:	89a3      	ldrh	r3, [r4, #12]
 8009f66:	f04f 30ff 	mov.w	r0, #4294967295
 8009f6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f6e:	81a3      	strh	r3, [r4, #12]
 8009f70:	e7e9      	b.n	8009f46 <__ssputs_r+0x8a>
	...

08009f74 <_svfiprintf_r>:
 8009f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f78:	4698      	mov	r8, r3
 8009f7a:	898b      	ldrh	r3, [r1, #12]
 8009f7c:	4607      	mov	r7, r0
 8009f7e:	061b      	lsls	r3, r3, #24
 8009f80:	460d      	mov	r5, r1
 8009f82:	4614      	mov	r4, r2
 8009f84:	b09d      	sub	sp, #116	@ 0x74
 8009f86:	d510      	bpl.n	8009faa <_svfiprintf_r+0x36>
 8009f88:	690b      	ldr	r3, [r1, #16]
 8009f8a:	b973      	cbnz	r3, 8009faa <_svfiprintf_r+0x36>
 8009f8c:	2140      	movs	r1, #64	@ 0x40
 8009f8e:	f7fe fbe5 	bl	800875c <_malloc_r>
 8009f92:	6028      	str	r0, [r5, #0]
 8009f94:	6128      	str	r0, [r5, #16]
 8009f96:	b930      	cbnz	r0, 8009fa6 <_svfiprintf_r+0x32>
 8009f98:	230c      	movs	r3, #12
 8009f9a:	603b      	str	r3, [r7, #0]
 8009f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa0:	b01d      	add	sp, #116	@ 0x74
 8009fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa6:	2340      	movs	r3, #64	@ 0x40
 8009fa8:	616b      	str	r3, [r5, #20]
 8009faa:	2300      	movs	r3, #0
 8009fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fae:	2320      	movs	r3, #32
 8009fb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009fb4:	2330      	movs	r3, #48	@ 0x30
 8009fb6:	f04f 0901 	mov.w	r9, #1
 8009fba:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fbe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a158 <_svfiprintf_r+0x1e4>
 8009fc2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009fc6:	4623      	mov	r3, r4
 8009fc8:	469a      	mov	sl, r3
 8009fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fce:	b10a      	cbz	r2, 8009fd4 <_svfiprintf_r+0x60>
 8009fd0:	2a25      	cmp	r2, #37	@ 0x25
 8009fd2:	d1f9      	bne.n	8009fc8 <_svfiprintf_r+0x54>
 8009fd4:	ebba 0b04 	subs.w	fp, sl, r4
 8009fd8:	d00b      	beq.n	8009ff2 <_svfiprintf_r+0x7e>
 8009fda:	465b      	mov	r3, fp
 8009fdc:	4622      	mov	r2, r4
 8009fde:	4629      	mov	r1, r5
 8009fe0:	4638      	mov	r0, r7
 8009fe2:	f7ff ff6b 	bl	8009ebc <__ssputs_r>
 8009fe6:	3001      	adds	r0, #1
 8009fe8:	f000 80a7 	beq.w	800a13a <_svfiprintf_r+0x1c6>
 8009fec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fee:	445a      	add	r2, fp
 8009ff0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f000 809f 	beq.w	800a13a <_svfiprintf_r+0x1c6>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	f04f 32ff 	mov.w	r2, #4294967295
 800a002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a006:	f10a 0a01 	add.w	sl, sl, #1
 800a00a:	9304      	str	r3, [sp, #16]
 800a00c:	9307      	str	r3, [sp, #28]
 800a00e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a012:	931a      	str	r3, [sp, #104]	@ 0x68
 800a014:	4654      	mov	r4, sl
 800a016:	2205      	movs	r2, #5
 800a018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a01c:	484e      	ldr	r0, [pc, #312]	@ (800a158 <_svfiprintf_r+0x1e4>)
 800a01e:	f7fd fcc8 	bl	80079b2 <memchr>
 800a022:	9a04      	ldr	r2, [sp, #16]
 800a024:	b9d8      	cbnz	r0, 800a05e <_svfiprintf_r+0xea>
 800a026:	06d0      	lsls	r0, r2, #27
 800a028:	bf44      	itt	mi
 800a02a:	2320      	movmi	r3, #32
 800a02c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a030:	0711      	lsls	r1, r2, #28
 800a032:	bf44      	itt	mi
 800a034:	232b      	movmi	r3, #43	@ 0x2b
 800a036:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a03a:	f89a 3000 	ldrb.w	r3, [sl]
 800a03e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a040:	d015      	beq.n	800a06e <_svfiprintf_r+0xfa>
 800a042:	4654      	mov	r4, sl
 800a044:	2000      	movs	r0, #0
 800a046:	f04f 0c0a 	mov.w	ip, #10
 800a04a:	9a07      	ldr	r2, [sp, #28]
 800a04c:	4621      	mov	r1, r4
 800a04e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a052:	3b30      	subs	r3, #48	@ 0x30
 800a054:	2b09      	cmp	r3, #9
 800a056:	d94b      	bls.n	800a0f0 <_svfiprintf_r+0x17c>
 800a058:	b1b0      	cbz	r0, 800a088 <_svfiprintf_r+0x114>
 800a05a:	9207      	str	r2, [sp, #28]
 800a05c:	e014      	b.n	800a088 <_svfiprintf_r+0x114>
 800a05e:	eba0 0308 	sub.w	r3, r0, r8
 800a062:	fa09 f303 	lsl.w	r3, r9, r3
 800a066:	4313      	orrs	r3, r2
 800a068:	46a2      	mov	sl, r4
 800a06a:	9304      	str	r3, [sp, #16]
 800a06c:	e7d2      	b.n	800a014 <_svfiprintf_r+0xa0>
 800a06e:	9b03      	ldr	r3, [sp, #12]
 800a070:	1d19      	adds	r1, r3, #4
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	9103      	str	r1, [sp, #12]
 800a076:	2b00      	cmp	r3, #0
 800a078:	bfbb      	ittet	lt
 800a07a:	425b      	neglt	r3, r3
 800a07c:	f042 0202 	orrlt.w	r2, r2, #2
 800a080:	9307      	strge	r3, [sp, #28]
 800a082:	9307      	strlt	r3, [sp, #28]
 800a084:	bfb8      	it	lt
 800a086:	9204      	strlt	r2, [sp, #16]
 800a088:	7823      	ldrb	r3, [r4, #0]
 800a08a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a08c:	d10a      	bne.n	800a0a4 <_svfiprintf_r+0x130>
 800a08e:	7863      	ldrb	r3, [r4, #1]
 800a090:	2b2a      	cmp	r3, #42	@ 0x2a
 800a092:	d132      	bne.n	800a0fa <_svfiprintf_r+0x186>
 800a094:	9b03      	ldr	r3, [sp, #12]
 800a096:	3402      	adds	r4, #2
 800a098:	1d1a      	adds	r2, r3, #4
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	9203      	str	r2, [sp, #12]
 800a09e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a0a2:	9305      	str	r3, [sp, #20]
 800a0a4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a15c <_svfiprintf_r+0x1e8>
 800a0a8:	2203      	movs	r2, #3
 800a0aa:	4650      	mov	r0, sl
 800a0ac:	7821      	ldrb	r1, [r4, #0]
 800a0ae:	f7fd fc80 	bl	80079b2 <memchr>
 800a0b2:	b138      	cbz	r0, 800a0c4 <_svfiprintf_r+0x150>
 800a0b4:	2240      	movs	r2, #64	@ 0x40
 800a0b6:	9b04      	ldr	r3, [sp, #16]
 800a0b8:	eba0 000a 	sub.w	r0, r0, sl
 800a0bc:	4082      	lsls	r2, r0
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	3401      	adds	r4, #1
 800a0c2:	9304      	str	r3, [sp, #16]
 800a0c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0c8:	2206      	movs	r2, #6
 800a0ca:	4825      	ldr	r0, [pc, #148]	@ (800a160 <_svfiprintf_r+0x1ec>)
 800a0cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0d0:	f7fd fc6f 	bl	80079b2 <memchr>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	d036      	beq.n	800a146 <_svfiprintf_r+0x1d2>
 800a0d8:	4b22      	ldr	r3, [pc, #136]	@ (800a164 <_svfiprintf_r+0x1f0>)
 800a0da:	bb1b      	cbnz	r3, 800a124 <_svfiprintf_r+0x1b0>
 800a0dc:	9b03      	ldr	r3, [sp, #12]
 800a0de:	3307      	adds	r3, #7
 800a0e0:	f023 0307 	bic.w	r3, r3, #7
 800a0e4:	3308      	adds	r3, #8
 800a0e6:	9303      	str	r3, [sp, #12]
 800a0e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0ea:	4433      	add	r3, r6
 800a0ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0ee:	e76a      	b.n	8009fc6 <_svfiprintf_r+0x52>
 800a0f0:	460c      	mov	r4, r1
 800a0f2:	2001      	movs	r0, #1
 800a0f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0f8:	e7a8      	b.n	800a04c <_svfiprintf_r+0xd8>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	f04f 0c0a 	mov.w	ip, #10
 800a100:	4619      	mov	r1, r3
 800a102:	3401      	adds	r4, #1
 800a104:	9305      	str	r3, [sp, #20]
 800a106:	4620      	mov	r0, r4
 800a108:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a10c:	3a30      	subs	r2, #48	@ 0x30
 800a10e:	2a09      	cmp	r2, #9
 800a110:	d903      	bls.n	800a11a <_svfiprintf_r+0x1a6>
 800a112:	2b00      	cmp	r3, #0
 800a114:	d0c6      	beq.n	800a0a4 <_svfiprintf_r+0x130>
 800a116:	9105      	str	r1, [sp, #20]
 800a118:	e7c4      	b.n	800a0a4 <_svfiprintf_r+0x130>
 800a11a:	4604      	mov	r4, r0
 800a11c:	2301      	movs	r3, #1
 800a11e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a122:	e7f0      	b.n	800a106 <_svfiprintf_r+0x192>
 800a124:	ab03      	add	r3, sp, #12
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	462a      	mov	r2, r5
 800a12a:	4638      	mov	r0, r7
 800a12c:	4b0e      	ldr	r3, [pc, #56]	@ (800a168 <_svfiprintf_r+0x1f4>)
 800a12e:	a904      	add	r1, sp, #16
 800a130:	f7fc fccc 	bl	8006acc <_printf_float>
 800a134:	1c42      	adds	r2, r0, #1
 800a136:	4606      	mov	r6, r0
 800a138:	d1d6      	bne.n	800a0e8 <_svfiprintf_r+0x174>
 800a13a:	89ab      	ldrh	r3, [r5, #12]
 800a13c:	065b      	lsls	r3, r3, #25
 800a13e:	f53f af2d 	bmi.w	8009f9c <_svfiprintf_r+0x28>
 800a142:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a144:	e72c      	b.n	8009fa0 <_svfiprintf_r+0x2c>
 800a146:	ab03      	add	r3, sp, #12
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	462a      	mov	r2, r5
 800a14c:	4638      	mov	r0, r7
 800a14e:	4b06      	ldr	r3, [pc, #24]	@ (800a168 <_svfiprintf_r+0x1f4>)
 800a150:	a904      	add	r1, sp, #16
 800a152:	f7fc ff59 	bl	8007008 <_printf_i>
 800a156:	e7ed      	b.n	800a134 <_svfiprintf_r+0x1c0>
 800a158:	0800c5b9 	.word	0x0800c5b9
 800a15c:	0800c5bf 	.word	0x0800c5bf
 800a160:	0800c5c3 	.word	0x0800c5c3
 800a164:	08006acd 	.word	0x08006acd
 800a168:	08009ebd 	.word	0x08009ebd

0800a16c <__sflush_r>:
 800a16c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a172:	0716      	lsls	r6, r2, #28
 800a174:	4605      	mov	r5, r0
 800a176:	460c      	mov	r4, r1
 800a178:	d454      	bmi.n	800a224 <__sflush_r+0xb8>
 800a17a:	684b      	ldr	r3, [r1, #4]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	dc02      	bgt.n	800a186 <__sflush_r+0x1a>
 800a180:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a182:	2b00      	cmp	r3, #0
 800a184:	dd48      	ble.n	800a218 <__sflush_r+0xac>
 800a186:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a188:	2e00      	cmp	r6, #0
 800a18a:	d045      	beq.n	800a218 <__sflush_r+0xac>
 800a18c:	2300      	movs	r3, #0
 800a18e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a192:	682f      	ldr	r7, [r5, #0]
 800a194:	6a21      	ldr	r1, [r4, #32]
 800a196:	602b      	str	r3, [r5, #0]
 800a198:	d030      	beq.n	800a1fc <__sflush_r+0x90>
 800a19a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a19c:	89a3      	ldrh	r3, [r4, #12]
 800a19e:	0759      	lsls	r1, r3, #29
 800a1a0:	d505      	bpl.n	800a1ae <__sflush_r+0x42>
 800a1a2:	6863      	ldr	r3, [r4, #4]
 800a1a4:	1ad2      	subs	r2, r2, r3
 800a1a6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a1a8:	b10b      	cbz	r3, 800a1ae <__sflush_r+0x42>
 800a1aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a1ac:	1ad2      	subs	r2, r2, r3
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a1b4:	6a21      	ldr	r1, [r4, #32]
 800a1b6:	47b0      	blx	r6
 800a1b8:	1c43      	adds	r3, r0, #1
 800a1ba:	89a3      	ldrh	r3, [r4, #12]
 800a1bc:	d106      	bne.n	800a1cc <__sflush_r+0x60>
 800a1be:	6829      	ldr	r1, [r5, #0]
 800a1c0:	291d      	cmp	r1, #29
 800a1c2:	d82b      	bhi.n	800a21c <__sflush_r+0xb0>
 800a1c4:	4a28      	ldr	r2, [pc, #160]	@ (800a268 <__sflush_r+0xfc>)
 800a1c6:	410a      	asrs	r2, r1
 800a1c8:	07d6      	lsls	r6, r2, #31
 800a1ca:	d427      	bmi.n	800a21c <__sflush_r+0xb0>
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	6062      	str	r2, [r4, #4]
 800a1d0:	6922      	ldr	r2, [r4, #16]
 800a1d2:	04d9      	lsls	r1, r3, #19
 800a1d4:	6022      	str	r2, [r4, #0]
 800a1d6:	d504      	bpl.n	800a1e2 <__sflush_r+0x76>
 800a1d8:	1c42      	adds	r2, r0, #1
 800a1da:	d101      	bne.n	800a1e0 <__sflush_r+0x74>
 800a1dc:	682b      	ldr	r3, [r5, #0]
 800a1de:	b903      	cbnz	r3, 800a1e2 <__sflush_r+0x76>
 800a1e0:	6560      	str	r0, [r4, #84]	@ 0x54
 800a1e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a1e4:	602f      	str	r7, [r5, #0]
 800a1e6:	b1b9      	cbz	r1, 800a218 <__sflush_r+0xac>
 800a1e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1ec:	4299      	cmp	r1, r3
 800a1ee:	d002      	beq.n	800a1f6 <__sflush_r+0x8a>
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	f7fe fa41 	bl	8008678 <_free_r>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a1fa:	e00d      	b.n	800a218 <__sflush_r+0xac>
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	4628      	mov	r0, r5
 800a200:	47b0      	blx	r6
 800a202:	4602      	mov	r2, r0
 800a204:	1c50      	adds	r0, r2, #1
 800a206:	d1c9      	bne.n	800a19c <__sflush_r+0x30>
 800a208:	682b      	ldr	r3, [r5, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d0c6      	beq.n	800a19c <__sflush_r+0x30>
 800a20e:	2b1d      	cmp	r3, #29
 800a210:	d001      	beq.n	800a216 <__sflush_r+0xaa>
 800a212:	2b16      	cmp	r3, #22
 800a214:	d11d      	bne.n	800a252 <__sflush_r+0xe6>
 800a216:	602f      	str	r7, [r5, #0]
 800a218:	2000      	movs	r0, #0
 800a21a:	e021      	b.n	800a260 <__sflush_r+0xf4>
 800a21c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a220:	b21b      	sxth	r3, r3
 800a222:	e01a      	b.n	800a25a <__sflush_r+0xee>
 800a224:	690f      	ldr	r7, [r1, #16]
 800a226:	2f00      	cmp	r7, #0
 800a228:	d0f6      	beq.n	800a218 <__sflush_r+0xac>
 800a22a:	0793      	lsls	r3, r2, #30
 800a22c:	bf18      	it	ne
 800a22e:	2300      	movne	r3, #0
 800a230:	680e      	ldr	r6, [r1, #0]
 800a232:	bf08      	it	eq
 800a234:	694b      	ldreq	r3, [r1, #20]
 800a236:	1bf6      	subs	r6, r6, r7
 800a238:	600f      	str	r7, [r1, #0]
 800a23a:	608b      	str	r3, [r1, #8]
 800a23c:	2e00      	cmp	r6, #0
 800a23e:	ddeb      	ble.n	800a218 <__sflush_r+0xac>
 800a240:	4633      	mov	r3, r6
 800a242:	463a      	mov	r2, r7
 800a244:	4628      	mov	r0, r5
 800a246:	6a21      	ldr	r1, [r4, #32]
 800a248:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a24c:	47e0      	blx	ip
 800a24e:	2800      	cmp	r0, #0
 800a250:	dc07      	bgt.n	800a262 <__sflush_r+0xf6>
 800a252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a25a:	f04f 30ff 	mov.w	r0, #4294967295
 800a25e:	81a3      	strh	r3, [r4, #12]
 800a260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a262:	4407      	add	r7, r0
 800a264:	1a36      	subs	r6, r6, r0
 800a266:	e7e9      	b.n	800a23c <__sflush_r+0xd0>
 800a268:	dfbffffe 	.word	0xdfbffffe

0800a26c <_fflush_r>:
 800a26c:	b538      	push	{r3, r4, r5, lr}
 800a26e:	690b      	ldr	r3, [r1, #16]
 800a270:	4605      	mov	r5, r0
 800a272:	460c      	mov	r4, r1
 800a274:	b913      	cbnz	r3, 800a27c <_fflush_r+0x10>
 800a276:	2500      	movs	r5, #0
 800a278:	4628      	mov	r0, r5
 800a27a:	bd38      	pop	{r3, r4, r5, pc}
 800a27c:	b118      	cbz	r0, 800a286 <_fflush_r+0x1a>
 800a27e:	6a03      	ldr	r3, [r0, #32]
 800a280:	b90b      	cbnz	r3, 800a286 <_fflush_r+0x1a>
 800a282:	f7fd fa7d 	bl	8007780 <__sinit>
 800a286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d0f3      	beq.n	800a276 <_fflush_r+0xa>
 800a28e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a290:	07d0      	lsls	r0, r2, #31
 800a292:	d404      	bmi.n	800a29e <_fflush_r+0x32>
 800a294:	0599      	lsls	r1, r3, #22
 800a296:	d402      	bmi.n	800a29e <_fflush_r+0x32>
 800a298:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a29a:	f7fd fb88 	bl	80079ae <__retarget_lock_acquire_recursive>
 800a29e:	4628      	mov	r0, r5
 800a2a0:	4621      	mov	r1, r4
 800a2a2:	f7ff ff63 	bl	800a16c <__sflush_r>
 800a2a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a2a8:	4605      	mov	r5, r0
 800a2aa:	07da      	lsls	r2, r3, #31
 800a2ac:	d4e4      	bmi.n	800a278 <_fflush_r+0xc>
 800a2ae:	89a3      	ldrh	r3, [r4, #12]
 800a2b0:	059b      	lsls	r3, r3, #22
 800a2b2:	d4e1      	bmi.n	800a278 <_fflush_r+0xc>
 800a2b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2b6:	f7fd fb7b 	bl	80079b0 <__retarget_lock_release_recursive>
 800a2ba:	e7dd      	b.n	800a278 <_fflush_r+0xc>

0800a2bc <memmove>:
 800a2bc:	4288      	cmp	r0, r1
 800a2be:	b510      	push	{r4, lr}
 800a2c0:	eb01 0402 	add.w	r4, r1, r2
 800a2c4:	d902      	bls.n	800a2cc <memmove+0x10>
 800a2c6:	4284      	cmp	r4, r0
 800a2c8:	4623      	mov	r3, r4
 800a2ca:	d807      	bhi.n	800a2dc <memmove+0x20>
 800a2cc:	1e43      	subs	r3, r0, #1
 800a2ce:	42a1      	cmp	r1, r4
 800a2d0:	d008      	beq.n	800a2e4 <memmove+0x28>
 800a2d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2da:	e7f8      	b.n	800a2ce <memmove+0x12>
 800a2dc:	4601      	mov	r1, r0
 800a2de:	4402      	add	r2, r0
 800a2e0:	428a      	cmp	r2, r1
 800a2e2:	d100      	bne.n	800a2e6 <memmove+0x2a>
 800a2e4:	bd10      	pop	{r4, pc}
 800a2e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2ee:	e7f7      	b.n	800a2e0 <memmove+0x24>

0800a2f0 <strncmp>:
 800a2f0:	b510      	push	{r4, lr}
 800a2f2:	b16a      	cbz	r2, 800a310 <strncmp+0x20>
 800a2f4:	3901      	subs	r1, #1
 800a2f6:	1884      	adds	r4, r0, r2
 800a2f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a300:	429a      	cmp	r2, r3
 800a302:	d103      	bne.n	800a30c <strncmp+0x1c>
 800a304:	42a0      	cmp	r0, r4
 800a306:	d001      	beq.n	800a30c <strncmp+0x1c>
 800a308:	2a00      	cmp	r2, #0
 800a30a:	d1f5      	bne.n	800a2f8 <strncmp+0x8>
 800a30c:	1ad0      	subs	r0, r2, r3
 800a30e:	bd10      	pop	{r4, pc}
 800a310:	4610      	mov	r0, r2
 800a312:	e7fc      	b.n	800a30e <strncmp+0x1e>

0800a314 <_sbrk_r>:
 800a314:	b538      	push	{r3, r4, r5, lr}
 800a316:	2300      	movs	r3, #0
 800a318:	4d05      	ldr	r5, [pc, #20]	@ (800a330 <_sbrk_r+0x1c>)
 800a31a:	4604      	mov	r4, r0
 800a31c:	4608      	mov	r0, r1
 800a31e:	602b      	str	r3, [r5, #0]
 800a320:	f7f8 fb8a 	bl	8002a38 <_sbrk>
 800a324:	1c43      	adds	r3, r0, #1
 800a326:	d102      	bne.n	800a32e <_sbrk_r+0x1a>
 800a328:	682b      	ldr	r3, [r5, #0]
 800a32a:	b103      	cbz	r3, 800a32e <_sbrk_r+0x1a>
 800a32c:	6023      	str	r3, [r4, #0]
 800a32e:	bd38      	pop	{r3, r4, r5, pc}
 800a330:	200005a8 	.word	0x200005a8

0800a334 <memcpy>:
 800a334:	440a      	add	r2, r1
 800a336:	4291      	cmp	r1, r2
 800a338:	f100 33ff 	add.w	r3, r0, #4294967295
 800a33c:	d100      	bne.n	800a340 <memcpy+0xc>
 800a33e:	4770      	bx	lr
 800a340:	b510      	push	{r4, lr}
 800a342:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a346:	4291      	cmp	r1, r2
 800a348:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a34c:	d1f9      	bne.n	800a342 <memcpy+0xe>
 800a34e:	bd10      	pop	{r4, pc}

0800a350 <nan>:
 800a350:	2000      	movs	r0, #0
 800a352:	4901      	ldr	r1, [pc, #4]	@ (800a358 <nan+0x8>)
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop
 800a358:	7ff80000 	.word	0x7ff80000

0800a35c <__assert_func>:
 800a35c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a35e:	4614      	mov	r4, r2
 800a360:	461a      	mov	r2, r3
 800a362:	4b09      	ldr	r3, [pc, #36]	@ (800a388 <__assert_func+0x2c>)
 800a364:	4605      	mov	r5, r0
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68d8      	ldr	r0, [r3, #12]
 800a36a:	b954      	cbnz	r4, 800a382 <__assert_func+0x26>
 800a36c:	4b07      	ldr	r3, [pc, #28]	@ (800a38c <__assert_func+0x30>)
 800a36e:	461c      	mov	r4, r3
 800a370:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a374:	9100      	str	r1, [sp, #0]
 800a376:	462b      	mov	r3, r5
 800a378:	4905      	ldr	r1, [pc, #20]	@ (800a390 <__assert_func+0x34>)
 800a37a:	f000 fba7 	bl	800aacc <fiprintf>
 800a37e:	f000 fbb7 	bl	800aaf0 <abort>
 800a382:	4b04      	ldr	r3, [pc, #16]	@ (800a394 <__assert_func+0x38>)
 800a384:	e7f4      	b.n	800a370 <__assert_func+0x14>
 800a386:	bf00      	nop
 800a388:	2000001c 	.word	0x2000001c
 800a38c:	0800c60d 	.word	0x0800c60d
 800a390:	0800c5df 	.word	0x0800c5df
 800a394:	0800c5d2 	.word	0x0800c5d2

0800a398 <_calloc_r>:
 800a398:	b570      	push	{r4, r5, r6, lr}
 800a39a:	fba1 5402 	umull	r5, r4, r1, r2
 800a39e:	b93c      	cbnz	r4, 800a3b0 <_calloc_r+0x18>
 800a3a0:	4629      	mov	r1, r5
 800a3a2:	f7fe f9db 	bl	800875c <_malloc_r>
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	b928      	cbnz	r0, 800a3b6 <_calloc_r+0x1e>
 800a3aa:	2600      	movs	r6, #0
 800a3ac:	4630      	mov	r0, r6
 800a3ae:	bd70      	pop	{r4, r5, r6, pc}
 800a3b0:	220c      	movs	r2, #12
 800a3b2:	6002      	str	r2, [r0, #0]
 800a3b4:	e7f9      	b.n	800a3aa <_calloc_r+0x12>
 800a3b6:	462a      	mov	r2, r5
 800a3b8:	4621      	mov	r1, r4
 800a3ba:	f7fd fa7a 	bl	80078b2 <memset>
 800a3be:	e7f5      	b.n	800a3ac <_calloc_r+0x14>

0800a3c0 <rshift>:
 800a3c0:	6903      	ldr	r3, [r0, #16]
 800a3c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a3ca:	f100 0414 	add.w	r4, r0, #20
 800a3ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a3d2:	dd46      	ble.n	800a462 <rshift+0xa2>
 800a3d4:	f011 011f 	ands.w	r1, r1, #31
 800a3d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a3dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a3e0:	d10c      	bne.n	800a3fc <rshift+0x3c>
 800a3e2:	4629      	mov	r1, r5
 800a3e4:	f100 0710 	add.w	r7, r0, #16
 800a3e8:	42b1      	cmp	r1, r6
 800a3ea:	d335      	bcc.n	800a458 <rshift+0x98>
 800a3ec:	1a9b      	subs	r3, r3, r2
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	1eea      	subs	r2, r5, #3
 800a3f2:	4296      	cmp	r6, r2
 800a3f4:	bf38      	it	cc
 800a3f6:	2300      	movcc	r3, #0
 800a3f8:	4423      	add	r3, r4
 800a3fa:	e015      	b.n	800a428 <rshift+0x68>
 800a3fc:	46a1      	mov	r9, r4
 800a3fe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a402:	f1c1 0820 	rsb	r8, r1, #32
 800a406:	40cf      	lsrs	r7, r1
 800a408:	f105 0e04 	add.w	lr, r5, #4
 800a40c:	4576      	cmp	r6, lr
 800a40e:	46f4      	mov	ip, lr
 800a410:	d816      	bhi.n	800a440 <rshift+0x80>
 800a412:	1a9a      	subs	r2, r3, r2
 800a414:	0092      	lsls	r2, r2, #2
 800a416:	3a04      	subs	r2, #4
 800a418:	3501      	adds	r5, #1
 800a41a:	42ae      	cmp	r6, r5
 800a41c:	bf38      	it	cc
 800a41e:	2200      	movcc	r2, #0
 800a420:	18a3      	adds	r3, r4, r2
 800a422:	50a7      	str	r7, [r4, r2]
 800a424:	b107      	cbz	r7, 800a428 <rshift+0x68>
 800a426:	3304      	adds	r3, #4
 800a428:	42a3      	cmp	r3, r4
 800a42a:	eba3 0204 	sub.w	r2, r3, r4
 800a42e:	bf08      	it	eq
 800a430:	2300      	moveq	r3, #0
 800a432:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a436:	6102      	str	r2, [r0, #16]
 800a438:	bf08      	it	eq
 800a43a:	6143      	streq	r3, [r0, #20]
 800a43c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a440:	f8dc c000 	ldr.w	ip, [ip]
 800a444:	fa0c fc08 	lsl.w	ip, ip, r8
 800a448:	ea4c 0707 	orr.w	r7, ip, r7
 800a44c:	f849 7b04 	str.w	r7, [r9], #4
 800a450:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a454:	40cf      	lsrs	r7, r1
 800a456:	e7d9      	b.n	800a40c <rshift+0x4c>
 800a458:	f851 cb04 	ldr.w	ip, [r1], #4
 800a45c:	f847 cf04 	str.w	ip, [r7, #4]!
 800a460:	e7c2      	b.n	800a3e8 <rshift+0x28>
 800a462:	4623      	mov	r3, r4
 800a464:	e7e0      	b.n	800a428 <rshift+0x68>

0800a466 <__hexdig_fun>:
 800a466:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a46a:	2b09      	cmp	r3, #9
 800a46c:	d802      	bhi.n	800a474 <__hexdig_fun+0xe>
 800a46e:	3820      	subs	r0, #32
 800a470:	b2c0      	uxtb	r0, r0
 800a472:	4770      	bx	lr
 800a474:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a478:	2b05      	cmp	r3, #5
 800a47a:	d801      	bhi.n	800a480 <__hexdig_fun+0x1a>
 800a47c:	3847      	subs	r0, #71	@ 0x47
 800a47e:	e7f7      	b.n	800a470 <__hexdig_fun+0xa>
 800a480:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a484:	2b05      	cmp	r3, #5
 800a486:	d801      	bhi.n	800a48c <__hexdig_fun+0x26>
 800a488:	3827      	subs	r0, #39	@ 0x27
 800a48a:	e7f1      	b.n	800a470 <__hexdig_fun+0xa>
 800a48c:	2000      	movs	r0, #0
 800a48e:	4770      	bx	lr

0800a490 <__gethex>:
 800a490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a494:	468a      	mov	sl, r1
 800a496:	4690      	mov	r8, r2
 800a498:	b085      	sub	sp, #20
 800a49a:	9302      	str	r3, [sp, #8]
 800a49c:	680b      	ldr	r3, [r1, #0]
 800a49e:	9001      	str	r0, [sp, #4]
 800a4a0:	1c9c      	adds	r4, r3, #2
 800a4a2:	46a1      	mov	r9, r4
 800a4a4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a4a8:	2830      	cmp	r0, #48	@ 0x30
 800a4aa:	d0fa      	beq.n	800a4a2 <__gethex+0x12>
 800a4ac:	eba9 0303 	sub.w	r3, r9, r3
 800a4b0:	f1a3 0b02 	sub.w	fp, r3, #2
 800a4b4:	f7ff ffd7 	bl	800a466 <__hexdig_fun>
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	d168      	bne.n	800a590 <__gethex+0x100>
 800a4be:	2201      	movs	r2, #1
 800a4c0:	4648      	mov	r0, r9
 800a4c2:	499f      	ldr	r1, [pc, #636]	@ (800a740 <__gethex+0x2b0>)
 800a4c4:	f7ff ff14 	bl	800a2f0 <strncmp>
 800a4c8:	4607      	mov	r7, r0
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	d167      	bne.n	800a59e <__gethex+0x10e>
 800a4ce:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a4d2:	4626      	mov	r6, r4
 800a4d4:	f7ff ffc7 	bl	800a466 <__hexdig_fun>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d062      	beq.n	800a5a2 <__gethex+0x112>
 800a4dc:	4623      	mov	r3, r4
 800a4de:	7818      	ldrb	r0, [r3, #0]
 800a4e0:	4699      	mov	r9, r3
 800a4e2:	2830      	cmp	r0, #48	@ 0x30
 800a4e4:	f103 0301 	add.w	r3, r3, #1
 800a4e8:	d0f9      	beq.n	800a4de <__gethex+0x4e>
 800a4ea:	f7ff ffbc 	bl	800a466 <__hexdig_fun>
 800a4ee:	fab0 f580 	clz	r5, r0
 800a4f2:	f04f 0b01 	mov.w	fp, #1
 800a4f6:	096d      	lsrs	r5, r5, #5
 800a4f8:	464a      	mov	r2, r9
 800a4fa:	4616      	mov	r6, r2
 800a4fc:	7830      	ldrb	r0, [r6, #0]
 800a4fe:	3201      	adds	r2, #1
 800a500:	f7ff ffb1 	bl	800a466 <__hexdig_fun>
 800a504:	2800      	cmp	r0, #0
 800a506:	d1f8      	bne.n	800a4fa <__gethex+0x6a>
 800a508:	2201      	movs	r2, #1
 800a50a:	4630      	mov	r0, r6
 800a50c:	498c      	ldr	r1, [pc, #560]	@ (800a740 <__gethex+0x2b0>)
 800a50e:	f7ff feef 	bl	800a2f0 <strncmp>
 800a512:	2800      	cmp	r0, #0
 800a514:	d13f      	bne.n	800a596 <__gethex+0x106>
 800a516:	b944      	cbnz	r4, 800a52a <__gethex+0x9a>
 800a518:	1c74      	adds	r4, r6, #1
 800a51a:	4622      	mov	r2, r4
 800a51c:	4616      	mov	r6, r2
 800a51e:	7830      	ldrb	r0, [r6, #0]
 800a520:	3201      	adds	r2, #1
 800a522:	f7ff ffa0 	bl	800a466 <__hexdig_fun>
 800a526:	2800      	cmp	r0, #0
 800a528:	d1f8      	bne.n	800a51c <__gethex+0x8c>
 800a52a:	1ba4      	subs	r4, r4, r6
 800a52c:	00a7      	lsls	r7, r4, #2
 800a52e:	7833      	ldrb	r3, [r6, #0]
 800a530:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a534:	2b50      	cmp	r3, #80	@ 0x50
 800a536:	d13e      	bne.n	800a5b6 <__gethex+0x126>
 800a538:	7873      	ldrb	r3, [r6, #1]
 800a53a:	2b2b      	cmp	r3, #43	@ 0x2b
 800a53c:	d033      	beq.n	800a5a6 <__gethex+0x116>
 800a53e:	2b2d      	cmp	r3, #45	@ 0x2d
 800a540:	d034      	beq.n	800a5ac <__gethex+0x11c>
 800a542:	2400      	movs	r4, #0
 800a544:	1c71      	adds	r1, r6, #1
 800a546:	7808      	ldrb	r0, [r1, #0]
 800a548:	f7ff ff8d 	bl	800a466 <__hexdig_fun>
 800a54c:	1e43      	subs	r3, r0, #1
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	2b18      	cmp	r3, #24
 800a552:	d830      	bhi.n	800a5b6 <__gethex+0x126>
 800a554:	f1a0 0210 	sub.w	r2, r0, #16
 800a558:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a55c:	f7ff ff83 	bl	800a466 <__hexdig_fun>
 800a560:	f100 3cff 	add.w	ip, r0, #4294967295
 800a564:	fa5f fc8c 	uxtb.w	ip, ip
 800a568:	f1bc 0f18 	cmp.w	ip, #24
 800a56c:	f04f 030a 	mov.w	r3, #10
 800a570:	d91e      	bls.n	800a5b0 <__gethex+0x120>
 800a572:	b104      	cbz	r4, 800a576 <__gethex+0xe6>
 800a574:	4252      	negs	r2, r2
 800a576:	4417      	add	r7, r2
 800a578:	f8ca 1000 	str.w	r1, [sl]
 800a57c:	b1ed      	cbz	r5, 800a5ba <__gethex+0x12a>
 800a57e:	f1bb 0f00 	cmp.w	fp, #0
 800a582:	bf0c      	ite	eq
 800a584:	2506      	moveq	r5, #6
 800a586:	2500      	movne	r5, #0
 800a588:	4628      	mov	r0, r5
 800a58a:	b005      	add	sp, #20
 800a58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a590:	2500      	movs	r5, #0
 800a592:	462c      	mov	r4, r5
 800a594:	e7b0      	b.n	800a4f8 <__gethex+0x68>
 800a596:	2c00      	cmp	r4, #0
 800a598:	d1c7      	bne.n	800a52a <__gethex+0x9a>
 800a59a:	4627      	mov	r7, r4
 800a59c:	e7c7      	b.n	800a52e <__gethex+0x9e>
 800a59e:	464e      	mov	r6, r9
 800a5a0:	462f      	mov	r7, r5
 800a5a2:	2501      	movs	r5, #1
 800a5a4:	e7c3      	b.n	800a52e <__gethex+0x9e>
 800a5a6:	2400      	movs	r4, #0
 800a5a8:	1cb1      	adds	r1, r6, #2
 800a5aa:	e7cc      	b.n	800a546 <__gethex+0xb6>
 800a5ac:	2401      	movs	r4, #1
 800a5ae:	e7fb      	b.n	800a5a8 <__gethex+0x118>
 800a5b0:	fb03 0002 	mla	r0, r3, r2, r0
 800a5b4:	e7ce      	b.n	800a554 <__gethex+0xc4>
 800a5b6:	4631      	mov	r1, r6
 800a5b8:	e7de      	b.n	800a578 <__gethex+0xe8>
 800a5ba:	4629      	mov	r1, r5
 800a5bc:	eba6 0309 	sub.w	r3, r6, r9
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	2b07      	cmp	r3, #7
 800a5c4:	dc0a      	bgt.n	800a5dc <__gethex+0x14c>
 800a5c6:	9801      	ldr	r0, [sp, #4]
 800a5c8:	f7fe f954 	bl	8008874 <_Balloc>
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	b940      	cbnz	r0, 800a5e2 <__gethex+0x152>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	21e4      	movs	r1, #228	@ 0xe4
 800a5d4:	4b5b      	ldr	r3, [pc, #364]	@ (800a744 <__gethex+0x2b4>)
 800a5d6:	485c      	ldr	r0, [pc, #368]	@ (800a748 <__gethex+0x2b8>)
 800a5d8:	f7ff fec0 	bl	800a35c <__assert_func>
 800a5dc:	3101      	adds	r1, #1
 800a5de:	105b      	asrs	r3, r3, #1
 800a5e0:	e7ef      	b.n	800a5c2 <__gethex+0x132>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	f100 0a14 	add.w	sl, r0, #20
 800a5e8:	4655      	mov	r5, sl
 800a5ea:	469b      	mov	fp, r3
 800a5ec:	45b1      	cmp	r9, r6
 800a5ee:	d337      	bcc.n	800a660 <__gethex+0x1d0>
 800a5f0:	f845 bb04 	str.w	fp, [r5], #4
 800a5f4:	eba5 050a 	sub.w	r5, r5, sl
 800a5f8:	10ad      	asrs	r5, r5, #2
 800a5fa:	6125      	str	r5, [r4, #16]
 800a5fc:	4658      	mov	r0, fp
 800a5fe:	f7fe fa2b 	bl	8008a58 <__hi0bits>
 800a602:	016d      	lsls	r5, r5, #5
 800a604:	f8d8 6000 	ldr.w	r6, [r8]
 800a608:	1a2d      	subs	r5, r5, r0
 800a60a:	42b5      	cmp	r5, r6
 800a60c:	dd54      	ble.n	800a6b8 <__gethex+0x228>
 800a60e:	1bad      	subs	r5, r5, r6
 800a610:	4629      	mov	r1, r5
 800a612:	4620      	mov	r0, r4
 800a614:	f7fe fdb3 	bl	800917e <__any_on>
 800a618:	4681      	mov	r9, r0
 800a61a:	b178      	cbz	r0, 800a63c <__gethex+0x1ac>
 800a61c:	f04f 0901 	mov.w	r9, #1
 800a620:	1e6b      	subs	r3, r5, #1
 800a622:	1159      	asrs	r1, r3, #5
 800a624:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a628:	f003 021f 	and.w	r2, r3, #31
 800a62c:	fa09 f202 	lsl.w	r2, r9, r2
 800a630:	420a      	tst	r2, r1
 800a632:	d003      	beq.n	800a63c <__gethex+0x1ac>
 800a634:	454b      	cmp	r3, r9
 800a636:	dc36      	bgt.n	800a6a6 <__gethex+0x216>
 800a638:	f04f 0902 	mov.w	r9, #2
 800a63c:	4629      	mov	r1, r5
 800a63e:	4620      	mov	r0, r4
 800a640:	f7ff febe 	bl	800a3c0 <rshift>
 800a644:	442f      	add	r7, r5
 800a646:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a64a:	42bb      	cmp	r3, r7
 800a64c:	da42      	bge.n	800a6d4 <__gethex+0x244>
 800a64e:	4621      	mov	r1, r4
 800a650:	9801      	ldr	r0, [sp, #4]
 800a652:	f7fe f94f 	bl	80088f4 <_Bfree>
 800a656:	2300      	movs	r3, #0
 800a658:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a65a:	25a3      	movs	r5, #163	@ 0xa3
 800a65c:	6013      	str	r3, [r2, #0]
 800a65e:	e793      	b.n	800a588 <__gethex+0xf8>
 800a660:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a664:	2a2e      	cmp	r2, #46	@ 0x2e
 800a666:	d012      	beq.n	800a68e <__gethex+0x1fe>
 800a668:	2b20      	cmp	r3, #32
 800a66a:	d104      	bne.n	800a676 <__gethex+0x1e6>
 800a66c:	f845 bb04 	str.w	fp, [r5], #4
 800a670:	f04f 0b00 	mov.w	fp, #0
 800a674:	465b      	mov	r3, fp
 800a676:	7830      	ldrb	r0, [r6, #0]
 800a678:	9303      	str	r3, [sp, #12]
 800a67a:	f7ff fef4 	bl	800a466 <__hexdig_fun>
 800a67e:	9b03      	ldr	r3, [sp, #12]
 800a680:	f000 000f 	and.w	r0, r0, #15
 800a684:	4098      	lsls	r0, r3
 800a686:	ea4b 0b00 	orr.w	fp, fp, r0
 800a68a:	3304      	adds	r3, #4
 800a68c:	e7ae      	b.n	800a5ec <__gethex+0x15c>
 800a68e:	45b1      	cmp	r9, r6
 800a690:	d8ea      	bhi.n	800a668 <__gethex+0x1d8>
 800a692:	2201      	movs	r2, #1
 800a694:	4630      	mov	r0, r6
 800a696:	492a      	ldr	r1, [pc, #168]	@ (800a740 <__gethex+0x2b0>)
 800a698:	9303      	str	r3, [sp, #12]
 800a69a:	f7ff fe29 	bl	800a2f0 <strncmp>
 800a69e:	9b03      	ldr	r3, [sp, #12]
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	d1e1      	bne.n	800a668 <__gethex+0x1d8>
 800a6a4:	e7a2      	b.n	800a5ec <__gethex+0x15c>
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	1ea9      	subs	r1, r5, #2
 800a6aa:	f7fe fd68 	bl	800917e <__any_on>
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	d0c2      	beq.n	800a638 <__gethex+0x1a8>
 800a6b2:	f04f 0903 	mov.w	r9, #3
 800a6b6:	e7c1      	b.n	800a63c <__gethex+0x1ac>
 800a6b8:	da09      	bge.n	800a6ce <__gethex+0x23e>
 800a6ba:	1b75      	subs	r5, r6, r5
 800a6bc:	4621      	mov	r1, r4
 800a6be:	462a      	mov	r2, r5
 800a6c0:	9801      	ldr	r0, [sp, #4]
 800a6c2:	f7fe fb2d 	bl	8008d20 <__lshift>
 800a6c6:	4604      	mov	r4, r0
 800a6c8:	1b7f      	subs	r7, r7, r5
 800a6ca:	f100 0a14 	add.w	sl, r0, #20
 800a6ce:	f04f 0900 	mov.w	r9, #0
 800a6d2:	e7b8      	b.n	800a646 <__gethex+0x1b6>
 800a6d4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a6d8:	42bd      	cmp	r5, r7
 800a6da:	dd6f      	ble.n	800a7bc <__gethex+0x32c>
 800a6dc:	1bed      	subs	r5, r5, r7
 800a6de:	42ae      	cmp	r6, r5
 800a6e0:	dc34      	bgt.n	800a74c <__gethex+0x2bc>
 800a6e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d022      	beq.n	800a730 <__gethex+0x2a0>
 800a6ea:	2b03      	cmp	r3, #3
 800a6ec:	d024      	beq.n	800a738 <__gethex+0x2a8>
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d115      	bne.n	800a71e <__gethex+0x28e>
 800a6f2:	42ae      	cmp	r6, r5
 800a6f4:	d113      	bne.n	800a71e <__gethex+0x28e>
 800a6f6:	2e01      	cmp	r6, #1
 800a6f8:	d10b      	bne.n	800a712 <__gethex+0x282>
 800a6fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a6fe:	9a02      	ldr	r2, [sp, #8]
 800a700:	2562      	movs	r5, #98	@ 0x62
 800a702:	6013      	str	r3, [r2, #0]
 800a704:	2301      	movs	r3, #1
 800a706:	6123      	str	r3, [r4, #16]
 800a708:	f8ca 3000 	str.w	r3, [sl]
 800a70c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a70e:	601c      	str	r4, [r3, #0]
 800a710:	e73a      	b.n	800a588 <__gethex+0xf8>
 800a712:	4620      	mov	r0, r4
 800a714:	1e71      	subs	r1, r6, #1
 800a716:	f7fe fd32 	bl	800917e <__any_on>
 800a71a:	2800      	cmp	r0, #0
 800a71c:	d1ed      	bne.n	800a6fa <__gethex+0x26a>
 800a71e:	4621      	mov	r1, r4
 800a720:	9801      	ldr	r0, [sp, #4]
 800a722:	f7fe f8e7 	bl	80088f4 <_Bfree>
 800a726:	2300      	movs	r3, #0
 800a728:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a72a:	2550      	movs	r5, #80	@ 0x50
 800a72c:	6013      	str	r3, [r2, #0]
 800a72e:	e72b      	b.n	800a588 <__gethex+0xf8>
 800a730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a732:	2b00      	cmp	r3, #0
 800a734:	d1f3      	bne.n	800a71e <__gethex+0x28e>
 800a736:	e7e0      	b.n	800a6fa <__gethex+0x26a>
 800a738:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d1dd      	bne.n	800a6fa <__gethex+0x26a>
 800a73e:	e7ee      	b.n	800a71e <__gethex+0x28e>
 800a740:	0800c460 	.word	0x0800c460
 800a744:	0800c2f7 	.word	0x0800c2f7
 800a748:	0800c60e 	.word	0x0800c60e
 800a74c:	1e6f      	subs	r7, r5, #1
 800a74e:	f1b9 0f00 	cmp.w	r9, #0
 800a752:	d130      	bne.n	800a7b6 <__gethex+0x326>
 800a754:	b127      	cbz	r7, 800a760 <__gethex+0x2d0>
 800a756:	4639      	mov	r1, r7
 800a758:	4620      	mov	r0, r4
 800a75a:	f7fe fd10 	bl	800917e <__any_on>
 800a75e:	4681      	mov	r9, r0
 800a760:	2301      	movs	r3, #1
 800a762:	4629      	mov	r1, r5
 800a764:	1b76      	subs	r6, r6, r5
 800a766:	2502      	movs	r5, #2
 800a768:	117a      	asrs	r2, r7, #5
 800a76a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a76e:	f007 071f 	and.w	r7, r7, #31
 800a772:	40bb      	lsls	r3, r7
 800a774:	4213      	tst	r3, r2
 800a776:	4620      	mov	r0, r4
 800a778:	bf18      	it	ne
 800a77a:	f049 0902 	orrne.w	r9, r9, #2
 800a77e:	f7ff fe1f 	bl	800a3c0 <rshift>
 800a782:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a786:	f1b9 0f00 	cmp.w	r9, #0
 800a78a:	d047      	beq.n	800a81c <__gethex+0x38c>
 800a78c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a790:	2b02      	cmp	r3, #2
 800a792:	d015      	beq.n	800a7c0 <__gethex+0x330>
 800a794:	2b03      	cmp	r3, #3
 800a796:	d017      	beq.n	800a7c8 <__gethex+0x338>
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d109      	bne.n	800a7b0 <__gethex+0x320>
 800a79c:	f019 0f02 	tst.w	r9, #2
 800a7a0:	d006      	beq.n	800a7b0 <__gethex+0x320>
 800a7a2:	f8da 3000 	ldr.w	r3, [sl]
 800a7a6:	ea49 0903 	orr.w	r9, r9, r3
 800a7aa:	f019 0f01 	tst.w	r9, #1
 800a7ae:	d10e      	bne.n	800a7ce <__gethex+0x33e>
 800a7b0:	f045 0510 	orr.w	r5, r5, #16
 800a7b4:	e032      	b.n	800a81c <__gethex+0x38c>
 800a7b6:	f04f 0901 	mov.w	r9, #1
 800a7ba:	e7d1      	b.n	800a760 <__gethex+0x2d0>
 800a7bc:	2501      	movs	r5, #1
 800a7be:	e7e2      	b.n	800a786 <__gethex+0x2f6>
 800a7c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7c2:	f1c3 0301 	rsb	r3, r3, #1
 800a7c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a7c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d0f0      	beq.n	800a7b0 <__gethex+0x320>
 800a7ce:	f04f 0c00 	mov.w	ip, #0
 800a7d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a7d6:	f104 0314 	add.w	r3, r4, #20
 800a7da:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a7de:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7e8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a7ec:	d01b      	beq.n	800a826 <__gethex+0x396>
 800a7ee:	3201      	adds	r2, #1
 800a7f0:	6002      	str	r2, [r0, #0]
 800a7f2:	2d02      	cmp	r5, #2
 800a7f4:	f104 0314 	add.w	r3, r4, #20
 800a7f8:	d13c      	bne.n	800a874 <__gethex+0x3e4>
 800a7fa:	f8d8 2000 	ldr.w	r2, [r8]
 800a7fe:	3a01      	subs	r2, #1
 800a800:	42b2      	cmp	r2, r6
 800a802:	d109      	bne.n	800a818 <__gethex+0x388>
 800a804:	2201      	movs	r2, #1
 800a806:	1171      	asrs	r1, r6, #5
 800a808:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a80c:	f006 061f 	and.w	r6, r6, #31
 800a810:	fa02 f606 	lsl.w	r6, r2, r6
 800a814:	421e      	tst	r6, r3
 800a816:	d13a      	bne.n	800a88e <__gethex+0x3fe>
 800a818:	f045 0520 	orr.w	r5, r5, #32
 800a81c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a81e:	601c      	str	r4, [r3, #0]
 800a820:	9b02      	ldr	r3, [sp, #8]
 800a822:	601f      	str	r7, [r3, #0]
 800a824:	e6b0      	b.n	800a588 <__gethex+0xf8>
 800a826:	4299      	cmp	r1, r3
 800a828:	f843 cc04 	str.w	ip, [r3, #-4]
 800a82c:	d8d9      	bhi.n	800a7e2 <__gethex+0x352>
 800a82e:	68a3      	ldr	r3, [r4, #8]
 800a830:	459b      	cmp	fp, r3
 800a832:	db17      	blt.n	800a864 <__gethex+0x3d4>
 800a834:	6861      	ldr	r1, [r4, #4]
 800a836:	9801      	ldr	r0, [sp, #4]
 800a838:	3101      	adds	r1, #1
 800a83a:	f7fe f81b 	bl	8008874 <_Balloc>
 800a83e:	4681      	mov	r9, r0
 800a840:	b918      	cbnz	r0, 800a84a <__gethex+0x3ba>
 800a842:	4602      	mov	r2, r0
 800a844:	2184      	movs	r1, #132	@ 0x84
 800a846:	4b19      	ldr	r3, [pc, #100]	@ (800a8ac <__gethex+0x41c>)
 800a848:	e6c5      	b.n	800a5d6 <__gethex+0x146>
 800a84a:	6922      	ldr	r2, [r4, #16]
 800a84c:	f104 010c 	add.w	r1, r4, #12
 800a850:	3202      	adds	r2, #2
 800a852:	0092      	lsls	r2, r2, #2
 800a854:	300c      	adds	r0, #12
 800a856:	f7ff fd6d 	bl	800a334 <memcpy>
 800a85a:	4621      	mov	r1, r4
 800a85c:	9801      	ldr	r0, [sp, #4]
 800a85e:	f7fe f849 	bl	80088f4 <_Bfree>
 800a862:	464c      	mov	r4, r9
 800a864:	6923      	ldr	r3, [r4, #16]
 800a866:	1c5a      	adds	r2, r3, #1
 800a868:	6122      	str	r2, [r4, #16]
 800a86a:	2201      	movs	r2, #1
 800a86c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a870:	615a      	str	r2, [r3, #20]
 800a872:	e7be      	b.n	800a7f2 <__gethex+0x362>
 800a874:	6922      	ldr	r2, [r4, #16]
 800a876:	455a      	cmp	r2, fp
 800a878:	dd0b      	ble.n	800a892 <__gethex+0x402>
 800a87a:	2101      	movs	r1, #1
 800a87c:	4620      	mov	r0, r4
 800a87e:	f7ff fd9f 	bl	800a3c0 <rshift>
 800a882:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a886:	3701      	adds	r7, #1
 800a888:	42bb      	cmp	r3, r7
 800a88a:	f6ff aee0 	blt.w	800a64e <__gethex+0x1be>
 800a88e:	2501      	movs	r5, #1
 800a890:	e7c2      	b.n	800a818 <__gethex+0x388>
 800a892:	f016 061f 	ands.w	r6, r6, #31
 800a896:	d0fa      	beq.n	800a88e <__gethex+0x3fe>
 800a898:	4453      	add	r3, sl
 800a89a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a89e:	f7fe f8db 	bl	8008a58 <__hi0bits>
 800a8a2:	f1c6 0620 	rsb	r6, r6, #32
 800a8a6:	42b0      	cmp	r0, r6
 800a8a8:	dbe7      	blt.n	800a87a <__gethex+0x3ea>
 800a8aa:	e7f0      	b.n	800a88e <__gethex+0x3fe>
 800a8ac:	0800c2f7 	.word	0x0800c2f7

0800a8b0 <L_shift>:
 800a8b0:	f1c2 0208 	rsb	r2, r2, #8
 800a8b4:	0092      	lsls	r2, r2, #2
 800a8b6:	b570      	push	{r4, r5, r6, lr}
 800a8b8:	f1c2 0620 	rsb	r6, r2, #32
 800a8bc:	6843      	ldr	r3, [r0, #4]
 800a8be:	6804      	ldr	r4, [r0, #0]
 800a8c0:	fa03 f506 	lsl.w	r5, r3, r6
 800a8c4:	432c      	orrs	r4, r5
 800a8c6:	40d3      	lsrs	r3, r2
 800a8c8:	6004      	str	r4, [r0, #0]
 800a8ca:	f840 3f04 	str.w	r3, [r0, #4]!
 800a8ce:	4288      	cmp	r0, r1
 800a8d0:	d3f4      	bcc.n	800a8bc <L_shift+0xc>
 800a8d2:	bd70      	pop	{r4, r5, r6, pc}

0800a8d4 <__match>:
 800a8d4:	b530      	push	{r4, r5, lr}
 800a8d6:	6803      	ldr	r3, [r0, #0]
 800a8d8:	3301      	adds	r3, #1
 800a8da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8de:	b914      	cbnz	r4, 800a8e6 <__match+0x12>
 800a8e0:	6003      	str	r3, [r0, #0]
 800a8e2:	2001      	movs	r0, #1
 800a8e4:	bd30      	pop	{r4, r5, pc}
 800a8e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8ea:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a8ee:	2d19      	cmp	r5, #25
 800a8f0:	bf98      	it	ls
 800a8f2:	3220      	addls	r2, #32
 800a8f4:	42a2      	cmp	r2, r4
 800a8f6:	d0f0      	beq.n	800a8da <__match+0x6>
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	e7f3      	b.n	800a8e4 <__match+0x10>

0800a8fc <__hexnan>:
 800a8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a900:	2500      	movs	r5, #0
 800a902:	680b      	ldr	r3, [r1, #0]
 800a904:	4682      	mov	sl, r0
 800a906:	115e      	asrs	r6, r3, #5
 800a908:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a90c:	f013 031f 	ands.w	r3, r3, #31
 800a910:	bf18      	it	ne
 800a912:	3604      	addne	r6, #4
 800a914:	1f37      	subs	r7, r6, #4
 800a916:	4690      	mov	r8, r2
 800a918:	46b9      	mov	r9, r7
 800a91a:	463c      	mov	r4, r7
 800a91c:	46ab      	mov	fp, r5
 800a91e:	b087      	sub	sp, #28
 800a920:	6801      	ldr	r1, [r0, #0]
 800a922:	9301      	str	r3, [sp, #4]
 800a924:	f846 5c04 	str.w	r5, [r6, #-4]
 800a928:	9502      	str	r5, [sp, #8]
 800a92a:	784a      	ldrb	r2, [r1, #1]
 800a92c:	1c4b      	adds	r3, r1, #1
 800a92e:	9303      	str	r3, [sp, #12]
 800a930:	b342      	cbz	r2, 800a984 <__hexnan+0x88>
 800a932:	4610      	mov	r0, r2
 800a934:	9105      	str	r1, [sp, #20]
 800a936:	9204      	str	r2, [sp, #16]
 800a938:	f7ff fd95 	bl	800a466 <__hexdig_fun>
 800a93c:	2800      	cmp	r0, #0
 800a93e:	d151      	bne.n	800a9e4 <__hexnan+0xe8>
 800a940:	9a04      	ldr	r2, [sp, #16]
 800a942:	9905      	ldr	r1, [sp, #20]
 800a944:	2a20      	cmp	r2, #32
 800a946:	d818      	bhi.n	800a97a <__hexnan+0x7e>
 800a948:	9b02      	ldr	r3, [sp, #8]
 800a94a:	459b      	cmp	fp, r3
 800a94c:	dd13      	ble.n	800a976 <__hexnan+0x7a>
 800a94e:	454c      	cmp	r4, r9
 800a950:	d206      	bcs.n	800a960 <__hexnan+0x64>
 800a952:	2d07      	cmp	r5, #7
 800a954:	dc04      	bgt.n	800a960 <__hexnan+0x64>
 800a956:	462a      	mov	r2, r5
 800a958:	4649      	mov	r1, r9
 800a95a:	4620      	mov	r0, r4
 800a95c:	f7ff ffa8 	bl	800a8b0 <L_shift>
 800a960:	4544      	cmp	r4, r8
 800a962:	d952      	bls.n	800aa0a <__hexnan+0x10e>
 800a964:	2300      	movs	r3, #0
 800a966:	f1a4 0904 	sub.w	r9, r4, #4
 800a96a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a96e:	461d      	mov	r5, r3
 800a970:	464c      	mov	r4, r9
 800a972:	f8cd b008 	str.w	fp, [sp, #8]
 800a976:	9903      	ldr	r1, [sp, #12]
 800a978:	e7d7      	b.n	800a92a <__hexnan+0x2e>
 800a97a:	2a29      	cmp	r2, #41	@ 0x29
 800a97c:	d157      	bne.n	800aa2e <__hexnan+0x132>
 800a97e:	3102      	adds	r1, #2
 800a980:	f8ca 1000 	str.w	r1, [sl]
 800a984:	f1bb 0f00 	cmp.w	fp, #0
 800a988:	d051      	beq.n	800aa2e <__hexnan+0x132>
 800a98a:	454c      	cmp	r4, r9
 800a98c:	d206      	bcs.n	800a99c <__hexnan+0xa0>
 800a98e:	2d07      	cmp	r5, #7
 800a990:	dc04      	bgt.n	800a99c <__hexnan+0xa0>
 800a992:	462a      	mov	r2, r5
 800a994:	4649      	mov	r1, r9
 800a996:	4620      	mov	r0, r4
 800a998:	f7ff ff8a 	bl	800a8b0 <L_shift>
 800a99c:	4544      	cmp	r4, r8
 800a99e:	d936      	bls.n	800aa0e <__hexnan+0x112>
 800a9a0:	4623      	mov	r3, r4
 800a9a2:	f1a8 0204 	sub.w	r2, r8, #4
 800a9a6:	f853 1b04 	ldr.w	r1, [r3], #4
 800a9aa:	429f      	cmp	r7, r3
 800a9ac:	f842 1f04 	str.w	r1, [r2, #4]!
 800a9b0:	d2f9      	bcs.n	800a9a6 <__hexnan+0xaa>
 800a9b2:	1b3b      	subs	r3, r7, r4
 800a9b4:	f023 0303 	bic.w	r3, r3, #3
 800a9b8:	3304      	adds	r3, #4
 800a9ba:	3401      	adds	r4, #1
 800a9bc:	3e03      	subs	r6, #3
 800a9be:	42b4      	cmp	r4, r6
 800a9c0:	bf88      	it	hi
 800a9c2:	2304      	movhi	r3, #4
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	4443      	add	r3, r8
 800a9c8:	f843 2b04 	str.w	r2, [r3], #4
 800a9cc:	429f      	cmp	r7, r3
 800a9ce:	d2fb      	bcs.n	800a9c8 <__hexnan+0xcc>
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	b91b      	cbnz	r3, 800a9dc <__hexnan+0xe0>
 800a9d4:	4547      	cmp	r7, r8
 800a9d6:	d128      	bne.n	800aa2a <__hexnan+0x12e>
 800a9d8:	2301      	movs	r3, #1
 800a9da:	603b      	str	r3, [r7, #0]
 800a9dc:	2005      	movs	r0, #5
 800a9de:	b007      	add	sp, #28
 800a9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e4:	3501      	adds	r5, #1
 800a9e6:	2d08      	cmp	r5, #8
 800a9e8:	f10b 0b01 	add.w	fp, fp, #1
 800a9ec:	dd06      	ble.n	800a9fc <__hexnan+0x100>
 800a9ee:	4544      	cmp	r4, r8
 800a9f0:	d9c1      	bls.n	800a976 <__hexnan+0x7a>
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	2501      	movs	r5, #1
 800a9f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9fa:	3c04      	subs	r4, #4
 800a9fc:	6822      	ldr	r2, [r4, #0]
 800a9fe:	f000 000f 	and.w	r0, r0, #15
 800aa02:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aa06:	6020      	str	r0, [r4, #0]
 800aa08:	e7b5      	b.n	800a976 <__hexnan+0x7a>
 800aa0a:	2508      	movs	r5, #8
 800aa0c:	e7b3      	b.n	800a976 <__hexnan+0x7a>
 800aa0e:	9b01      	ldr	r3, [sp, #4]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d0dd      	beq.n	800a9d0 <__hexnan+0xd4>
 800aa14:	f04f 32ff 	mov.w	r2, #4294967295
 800aa18:	f1c3 0320 	rsb	r3, r3, #32
 800aa1c:	40da      	lsrs	r2, r3
 800aa1e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800aa22:	4013      	ands	r3, r2
 800aa24:	f846 3c04 	str.w	r3, [r6, #-4]
 800aa28:	e7d2      	b.n	800a9d0 <__hexnan+0xd4>
 800aa2a:	3f04      	subs	r7, #4
 800aa2c:	e7d0      	b.n	800a9d0 <__hexnan+0xd4>
 800aa2e:	2004      	movs	r0, #4
 800aa30:	e7d5      	b.n	800a9de <__hexnan+0xe2>

0800aa32 <__ascii_mbtowc>:
 800aa32:	b082      	sub	sp, #8
 800aa34:	b901      	cbnz	r1, 800aa38 <__ascii_mbtowc+0x6>
 800aa36:	a901      	add	r1, sp, #4
 800aa38:	b142      	cbz	r2, 800aa4c <__ascii_mbtowc+0x1a>
 800aa3a:	b14b      	cbz	r3, 800aa50 <__ascii_mbtowc+0x1e>
 800aa3c:	7813      	ldrb	r3, [r2, #0]
 800aa3e:	600b      	str	r3, [r1, #0]
 800aa40:	7812      	ldrb	r2, [r2, #0]
 800aa42:	1e10      	subs	r0, r2, #0
 800aa44:	bf18      	it	ne
 800aa46:	2001      	movne	r0, #1
 800aa48:	b002      	add	sp, #8
 800aa4a:	4770      	bx	lr
 800aa4c:	4610      	mov	r0, r2
 800aa4e:	e7fb      	b.n	800aa48 <__ascii_mbtowc+0x16>
 800aa50:	f06f 0001 	mvn.w	r0, #1
 800aa54:	e7f8      	b.n	800aa48 <__ascii_mbtowc+0x16>

0800aa56 <_realloc_r>:
 800aa56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa5a:	4680      	mov	r8, r0
 800aa5c:	4615      	mov	r5, r2
 800aa5e:	460c      	mov	r4, r1
 800aa60:	b921      	cbnz	r1, 800aa6c <_realloc_r+0x16>
 800aa62:	4611      	mov	r1, r2
 800aa64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa68:	f7fd be78 	b.w	800875c <_malloc_r>
 800aa6c:	b92a      	cbnz	r2, 800aa7a <_realloc_r+0x24>
 800aa6e:	f7fd fe03 	bl	8008678 <_free_r>
 800aa72:	2400      	movs	r4, #0
 800aa74:	4620      	mov	r0, r4
 800aa76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa7a:	f000 f840 	bl	800aafe <_malloc_usable_size_r>
 800aa7e:	4285      	cmp	r5, r0
 800aa80:	4606      	mov	r6, r0
 800aa82:	d802      	bhi.n	800aa8a <_realloc_r+0x34>
 800aa84:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aa88:	d8f4      	bhi.n	800aa74 <_realloc_r+0x1e>
 800aa8a:	4629      	mov	r1, r5
 800aa8c:	4640      	mov	r0, r8
 800aa8e:	f7fd fe65 	bl	800875c <_malloc_r>
 800aa92:	4607      	mov	r7, r0
 800aa94:	2800      	cmp	r0, #0
 800aa96:	d0ec      	beq.n	800aa72 <_realloc_r+0x1c>
 800aa98:	42b5      	cmp	r5, r6
 800aa9a:	462a      	mov	r2, r5
 800aa9c:	4621      	mov	r1, r4
 800aa9e:	bf28      	it	cs
 800aaa0:	4632      	movcs	r2, r6
 800aaa2:	f7ff fc47 	bl	800a334 <memcpy>
 800aaa6:	4621      	mov	r1, r4
 800aaa8:	4640      	mov	r0, r8
 800aaaa:	f7fd fde5 	bl	8008678 <_free_r>
 800aaae:	463c      	mov	r4, r7
 800aab0:	e7e0      	b.n	800aa74 <_realloc_r+0x1e>

0800aab2 <__ascii_wctomb>:
 800aab2:	4603      	mov	r3, r0
 800aab4:	4608      	mov	r0, r1
 800aab6:	b141      	cbz	r1, 800aaca <__ascii_wctomb+0x18>
 800aab8:	2aff      	cmp	r2, #255	@ 0xff
 800aaba:	d904      	bls.n	800aac6 <__ascii_wctomb+0x14>
 800aabc:	228a      	movs	r2, #138	@ 0x8a
 800aabe:	f04f 30ff 	mov.w	r0, #4294967295
 800aac2:	601a      	str	r2, [r3, #0]
 800aac4:	4770      	bx	lr
 800aac6:	2001      	movs	r0, #1
 800aac8:	700a      	strb	r2, [r1, #0]
 800aaca:	4770      	bx	lr

0800aacc <fiprintf>:
 800aacc:	b40e      	push	{r1, r2, r3}
 800aace:	b503      	push	{r0, r1, lr}
 800aad0:	4601      	mov	r1, r0
 800aad2:	ab03      	add	r3, sp, #12
 800aad4:	4805      	ldr	r0, [pc, #20]	@ (800aaec <fiprintf+0x20>)
 800aad6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aada:	6800      	ldr	r0, [r0, #0]
 800aadc:	9301      	str	r3, [sp, #4]
 800aade:	f000 f83d 	bl	800ab5c <_vfiprintf_r>
 800aae2:	b002      	add	sp, #8
 800aae4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aae8:	b003      	add	sp, #12
 800aaea:	4770      	bx	lr
 800aaec:	2000001c 	.word	0x2000001c

0800aaf0 <abort>:
 800aaf0:	2006      	movs	r0, #6
 800aaf2:	b508      	push	{r3, lr}
 800aaf4:	f000 fa06 	bl	800af04 <raise>
 800aaf8:	2001      	movs	r0, #1
 800aafa:	f7f7 ff28 	bl	800294e <_exit>

0800aafe <_malloc_usable_size_r>:
 800aafe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab02:	1f18      	subs	r0, r3, #4
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	bfbc      	itt	lt
 800ab08:	580b      	ldrlt	r3, [r1, r0]
 800ab0a:	18c0      	addlt	r0, r0, r3
 800ab0c:	4770      	bx	lr

0800ab0e <__sfputc_r>:
 800ab0e:	6893      	ldr	r3, [r2, #8]
 800ab10:	b410      	push	{r4}
 800ab12:	3b01      	subs	r3, #1
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	6093      	str	r3, [r2, #8]
 800ab18:	da07      	bge.n	800ab2a <__sfputc_r+0x1c>
 800ab1a:	6994      	ldr	r4, [r2, #24]
 800ab1c:	42a3      	cmp	r3, r4
 800ab1e:	db01      	blt.n	800ab24 <__sfputc_r+0x16>
 800ab20:	290a      	cmp	r1, #10
 800ab22:	d102      	bne.n	800ab2a <__sfputc_r+0x1c>
 800ab24:	bc10      	pop	{r4}
 800ab26:	f000 b931 	b.w	800ad8c <__swbuf_r>
 800ab2a:	6813      	ldr	r3, [r2, #0]
 800ab2c:	1c58      	adds	r0, r3, #1
 800ab2e:	6010      	str	r0, [r2, #0]
 800ab30:	7019      	strb	r1, [r3, #0]
 800ab32:	4608      	mov	r0, r1
 800ab34:	bc10      	pop	{r4}
 800ab36:	4770      	bx	lr

0800ab38 <__sfputs_r>:
 800ab38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab3a:	4606      	mov	r6, r0
 800ab3c:	460f      	mov	r7, r1
 800ab3e:	4614      	mov	r4, r2
 800ab40:	18d5      	adds	r5, r2, r3
 800ab42:	42ac      	cmp	r4, r5
 800ab44:	d101      	bne.n	800ab4a <__sfputs_r+0x12>
 800ab46:	2000      	movs	r0, #0
 800ab48:	e007      	b.n	800ab5a <__sfputs_r+0x22>
 800ab4a:	463a      	mov	r2, r7
 800ab4c:	4630      	mov	r0, r6
 800ab4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab52:	f7ff ffdc 	bl	800ab0e <__sfputc_r>
 800ab56:	1c43      	adds	r3, r0, #1
 800ab58:	d1f3      	bne.n	800ab42 <__sfputs_r+0xa>
 800ab5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab5c <_vfiprintf_r>:
 800ab5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab60:	460d      	mov	r5, r1
 800ab62:	4614      	mov	r4, r2
 800ab64:	4698      	mov	r8, r3
 800ab66:	4606      	mov	r6, r0
 800ab68:	b09d      	sub	sp, #116	@ 0x74
 800ab6a:	b118      	cbz	r0, 800ab74 <_vfiprintf_r+0x18>
 800ab6c:	6a03      	ldr	r3, [r0, #32]
 800ab6e:	b90b      	cbnz	r3, 800ab74 <_vfiprintf_r+0x18>
 800ab70:	f7fc fe06 	bl	8007780 <__sinit>
 800ab74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab76:	07d9      	lsls	r1, r3, #31
 800ab78:	d405      	bmi.n	800ab86 <_vfiprintf_r+0x2a>
 800ab7a:	89ab      	ldrh	r3, [r5, #12]
 800ab7c:	059a      	lsls	r2, r3, #22
 800ab7e:	d402      	bmi.n	800ab86 <_vfiprintf_r+0x2a>
 800ab80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab82:	f7fc ff14 	bl	80079ae <__retarget_lock_acquire_recursive>
 800ab86:	89ab      	ldrh	r3, [r5, #12]
 800ab88:	071b      	lsls	r3, r3, #28
 800ab8a:	d501      	bpl.n	800ab90 <_vfiprintf_r+0x34>
 800ab8c:	692b      	ldr	r3, [r5, #16]
 800ab8e:	b99b      	cbnz	r3, 800abb8 <_vfiprintf_r+0x5c>
 800ab90:	4629      	mov	r1, r5
 800ab92:	4630      	mov	r0, r6
 800ab94:	f000 f938 	bl	800ae08 <__swsetup_r>
 800ab98:	b170      	cbz	r0, 800abb8 <_vfiprintf_r+0x5c>
 800ab9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab9c:	07dc      	lsls	r4, r3, #31
 800ab9e:	d504      	bpl.n	800abaa <_vfiprintf_r+0x4e>
 800aba0:	f04f 30ff 	mov.w	r0, #4294967295
 800aba4:	b01d      	add	sp, #116	@ 0x74
 800aba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abaa:	89ab      	ldrh	r3, [r5, #12]
 800abac:	0598      	lsls	r0, r3, #22
 800abae:	d4f7      	bmi.n	800aba0 <_vfiprintf_r+0x44>
 800abb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abb2:	f7fc fefd 	bl	80079b0 <__retarget_lock_release_recursive>
 800abb6:	e7f3      	b.n	800aba0 <_vfiprintf_r+0x44>
 800abb8:	2300      	movs	r3, #0
 800abba:	9309      	str	r3, [sp, #36]	@ 0x24
 800abbc:	2320      	movs	r3, #32
 800abbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800abc2:	2330      	movs	r3, #48	@ 0x30
 800abc4:	f04f 0901 	mov.w	r9, #1
 800abc8:	f8cd 800c 	str.w	r8, [sp, #12]
 800abcc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ad78 <_vfiprintf_r+0x21c>
 800abd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800abd4:	4623      	mov	r3, r4
 800abd6:	469a      	mov	sl, r3
 800abd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abdc:	b10a      	cbz	r2, 800abe2 <_vfiprintf_r+0x86>
 800abde:	2a25      	cmp	r2, #37	@ 0x25
 800abe0:	d1f9      	bne.n	800abd6 <_vfiprintf_r+0x7a>
 800abe2:	ebba 0b04 	subs.w	fp, sl, r4
 800abe6:	d00b      	beq.n	800ac00 <_vfiprintf_r+0xa4>
 800abe8:	465b      	mov	r3, fp
 800abea:	4622      	mov	r2, r4
 800abec:	4629      	mov	r1, r5
 800abee:	4630      	mov	r0, r6
 800abf0:	f7ff ffa2 	bl	800ab38 <__sfputs_r>
 800abf4:	3001      	adds	r0, #1
 800abf6:	f000 80a7 	beq.w	800ad48 <_vfiprintf_r+0x1ec>
 800abfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abfc:	445a      	add	r2, fp
 800abfe:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac00:	f89a 3000 	ldrb.w	r3, [sl]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	f000 809f 	beq.w	800ad48 <_vfiprintf_r+0x1ec>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac14:	f10a 0a01 	add.w	sl, sl, #1
 800ac18:	9304      	str	r3, [sp, #16]
 800ac1a:	9307      	str	r3, [sp, #28]
 800ac1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac20:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac22:	4654      	mov	r4, sl
 800ac24:	2205      	movs	r2, #5
 800ac26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac2a:	4853      	ldr	r0, [pc, #332]	@ (800ad78 <_vfiprintf_r+0x21c>)
 800ac2c:	f7fc fec1 	bl	80079b2 <memchr>
 800ac30:	9a04      	ldr	r2, [sp, #16]
 800ac32:	b9d8      	cbnz	r0, 800ac6c <_vfiprintf_r+0x110>
 800ac34:	06d1      	lsls	r1, r2, #27
 800ac36:	bf44      	itt	mi
 800ac38:	2320      	movmi	r3, #32
 800ac3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac3e:	0713      	lsls	r3, r2, #28
 800ac40:	bf44      	itt	mi
 800ac42:	232b      	movmi	r3, #43	@ 0x2b
 800ac44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac48:	f89a 3000 	ldrb.w	r3, [sl]
 800ac4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac4e:	d015      	beq.n	800ac7c <_vfiprintf_r+0x120>
 800ac50:	4654      	mov	r4, sl
 800ac52:	2000      	movs	r0, #0
 800ac54:	f04f 0c0a 	mov.w	ip, #10
 800ac58:	9a07      	ldr	r2, [sp, #28]
 800ac5a:	4621      	mov	r1, r4
 800ac5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac60:	3b30      	subs	r3, #48	@ 0x30
 800ac62:	2b09      	cmp	r3, #9
 800ac64:	d94b      	bls.n	800acfe <_vfiprintf_r+0x1a2>
 800ac66:	b1b0      	cbz	r0, 800ac96 <_vfiprintf_r+0x13a>
 800ac68:	9207      	str	r2, [sp, #28]
 800ac6a:	e014      	b.n	800ac96 <_vfiprintf_r+0x13a>
 800ac6c:	eba0 0308 	sub.w	r3, r0, r8
 800ac70:	fa09 f303 	lsl.w	r3, r9, r3
 800ac74:	4313      	orrs	r3, r2
 800ac76:	46a2      	mov	sl, r4
 800ac78:	9304      	str	r3, [sp, #16]
 800ac7a:	e7d2      	b.n	800ac22 <_vfiprintf_r+0xc6>
 800ac7c:	9b03      	ldr	r3, [sp, #12]
 800ac7e:	1d19      	adds	r1, r3, #4
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	9103      	str	r1, [sp, #12]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	bfbb      	ittet	lt
 800ac88:	425b      	neglt	r3, r3
 800ac8a:	f042 0202 	orrlt.w	r2, r2, #2
 800ac8e:	9307      	strge	r3, [sp, #28]
 800ac90:	9307      	strlt	r3, [sp, #28]
 800ac92:	bfb8      	it	lt
 800ac94:	9204      	strlt	r2, [sp, #16]
 800ac96:	7823      	ldrb	r3, [r4, #0]
 800ac98:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac9a:	d10a      	bne.n	800acb2 <_vfiprintf_r+0x156>
 800ac9c:	7863      	ldrb	r3, [r4, #1]
 800ac9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800aca0:	d132      	bne.n	800ad08 <_vfiprintf_r+0x1ac>
 800aca2:	9b03      	ldr	r3, [sp, #12]
 800aca4:	3402      	adds	r4, #2
 800aca6:	1d1a      	adds	r2, r3, #4
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	9203      	str	r2, [sp, #12]
 800acac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800acb0:	9305      	str	r3, [sp, #20]
 800acb2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ad7c <_vfiprintf_r+0x220>
 800acb6:	2203      	movs	r2, #3
 800acb8:	4650      	mov	r0, sl
 800acba:	7821      	ldrb	r1, [r4, #0]
 800acbc:	f7fc fe79 	bl	80079b2 <memchr>
 800acc0:	b138      	cbz	r0, 800acd2 <_vfiprintf_r+0x176>
 800acc2:	2240      	movs	r2, #64	@ 0x40
 800acc4:	9b04      	ldr	r3, [sp, #16]
 800acc6:	eba0 000a 	sub.w	r0, r0, sl
 800acca:	4082      	lsls	r2, r0
 800accc:	4313      	orrs	r3, r2
 800acce:	3401      	adds	r4, #1
 800acd0:	9304      	str	r3, [sp, #16]
 800acd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acd6:	2206      	movs	r2, #6
 800acd8:	4829      	ldr	r0, [pc, #164]	@ (800ad80 <_vfiprintf_r+0x224>)
 800acda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800acde:	f7fc fe68 	bl	80079b2 <memchr>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	d03f      	beq.n	800ad66 <_vfiprintf_r+0x20a>
 800ace6:	4b27      	ldr	r3, [pc, #156]	@ (800ad84 <_vfiprintf_r+0x228>)
 800ace8:	bb1b      	cbnz	r3, 800ad32 <_vfiprintf_r+0x1d6>
 800acea:	9b03      	ldr	r3, [sp, #12]
 800acec:	3307      	adds	r3, #7
 800acee:	f023 0307 	bic.w	r3, r3, #7
 800acf2:	3308      	adds	r3, #8
 800acf4:	9303      	str	r3, [sp, #12]
 800acf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acf8:	443b      	add	r3, r7
 800acfa:	9309      	str	r3, [sp, #36]	@ 0x24
 800acfc:	e76a      	b.n	800abd4 <_vfiprintf_r+0x78>
 800acfe:	460c      	mov	r4, r1
 800ad00:	2001      	movs	r0, #1
 800ad02:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad06:	e7a8      	b.n	800ac5a <_vfiprintf_r+0xfe>
 800ad08:	2300      	movs	r3, #0
 800ad0a:	f04f 0c0a 	mov.w	ip, #10
 800ad0e:	4619      	mov	r1, r3
 800ad10:	3401      	adds	r4, #1
 800ad12:	9305      	str	r3, [sp, #20]
 800ad14:	4620      	mov	r0, r4
 800ad16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad1a:	3a30      	subs	r2, #48	@ 0x30
 800ad1c:	2a09      	cmp	r2, #9
 800ad1e:	d903      	bls.n	800ad28 <_vfiprintf_r+0x1cc>
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d0c6      	beq.n	800acb2 <_vfiprintf_r+0x156>
 800ad24:	9105      	str	r1, [sp, #20]
 800ad26:	e7c4      	b.n	800acb2 <_vfiprintf_r+0x156>
 800ad28:	4604      	mov	r4, r0
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad30:	e7f0      	b.n	800ad14 <_vfiprintf_r+0x1b8>
 800ad32:	ab03      	add	r3, sp, #12
 800ad34:	9300      	str	r3, [sp, #0]
 800ad36:	462a      	mov	r2, r5
 800ad38:	4630      	mov	r0, r6
 800ad3a:	4b13      	ldr	r3, [pc, #76]	@ (800ad88 <_vfiprintf_r+0x22c>)
 800ad3c:	a904      	add	r1, sp, #16
 800ad3e:	f7fb fec5 	bl	8006acc <_printf_float>
 800ad42:	4607      	mov	r7, r0
 800ad44:	1c78      	adds	r0, r7, #1
 800ad46:	d1d6      	bne.n	800acf6 <_vfiprintf_r+0x19a>
 800ad48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad4a:	07d9      	lsls	r1, r3, #31
 800ad4c:	d405      	bmi.n	800ad5a <_vfiprintf_r+0x1fe>
 800ad4e:	89ab      	ldrh	r3, [r5, #12]
 800ad50:	059a      	lsls	r2, r3, #22
 800ad52:	d402      	bmi.n	800ad5a <_vfiprintf_r+0x1fe>
 800ad54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad56:	f7fc fe2b 	bl	80079b0 <__retarget_lock_release_recursive>
 800ad5a:	89ab      	ldrh	r3, [r5, #12]
 800ad5c:	065b      	lsls	r3, r3, #25
 800ad5e:	f53f af1f 	bmi.w	800aba0 <_vfiprintf_r+0x44>
 800ad62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad64:	e71e      	b.n	800aba4 <_vfiprintf_r+0x48>
 800ad66:	ab03      	add	r3, sp, #12
 800ad68:	9300      	str	r3, [sp, #0]
 800ad6a:	462a      	mov	r2, r5
 800ad6c:	4630      	mov	r0, r6
 800ad6e:	4b06      	ldr	r3, [pc, #24]	@ (800ad88 <_vfiprintf_r+0x22c>)
 800ad70:	a904      	add	r1, sp, #16
 800ad72:	f7fc f949 	bl	8007008 <_printf_i>
 800ad76:	e7e4      	b.n	800ad42 <_vfiprintf_r+0x1e6>
 800ad78:	0800c5b9 	.word	0x0800c5b9
 800ad7c:	0800c5bf 	.word	0x0800c5bf
 800ad80:	0800c5c3 	.word	0x0800c5c3
 800ad84:	08006acd 	.word	0x08006acd
 800ad88:	0800ab39 	.word	0x0800ab39

0800ad8c <__swbuf_r>:
 800ad8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad8e:	460e      	mov	r6, r1
 800ad90:	4614      	mov	r4, r2
 800ad92:	4605      	mov	r5, r0
 800ad94:	b118      	cbz	r0, 800ad9e <__swbuf_r+0x12>
 800ad96:	6a03      	ldr	r3, [r0, #32]
 800ad98:	b90b      	cbnz	r3, 800ad9e <__swbuf_r+0x12>
 800ad9a:	f7fc fcf1 	bl	8007780 <__sinit>
 800ad9e:	69a3      	ldr	r3, [r4, #24]
 800ada0:	60a3      	str	r3, [r4, #8]
 800ada2:	89a3      	ldrh	r3, [r4, #12]
 800ada4:	071a      	lsls	r2, r3, #28
 800ada6:	d501      	bpl.n	800adac <__swbuf_r+0x20>
 800ada8:	6923      	ldr	r3, [r4, #16]
 800adaa:	b943      	cbnz	r3, 800adbe <__swbuf_r+0x32>
 800adac:	4621      	mov	r1, r4
 800adae:	4628      	mov	r0, r5
 800adb0:	f000 f82a 	bl	800ae08 <__swsetup_r>
 800adb4:	b118      	cbz	r0, 800adbe <__swbuf_r+0x32>
 800adb6:	f04f 37ff 	mov.w	r7, #4294967295
 800adba:	4638      	mov	r0, r7
 800adbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adbe:	6823      	ldr	r3, [r4, #0]
 800adc0:	6922      	ldr	r2, [r4, #16]
 800adc2:	b2f6      	uxtb	r6, r6
 800adc4:	1a98      	subs	r0, r3, r2
 800adc6:	6963      	ldr	r3, [r4, #20]
 800adc8:	4637      	mov	r7, r6
 800adca:	4283      	cmp	r3, r0
 800adcc:	dc05      	bgt.n	800adda <__swbuf_r+0x4e>
 800adce:	4621      	mov	r1, r4
 800add0:	4628      	mov	r0, r5
 800add2:	f7ff fa4b 	bl	800a26c <_fflush_r>
 800add6:	2800      	cmp	r0, #0
 800add8:	d1ed      	bne.n	800adb6 <__swbuf_r+0x2a>
 800adda:	68a3      	ldr	r3, [r4, #8]
 800addc:	3b01      	subs	r3, #1
 800adde:	60a3      	str	r3, [r4, #8]
 800ade0:	6823      	ldr	r3, [r4, #0]
 800ade2:	1c5a      	adds	r2, r3, #1
 800ade4:	6022      	str	r2, [r4, #0]
 800ade6:	701e      	strb	r6, [r3, #0]
 800ade8:	6962      	ldr	r2, [r4, #20]
 800adea:	1c43      	adds	r3, r0, #1
 800adec:	429a      	cmp	r2, r3
 800adee:	d004      	beq.n	800adfa <__swbuf_r+0x6e>
 800adf0:	89a3      	ldrh	r3, [r4, #12]
 800adf2:	07db      	lsls	r3, r3, #31
 800adf4:	d5e1      	bpl.n	800adba <__swbuf_r+0x2e>
 800adf6:	2e0a      	cmp	r6, #10
 800adf8:	d1df      	bne.n	800adba <__swbuf_r+0x2e>
 800adfa:	4621      	mov	r1, r4
 800adfc:	4628      	mov	r0, r5
 800adfe:	f7ff fa35 	bl	800a26c <_fflush_r>
 800ae02:	2800      	cmp	r0, #0
 800ae04:	d0d9      	beq.n	800adba <__swbuf_r+0x2e>
 800ae06:	e7d6      	b.n	800adb6 <__swbuf_r+0x2a>

0800ae08 <__swsetup_r>:
 800ae08:	b538      	push	{r3, r4, r5, lr}
 800ae0a:	4b29      	ldr	r3, [pc, #164]	@ (800aeb0 <__swsetup_r+0xa8>)
 800ae0c:	4605      	mov	r5, r0
 800ae0e:	6818      	ldr	r0, [r3, #0]
 800ae10:	460c      	mov	r4, r1
 800ae12:	b118      	cbz	r0, 800ae1c <__swsetup_r+0x14>
 800ae14:	6a03      	ldr	r3, [r0, #32]
 800ae16:	b90b      	cbnz	r3, 800ae1c <__swsetup_r+0x14>
 800ae18:	f7fc fcb2 	bl	8007780 <__sinit>
 800ae1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae20:	0719      	lsls	r1, r3, #28
 800ae22:	d422      	bmi.n	800ae6a <__swsetup_r+0x62>
 800ae24:	06da      	lsls	r2, r3, #27
 800ae26:	d407      	bmi.n	800ae38 <__swsetup_r+0x30>
 800ae28:	2209      	movs	r2, #9
 800ae2a:	602a      	str	r2, [r5, #0]
 800ae2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae30:	f04f 30ff 	mov.w	r0, #4294967295
 800ae34:	81a3      	strh	r3, [r4, #12]
 800ae36:	e033      	b.n	800aea0 <__swsetup_r+0x98>
 800ae38:	0758      	lsls	r0, r3, #29
 800ae3a:	d512      	bpl.n	800ae62 <__swsetup_r+0x5a>
 800ae3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae3e:	b141      	cbz	r1, 800ae52 <__swsetup_r+0x4a>
 800ae40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae44:	4299      	cmp	r1, r3
 800ae46:	d002      	beq.n	800ae4e <__swsetup_r+0x46>
 800ae48:	4628      	mov	r0, r5
 800ae4a:	f7fd fc15 	bl	8008678 <_free_r>
 800ae4e:	2300      	movs	r3, #0
 800ae50:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae52:	89a3      	ldrh	r3, [r4, #12]
 800ae54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ae58:	81a3      	strh	r3, [r4, #12]
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	6063      	str	r3, [r4, #4]
 800ae5e:	6923      	ldr	r3, [r4, #16]
 800ae60:	6023      	str	r3, [r4, #0]
 800ae62:	89a3      	ldrh	r3, [r4, #12]
 800ae64:	f043 0308 	orr.w	r3, r3, #8
 800ae68:	81a3      	strh	r3, [r4, #12]
 800ae6a:	6923      	ldr	r3, [r4, #16]
 800ae6c:	b94b      	cbnz	r3, 800ae82 <__swsetup_r+0x7a>
 800ae6e:	89a3      	ldrh	r3, [r4, #12]
 800ae70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ae74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae78:	d003      	beq.n	800ae82 <__swsetup_r+0x7a>
 800ae7a:	4621      	mov	r1, r4
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	f000 f882 	bl	800af86 <__smakebuf_r>
 800ae82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae86:	f013 0201 	ands.w	r2, r3, #1
 800ae8a:	d00a      	beq.n	800aea2 <__swsetup_r+0x9a>
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	60a2      	str	r2, [r4, #8]
 800ae90:	6962      	ldr	r2, [r4, #20]
 800ae92:	4252      	negs	r2, r2
 800ae94:	61a2      	str	r2, [r4, #24]
 800ae96:	6922      	ldr	r2, [r4, #16]
 800ae98:	b942      	cbnz	r2, 800aeac <__swsetup_r+0xa4>
 800ae9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ae9e:	d1c5      	bne.n	800ae2c <__swsetup_r+0x24>
 800aea0:	bd38      	pop	{r3, r4, r5, pc}
 800aea2:	0799      	lsls	r1, r3, #30
 800aea4:	bf58      	it	pl
 800aea6:	6962      	ldrpl	r2, [r4, #20]
 800aea8:	60a2      	str	r2, [r4, #8]
 800aeaa:	e7f4      	b.n	800ae96 <__swsetup_r+0x8e>
 800aeac:	2000      	movs	r0, #0
 800aeae:	e7f7      	b.n	800aea0 <__swsetup_r+0x98>
 800aeb0:	2000001c 	.word	0x2000001c

0800aeb4 <_raise_r>:
 800aeb4:	291f      	cmp	r1, #31
 800aeb6:	b538      	push	{r3, r4, r5, lr}
 800aeb8:	4605      	mov	r5, r0
 800aeba:	460c      	mov	r4, r1
 800aebc:	d904      	bls.n	800aec8 <_raise_r+0x14>
 800aebe:	2316      	movs	r3, #22
 800aec0:	6003      	str	r3, [r0, #0]
 800aec2:	f04f 30ff 	mov.w	r0, #4294967295
 800aec6:	bd38      	pop	{r3, r4, r5, pc}
 800aec8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aeca:	b112      	cbz	r2, 800aed2 <_raise_r+0x1e>
 800aecc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aed0:	b94b      	cbnz	r3, 800aee6 <_raise_r+0x32>
 800aed2:	4628      	mov	r0, r5
 800aed4:	f000 f830 	bl	800af38 <_getpid_r>
 800aed8:	4622      	mov	r2, r4
 800aeda:	4601      	mov	r1, r0
 800aedc:	4628      	mov	r0, r5
 800aede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aee2:	f000 b817 	b.w	800af14 <_kill_r>
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d00a      	beq.n	800af00 <_raise_r+0x4c>
 800aeea:	1c59      	adds	r1, r3, #1
 800aeec:	d103      	bne.n	800aef6 <_raise_r+0x42>
 800aeee:	2316      	movs	r3, #22
 800aef0:	6003      	str	r3, [r0, #0]
 800aef2:	2001      	movs	r0, #1
 800aef4:	e7e7      	b.n	800aec6 <_raise_r+0x12>
 800aef6:	2100      	movs	r1, #0
 800aef8:	4620      	mov	r0, r4
 800aefa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aefe:	4798      	blx	r3
 800af00:	2000      	movs	r0, #0
 800af02:	e7e0      	b.n	800aec6 <_raise_r+0x12>

0800af04 <raise>:
 800af04:	4b02      	ldr	r3, [pc, #8]	@ (800af10 <raise+0xc>)
 800af06:	4601      	mov	r1, r0
 800af08:	6818      	ldr	r0, [r3, #0]
 800af0a:	f7ff bfd3 	b.w	800aeb4 <_raise_r>
 800af0e:	bf00      	nop
 800af10:	2000001c 	.word	0x2000001c

0800af14 <_kill_r>:
 800af14:	b538      	push	{r3, r4, r5, lr}
 800af16:	2300      	movs	r3, #0
 800af18:	4d06      	ldr	r5, [pc, #24]	@ (800af34 <_kill_r+0x20>)
 800af1a:	4604      	mov	r4, r0
 800af1c:	4608      	mov	r0, r1
 800af1e:	4611      	mov	r1, r2
 800af20:	602b      	str	r3, [r5, #0]
 800af22:	f7f7 fd04 	bl	800292e <_kill>
 800af26:	1c43      	adds	r3, r0, #1
 800af28:	d102      	bne.n	800af30 <_kill_r+0x1c>
 800af2a:	682b      	ldr	r3, [r5, #0]
 800af2c:	b103      	cbz	r3, 800af30 <_kill_r+0x1c>
 800af2e:	6023      	str	r3, [r4, #0]
 800af30:	bd38      	pop	{r3, r4, r5, pc}
 800af32:	bf00      	nop
 800af34:	200005a8 	.word	0x200005a8

0800af38 <_getpid_r>:
 800af38:	f7f7 bcf2 	b.w	8002920 <_getpid>

0800af3c <__swhatbuf_r>:
 800af3c:	b570      	push	{r4, r5, r6, lr}
 800af3e:	460c      	mov	r4, r1
 800af40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af44:	4615      	mov	r5, r2
 800af46:	2900      	cmp	r1, #0
 800af48:	461e      	mov	r6, r3
 800af4a:	b096      	sub	sp, #88	@ 0x58
 800af4c:	da0c      	bge.n	800af68 <__swhatbuf_r+0x2c>
 800af4e:	89a3      	ldrh	r3, [r4, #12]
 800af50:	2100      	movs	r1, #0
 800af52:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800af56:	bf14      	ite	ne
 800af58:	2340      	movne	r3, #64	@ 0x40
 800af5a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800af5e:	2000      	movs	r0, #0
 800af60:	6031      	str	r1, [r6, #0]
 800af62:	602b      	str	r3, [r5, #0]
 800af64:	b016      	add	sp, #88	@ 0x58
 800af66:	bd70      	pop	{r4, r5, r6, pc}
 800af68:	466a      	mov	r2, sp
 800af6a:	f000 f849 	bl	800b000 <_fstat_r>
 800af6e:	2800      	cmp	r0, #0
 800af70:	dbed      	blt.n	800af4e <__swhatbuf_r+0x12>
 800af72:	9901      	ldr	r1, [sp, #4]
 800af74:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800af78:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800af7c:	4259      	negs	r1, r3
 800af7e:	4159      	adcs	r1, r3
 800af80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af84:	e7eb      	b.n	800af5e <__swhatbuf_r+0x22>

0800af86 <__smakebuf_r>:
 800af86:	898b      	ldrh	r3, [r1, #12]
 800af88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af8a:	079d      	lsls	r5, r3, #30
 800af8c:	4606      	mov	r6, r0
 800af8e:	460c      	mov	r4, r1
 800af90:	d507      	bpl.n	800afa2 <__smakebuf_r+0x1c>
 800af92:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800af96:	6023      	str	r3, [r4, #0]
 800af98:	6123      	str	r3, [r4, #16]
 800af9a:	2301      	movs	r3, #1
 800af9c:	6163      	str	r3, [r4, #20]
 800af9e:	b003      	add	sp, #12
 800afa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afa2:	466a      	mov	r2, sp
 800afa4:	ab01      	add	r3, sp, #4
 800afa6:	f7ff ffc9 	bl	800af3c <__swhatbuf_r>
 800afaa:	9f00      	ldr	r7, [sp, #0]
 800afac:	4605      	mov	r5, r0
 800afae:	4639      	mov	r1, r7
 800afb0:	4630      	mov	r0, r6
 800afb2:	f7fd fbd3 	bl	800875c <_malloc_r>
 800afb6:	b948      	cbnz	r0, 800afcc <__smakebuf_r+0x46>
 800afb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afbc:	059a      	lsls	r2, r3, #22
 800afbe:	d4ee      	bmi.n	800af9e <__smakebuf_r+0x18>
 800afc0:	f023 0303 	bic.w	r3, r3, #3
 800afc4:	f043 0302 	orr.w	r3, r3, #2
 800afc8:	81a3      	strh	r3, [r4, #12]
 800afca:	e7e2      	b.n	800af92 <__smakebuf_r+0xc>
 800afcc:	89a3      	ldrh	r3, [r4, #12]
 800afce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800afd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afd6:	81a3      	strh	r3, [r4, #12]
 800afd8:	9b01      	ldr	r3, [sp, #4]
 800afda:	6020      	str	r0, [r4, #0]
 800afdc:	b15b      	cbz	r3, 800aff6 <__smakebuf_r+0x70>
 800afde:	4630      	mov	r0, r6
 800afe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afe4:	f000 f81e 	bl	800b024 <_isatty_r>
 800afe8:	b128      	cbz	r0, 800aff6 <__smakebuf_r+0x70>
 800afea:	89a3      	ldrh	r3, [r4, #12]
 800afec:	f023 0303 	bic.w	r3, r3, #3
 800aff0:	f043 0301 	orr.w	r3, r3, #1
 800aff4:	81a3      	strh	r3, [r4, #12]
 800aff6:	89a3      	ldrh	r3, [r4, #12]
 800aff8:	431d      	orrs	r5, r3
 800affa:	81a5      	strh	r5, [r4, #12]
 800affc:	e7cf      	b.n	800af9e <__smakebuf_r+0x18>
	...

0800b000 <_fstat_r>:
 800b000:	b538      	push	{r3, r4, r5, lr}
 800b002:	2300      	movs	r3, #0
 800b004:	4d06      	ldr	r5, [pc, #24]	@ (800b020 <_fstat_r+0x20>)
 800b006:	4604      	mov	r4, r0
 800b008:	4608      	mov	r0, r1
 800b00a:	4611      	mov	r1, r2
 800b00c:	602b      	str	r3, [r5, #0]
 800b00e:	f7f7 fced 	bl	80029ec <_fstat>
 800b012:	1c43      	adds	r3, r0, #1
 800b014:	d102      	bne.n	800b01c <_fstat_r+0x1c>
 800b016:	682b      	ldr	r3, [r5, #0]
 800b018:	b103      	cbz	r3, 800b01c <_fstat_r+0x1c>
 800b01a:	6023      	str	r3, [r4, #0]
 800b01c:	bd38      	pop	{r3, r4, r5, pc}
 800b01e:	bf00      	nop
 800b020:	200005a8 	.word	0x200005a8

0800b024 <_isatty_r>:
 800b024:	b538      	push	{r3, r4, r5, lr}
 800b026:	2300      	movs	r3, #0
 800b028:	4d05      	ldr	r5, [pc, #20]	@ (800b040 <_isatty_r+0x1c>)
 800b02a:	4604      	mov	r4, r0
 800b02c:	4608      	mov	r0, r1
 800b02e:	602b      	str	r3, [r5, #0]
 800b030:	f7f7 fceb 	bl	8002a0a <_isatty>
 800b034:	1c43      	adds	r3, r0, #1
 800b036:	d102      	bne.n	800b03e <_isatty_r+0x1a>
 800b038:	682b      	ldr	r3, [r5, #0]
 800b03a:	b103      	cbz	r3, 800b03e <_isatty_r+0x1a>
 800b03c:	6023      	str	r3, [r4, #0]
 800b03e:	bd38      	pop	{r3, r4, r5, pc}
 800b040:	200005a8 	.word	0x200005a8

0800b044 <_init>:
 800b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b046:	bf00      	nop
 800b048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b04a:	bc08      	pop	{r3}
 800b04c:	469e      	mov	lr, r3
 800b04e:	4770      	bx	lr

0800b050 <_fini>:
 800b050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b052:	bf00      	nop
 800b054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b056:	bc08      	pop	{r3}
 800b058:	469e      	mov	lr, r3
 800b05a:	4770      	bx	lr
